/* service1.h
   Generated by wsdl2h 2.8.51 from http://websiteman.cnki.net/Ceph/CephStoragePort?wsdl and typemap.dat
   2017-08-15 05:52:24 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on service1.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://websiteman.cnki.net/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://websiteman.cnki.net/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://websiteman.cnki.net/"
//gsoap ns1   schema namespace:	http://websiteman.cnki.net/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__getFileDetail.
class ns1__getFileDetail;

//  Forward declaration of class ns1__getFileDetailResponse.
class ns1__getFileDetailResponse;

//  Forward declaration of class ns1__Exception.
class ns1__Exception;

//  Forward declaration of class ns1__deleteFileByName.
class ns1__deleteFileByName;

//  Forward declaration of class ns1__deleteFileByNameResponse.
class ns1__deleteFileByNameResponse;

//  Forward declaration of class ns1__getFileMessage.
class ns1__getFileMessage;

//  Forward declaration of class ns1__getFileMessageResponse.
class ns1__getFileMessageResponse;

//  Forward declaration of class ns1__deleteBucket.
class ns1__deleteBucket;

//  Forward declaration of class ns1__deleteBucketResponse.
class ns1__deleteBucketResponse;

//  Forward declaration of class ns1__deleteOneFile.
class ns1__deleteOneFile;

//  Forward declaration of class ns1__deleteOneFileResponse.
class ns1__deleteOneFileResponse;

//  Forward declaration of class ns1__getBucketNames.
class ns1__getBucketNames;

//  Forward declaration of class ns1__getBucketNamesResponse.
class ns1__getBucketNamesResponse;

//  Forward declaration of class ns1__uploadFile.
class ns1__uploadFile;

//  Forward declaration of class ns1__uploadFileResponse.
class ns1__uploadFileResponse;

//  Forward declaration of class ns1__deleteFiles.
class ns1__deleteFiles;

//  Forward declaration of class ns1__deleteFilesResponse.
class ns1__deleteFilesResponse;

//  Forward declaration of class ns1__downLoadFile.
class ns1__downLoadFile;

//  Forward declaration of class ns1__downLoadFileResponse.
class ns1__downLoadFileResponse;

//  Forward declaration of class ns1__doesBucketExists.
class ns1__doesBucketExists;

//  Forward declaration of class ns1__doesBucketExistsResponse.
class ns1__doesBucketExistsResponse;

//  Forward declaration of class ns1__deleteBatchFile.
class ns1__deleteBatchFile;

//  Forward declaration of class ns1__deleteBatchFileResponse.
class ns1__deleteBatchFileResponse;

//  Forward declaration of class ns1__createBucket.
class ns1__createBucket;

//  Forward declaration of class ns1__createBucketResponse.
class ns1__createBucketResponse;

//  Forward declaration of class ns1__doesFileExists.
class ns1__doesFileExists;

//  Forward declaration of class ns1__doesFileExistsResponse.
class ns1__doesFileExistsResponse;

//  Forward declaration of class ns1__getBucketFileNames.
class ns1__getBucketFileNames;

//  Forward declaration of class ns1__getBucketFileNamesResponse.
class ns1__getBucketFileNamesResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://websiteman.cnki.net/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://websiteman.cnki.net/                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "http://websiteman.cnki.net/":getFileDetail is a complexType.
///
/// class ns1__getFileDetail operations:
/// - ns1__getFileDetail* soap_new_ns1__getFileDetail(soap*) allocate and default initialize
/// - ns1__getFileDetail* soap_new_ns1__getFileDetail(soap*, int num) allocate array and default initialize values
/// - ns1__getFileDetail* soap_new_req_ns1__getFileDetail(soap*, ...) allocate, set required members
/// - ns1__getFileDetail* soap_new_set_ns1__getFileDetail(soap*, ...) allocate, set all public members
/// - ns1__getFileDetail::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getFileDetail(soap*, ns1__getFileDetail*) deserialize from a stream
/// - int soap_write_ns1__getFileDetail(soap*, ns1__getFileDetail*) serialize to a stream
/// - ns1__getFileDetail* ns1__getFileDetail::soap_dup(soap*) returns deep copy of ns1__getFileDetail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getFileDetail::soap_del() deep deletes ns1__getFileDetail data members, use only after ns1__getFileDetail::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getFileDetail
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getFileDetailResponse is a complexType.
///
/// class ns1__getFileDetailResponse operations:
/// - ns1__getFileDetailResponse* soap_new_ns1__getFileDetailResponse(soap*) allocate and default initialize
/// - ns1__getFileDetailResponse* soap_new_ns1__getFileDetailResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getFileDetailResponse* soap_new_req_ns1__getFileDetailResponse(soap*, ...) allocate, set required members
/// - ns1__getFileDetailResponse* soap_new_set_ns1__getFileDetailResponse(soap*, ...) allocate, set all public members
/// - ns1__getFileDetailResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getFileDetailResponse(soap*, ns1__getFileDetailResponse*) deserialize from a stream
/// - int soap_write_ns1__getFileDetailResponse(soap*, ns1__getFileDetailResponse*) serialize to a stream
/// - ns1__getFileDetailResponse* ns1__getFileDetailResponse::soap_dup(soap*) returns deep copy of ns1__getFileDetailResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getFileDetailResponse::soap_del() deep deletes ns1__getFileDetailResponse data members, use only after ns1__getFileDetailResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getFileDetailResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":Exception is a complexType.
///
/// class ns1__Exception operations:
/// - ns1__Exception* soap_new_ns1__Exception(soap*) allocate and default initialize
/// - ns1__Exception* soap_new_ns1__Exception(soap*, int num) allocate array and default initialize values
/// - ns1__Exception* soap_new_req_ns1__Exception(soap*, ...) allocate, set required members
/// - ns1__Exception* soap_new_set_ns1__Exception(soap*, ...) allocate, set all public members
/// - ns1__Exception::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Exception(soap*, ns1__Exception*) deserialize from a stream
/// - int soap_write_ns1__Exception(soap*, ns1__Exception*) serialize to a stream
/// - ns1__Exception* ns1__Exception::soap_dup(soap*) returns deep copy of ns1__Exception, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Exception::soap_del() deep deletes ns1__Exception data members, use only after ns1__Exception::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Exception
{ public:
/// Element "message" of XSD type xs:string.
    char*                                message                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteFileByName is a complexType.
///
/// class ns1__deleteFileByName operations:
/// - ns1__deleteFileByName* soap_new_ns1__deleteFileByName(soap*) allocate and default initialize
/// - ns1__deleteFileByName* soap_new_ns1__deleteFileByName(soap*, int num) allocate array and default initialize values
/// - ns1__deleteFileByName* soap_new_req_ns1__deleteFileByName(soap*, ...) allocate, set required members
/// - ns1__deleteFileByName* soap_new_set_ns1__deleteFileByName(soap*, ...) allocate, set all public members
/// - ns1__deleteFileByName::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteFileByName(soap*, ns1__deleteFileByName*) deserialize from a stream
/// - int soap_write_ns1__deleteFileByName(soap*, ns1__deleteFileByName*) serialize to a stream
/// - ns1__deleteFileByName* ns1__deleteFileByName::soap_dup(soap*) returns deep copy of ns1__deleteFileByName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteFileByName::soap_del() deep deletes ns1__deleteFileByName data members, use only after ns1__deleteFileByName::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteFileByName
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteFileByNameResponse is a complexType.
///
/// class ns1__deleteFileByNameResponse operations:
/// - ns1__deleteFileByNameResponse* soap_new_ns1__deleteFileByNameResponse(soap*) allocate and default initialize
/// - ns1__deleteFileByNameResponse* soap_new_ns1__deleteFileByNameResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deleteFileByNameResponse* soap_new_req_ns1__deleteFileByNameResponse(soap*, ...) allocate, set required members
/// - ns1__deleteFileByNameResponse* soap_new_set_ns1__deleteFileByNameResponse(soap*, ...) allocate, set all public members
/// - ns1__deleteFileByNameResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteFileByNameResponse(soap*, ns1__deleteFileByNameResponse*) deserialize from a stream
/// - int soap_write_ns1__deleteFileByNameResponse(soap*, ns1__deleteFileByNameResponse*) serialize to a stream
/// - ns1__deleteFileByNameResponse* ns1__deleteFileByNameResponse::soap_dup(soap*) returns deep copy of ns1__deleteFileByNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteFileByNameResponse::soap_del() deep deletes ns1__deleteFileByNameResponse data members, use only after ns1__deleteFileByNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteFileByNameResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getFileMessage is a complexType.
///
/// class ns1__getFileMessage operations:
/// - ns1__getFileMessage* soap_new_ns1__getFileMessage(soap*) allocate and default initialize
/// - ns1__getFileMessage* soap_new_ns1__getFileMessage(soap*, int num) allocate array and default initialize values
/// - ns1__getFileMessage* soap_new_req_ns1__getFileMessage(soap*, ...) allocate, set required members
/// - ns1__getFileMessage* soap_new_set_ns1__getFileMessage(soap*, ...) allocate, set all public members
/// - ns1__getFileMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getFileMessage(soap*, ns1__getFileMessage*) deserialize from a stream
/// - int soap_write_ns1__getFileMessage(soap*, ns1__getFileMessage*) serialize to a stream
/// - ns1__getFileMessage* ns1__getFileMessage::soap_dup(soap*) returns deep copy of ns1__getFileMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getFileMessage::soap_del() deep deletes ns1__getFileMessage data members, use only after ns1__getFileMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getFileMessage
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getFileMessageResponse is a complexType.
///
/// class ns1__getFileMessageResponse operations:
/// - ns1__getFileMessageResponse* soap_new_ns1__getFileMessageResponse(soap*) allocate and default initialize
/// - ns1__getFileMessageResponse* soap_new_ns1__getFileMessageResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getFileMessageResponse* soap_new_req_ns1__getFileMessageResponse(soap*, ...) allocate, set required members
/// - ns1__getFileMessageResponse* soap_new_set_ns1__getFileMessageResponse(soap*, ...) allocate, set all public members
/// - ns1__getFileMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getFileMessageResponse(soap*, ns1__getFileMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__getFileMessageResponse(soap*, ns1__getFileMessageResponse*) serialize to a stream
/// - ns1__getFileMessageResponse* ns1__getFileMessageResponse::soap_dup(soap*) returns deep copy of ns1__getFileMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getFileMessageResponse::soap_del() deep deletes ns1__getFileMessageResponse data members, use only after ns1__getFileMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getFileMessageResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteBucket is a complexType.
///
/// class ns1__deleteBucket operations:
/// - ns1__deleteBucket* soap_new_ns1__deleteBucket(soap*) allocate and default initialize
/// - ns1__deleteBucket* soap_new_ns1__deleteBucket(soap*, int num) allocate array and default initialize values
/// - ns1__deleteBucket* soap_new_req_ns1__deleteBucket(soap*, ...) allocate, set required members
/// - ns1__deleteBucket* soap_new_set_ns1__deleteBucket(soap*, ...) allocate, set all public members
/// - ns1__deleteBucket::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteBucket(soap*, ns1__deleteBucket*) deserialize from a stream
/// - int soap_write_ns1__deleteBucket(soap*, ns1__deleteBucket*) serialize to a stream
/// - ns1__deleteBucket* ns1__deleteBucket::soap_dup(soap*) returns deep copy of ns1__deleteBucket, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteBucket::soap_del() deep deletes ns1__deleteBucket data members, use only after ns1__deleteBucket::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteBucket
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteBucketResponse is a complexType.
///
/// class ns1__deleteBucketResponse operations:
/// - ns1__deleteBucketResponse* soap_new_ns1__deleteBucketResponse(soap*) allocate and default initialize
/// - ns1__deleteBucketResponse* soap_new_ns1__deleteBucketResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deleteBucketResponse* soap_new_req_ns1__deleteBucketResponse(soap*, ...) allocate, set required members
/// - ns1__deleteBucketResponse* soap_new_set_ns1__deleteBucketResponse(soap*, ...) allocate, set all public members
/// - ns1__deleteBucketResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteBucketResponse(soap*, ns1__deleteBucketResponse*) deserialize from a stream
/// - int soap_write_ns1__deleteBucketResponse(soap*, ns1__deleteBucketResponse*) serialize to a stream
/// - ns1__deleteBucketResponse* ns1__deleteBucketResponse::soap_dup(soap*) returns deep copy of ns1__deleteBucketResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteBucketResponse::soap_del() deep deletes ns1__deleteBucketResponse data members, use only after ns1__deleteBucketResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteBucketResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteOneFile is a complexType.
///
/// class ns1__deleteOneFile operations:
/// - ns1__deleteOneFile* soap_new_ns1__deleteOneFile(soap*) allocate and default initialize
/// - ns1__deleteOneFile* soap_new_ns1__deleteOneFile(soap*, int num) allocate array and default initialize values
/// - ns1__deleteOneFile* soap_new_req_ns1__deleteOneFile(soap*, ...) allocate, set required members
/// - ns1__deleteOneFile* soap_new_set_ns1__deleteOneFile(soap*, ...) allocate, set all public members
/// - ns1__deleteOneFile::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteOneFile(soap*, ns1__deleteOneFile*) deserialize from a stream
/// - int soap_write_ns1__deleteOneFile(soap*, ns1__deleteOneFile*) serialize to a stream
/// - ns1__deleteOneFile* ns1__deleteOneFile::soap_dup(soap*) returns deep copy of ns1__deleteOneFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteOneFile::soap_del() deep deletes ns1__deleteOneFile data members, use only after ns1__deleteOneFile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteOneFile
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteOneFileResponse is a complexType.
///
/// class ns1__deleteOneFileResponse operations:
/// - ns1__deleteOneFileResponse* soap_new_ns1__deleteOneFileResponse(soap*) allocate and default initialize
/// - ns1__deleteOneFileResponse* soap_new_ns1__deleteOneFileResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deleteOneFileResponse* soap_new_req_ns1__deleteOneFileResponse(soap*, ...) allocate, set required members
/// - ns1__deleteOneFileResponse* soap_new_set_ns1__deleteOneFileResponse(soap*, ...) allocate, set all public members
/// - ns1__deleteOneFileResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteOneFileResponse(soap*, ns1__deleteOneFileResponse*) deserialize from a stream
/// - int soap_write_ns1__deleteOneFileResponse(soap*, ns1__deleteOneFileResponse*) serialize to a stream
/// - ns1__deleteOneFileResponse* ns1__deleteOneFileResponse::soap_dup(soap*) returns deep copy of ns1__deleteOneFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteOneFileResponse::soap_del() deep deletes ns1__deleteOneFileResponse data members, use only after ns1__deleteOneFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteOneFileResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getBucketNames is a complexType.
///
/// class ns1__getBucketNames operations:
/// - ns1__getBucketNames* soap_new_ns1__getBucketNames(soap*) allocate and default initialize
/// - ns1__getBucketNames* soap_new_ns1__getBucketNames(soap*, int num) allocate array and default initialize values
/// - ns1__getBucketNames* soap_new_req_ns1__getBucketNames(soap*, ...) allocate, set required members
/// - ns1__getBucketNames* soap_new_set_ns1__getBucketNames(soap*, ...) allocate, set all public members
/// - ns1__getBucketNames::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getBucketNames(soap*, ns1__getBucketNames*) deserialize from a stream
/// - int soap_write_ns1__getBucketNames(soap*, ns1__getBucketNames*) serialize to a stream
/// - ns1__getBucketNames* ns1__getBucketNames::soap_dup(soap*) returns deep copy of ns1__getBucketNames, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getBucketNames::soap_del() deep deletes ns1__getBucketNames data members, use only after ns1__getBucketNames::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getBucketNames
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getBucketNamesResponse is a complexType.
///
/// class ns1__getBucketNamesResponse operations:
/// - ns1__getBucketNamesResponse* soap_new_ns1__getBucketNamesResponse(soap*) allocate and default initialize
/// - ns1__getBucketNamesResponse* soap_new_ns1__getBucketNamesResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getBucketNamesResponse* soap_new_req_ns1__getBucketNamesResponse(soap*, ...) allocate, set required members
/// - ns1__getBucketNamesResponse* soap_new_set_ns1__getBucketNamesResponse(soap*, ...) allocate, set all public members
/// - ns1__getBucketNamesResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getBucketNamesResponse(soap*, ns1__getBucketNamesResponse*) deserialize from a stream
/// - int soap_write_ns1__getBucketNamesResponse(soap*, ns1__getBucketNamesResponse*) serialize to a stream
/// - ns1__getBucketNamesResponse* ns1__getBucketNamesResponse::soap_dup(soap*) returns deep copy of ns1__getBucketNamesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getBucketNamesResponse::soap_del() deep deletes ns1__getBucketNamesResponse data members, use only after ns1__getBucketNamesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getBucketNamesResponse
{ public:
/// Size of array of char* is 0..unbounded.
   $int                                  __sizereturn_                  0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *return_                        0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":uploadFile is a complexType.
///
/// class ns1__uploadFile operations:
/// - ns1__uploadFile* soap_new_ns1__uploadFile(soap*) allocate and default initialize
/// - ns1__uploadFile* soap_new_ns1__uploadFile(soap*, int num) allocate array and default initialize values
/// - ns1__uploadFile* soap_new_req_ns1__uploadFile(soap*, ...) allocate, set required members
/// - ns1__uploadFile* soap_new_set_ns1__uploadFile(soap*, ...) allocate, set all public members
/// - ns1__uploadFile::soap_default(soap*) default initialize members
/// - int soap_read_ns1__uploadFile(soap*, ns1__uploadFile*) deserialize from a stream
/// - int soap_write_ns1__uploadFile(soap*, ns1__uploadFile*) serialize to a stream
/// - ns1__uploadFile* ns1__uploadFile::soap_dup(soap*) returns deep copy of ns1__uploadFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__uploadFile::soap_del() deep deletes ns1__uploadFile data members, use only after ns1__uploadFile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__uploadFile
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// Element "arg2" of XSD type xs:base64Binary.
    xsd__base64Binary*                   arg2                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":uploadFileResponse is a complexType.
///
/// class ns1__uploadFileResponse operations:
/// - ns1__uploadFileResponse* soap_new_ns1__uploadFileResponse(soap*) allocate and default initialize
/// - ns1__uploadFileResponse* soap_new_ns1__uploadFileResponse(soap*, int num) allocate array and default initialize values
/// - ns1__uploadFileResponse* soap_new_req_ns1__uploadFileResponse(soap*, ...) allocate, set required members
/// - ns1__uploadFileResponse* soap_new_set_ns1__uploadFileResponse(soap*, ...) allocate, set all public members
/// - ns1__uploadFileResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__uploadFileResponse(soap*, ns1__uploadFileResponse*) deserialize from a stream
/// - int soap_write_ns1__uploadFileResponse(soap*, ns1__uploadFileResponse*) serialize to a stream
/// - ns1__uploadFileResponse* ns1__uploadFileResponse::soap_dup(soap*) returns deep copy of ns1__uploadFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__uploadFileResponse::soap_del() deep deletes ns1__uploadFileResponse data members, use only after ns1__uploadFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__uploadFileResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteFiles is a complexType.
///
/// class ns1__deleteFiles operations:
/// - ns1__deleteFiles* soap_new_ns1__deleteFiles(soap*) allocate and default initialize
/// - ns1__deleteFiles* soap_new_ns1__deleteFiles(soap*, int num) allocate array and default initialize values
/// - ns1__deleteFiles* soap_new_req_ns1__deleteFiles(soap*, ...) allocate, set required members
/// - ns1__deleteFiles* soap_new_set_ns1__deleteFiles(soap*, ...) allocate, set all public members
/// - ns1__deleteFiles::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteFiles(soap*, ns1__deleteFiles*) deserialize from a stream
/// - int soap_write_ns1__deleteFiles(soap*, ns1__deleteFiles*) serialize to a stream
/// - ns1__deleteFiles* ns1__deleteFiles::soap_dup(soap*) returns deep copy of ns1__deleteFiles, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteFiles::soap_del() deep deletes ns1__deleteFiles data members, use only after ns1__deleteFiles::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteFiles
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Size of array of char* is 0..unbounded.
   $int                                  __sizearg1                     0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *arg1                           0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteFilesResponse is a complexType.
///
/// class ns1__deleteFilesResponse operations:
/// - ns1__deleteFilesResponse* soap_new_ns1__deleteFilesResponse(soap*) allocate and default initialize
/// - ns1__deleteFilesResponse* soap_new_ns1__deleteFilesResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deleteFilesResponse* soap_new_req_ns1__deleteFilesResponse(soap*, ...) allocate, set required members
/// - ns1__deleteFilesResponse* soap_new_set_ns1__deleteFilesResponse(soap*, ...) allocate, set all public members
/// - ns1__deleteFilesResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteFilesResponse(soap*, ns1__deleteFilesResponse*) deserialize from a stream
/// - int soap_write_ns1__deleteFilesResponse(soap*, ns1__deleteFilesResponse*) serialize to a stream
/// - ns1__deleteFilesResponse* ns1__deleteFilesResponse::soap_dup(soap*) returns deep copy of ns1__deleteFilesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteFilesResponse::soap_del() deep deletes ns1__deleteFilesResponse data members, use only after ns1__deleteFilesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteFilesResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":downLoadFile is a complexType.
///
/// class ns1__downLoadFile operations:
/// - ns1__downLoadFile* soap_new_ns1__downLoadFile(soap*) allocate and default initialize
/// - ns1__downLoadFile* soap_new_ns1__downLoadFile(soap*, int num) allocate array and default initialize values
/// - ns1__downLoadFile* soap_new_req_ns1__downLoadFile(soap*, ...) allocate, set required members
/// - ns1__downLoadFile* soap_new_set_ns1__downLoadFile(soap*, ...) allocate, set all public members
/// - ns1__downLoadFile::soap_default(soap*) default initialize members
/// - int soap_read_ns1__downLoadFile(soap*, ns1__downLoadFile*) deserialize from a stream
/// - int soap_write_ns1__downLoadFile(soap*, ns1__downLoadFile*) serialize to a stream
/// - ns1__downLoadFile* ns1__downLoadFile::soap_dup(soap*) returns deep copy of ns1__downLoadFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__downLoadFile::soap_del() deep deletes ns1__downLoadFile data members, use only after ns1__downLoadFile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__downLoadFile
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":downLoadFileResponse is a complexType.
///
/// class ns1__downLoadFileResponse operations:
/// - ns1__downLoadFileResponse* soap_new_ns1__downLoadFileResponse(soap*) allocate and default initialize
/// - ns1__downLoadFileResponse* soap_new_ns1__downLoadFileResponse(soap*, int num) allocate array and default initialize values
/// - ns1__downLoadFileResponse* soap_new_req_ns1__downLoadFileResponse(soap*, ...) allocate, set required members
/// - ns1__downLoadFileResponse* soap_new_set_ns1__downLoadFileResponse(soap*, ...) allocate, set all public members
/// - ns1__downLoadFileResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__downLoadFileResponse(soap*, ns1__downLoadFileResponse*) deserialize from a stream
/// - int soap_write_ns1__downLoadFileResponse(soap*, ns1__downLoadFileResponse*) serialize to a stream
/// - ns1__downLoadFileResponse* ns1__downLoadFileResponse::soap_dup(soap*) returns deep copy of ns1__downLoadFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__downLoadFileResponse::soap_del() deep deletes ns1__downLoadFileResponse data members, use only after ns1__downLoadFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__downLoadFileResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":doesBucketExists is a complexType.
///
/// class ns1__doesBucketExists operations:
/// - ns1__doesBucketExists* soap_new_ns1__doesBucketExists(soap*) allocate and default initialize
/// - ns1__doesBucketExists* soap_new_ns1__doesBucketExists(soap*, int num) allocate array and default initialize values
/// - ns1__doesBucketExists* soap_new_req_ns1__doesBucketExists(soap*, ...) allocate, set required members
/// - ns1__doesBucketExists* soap_new_set_ns1__doesBucketExists(soap*, ...) allocate, set all public members
/// - ns1__doesBucketExists::soap_default(soap*) default initialize members
/// - int soap_read_ns1__doesBucketExists(soap*, ns1__doesBucketExists*) deserialize from a stream
/// - int soap_write_ns1__doesBucketExists(soap*, ns1__doesBucketExists*) serialize to a stream
/// - ns1__doesBucketExists* ns1__doesBucketExists::soap_dup(soap*) returns deep copy of ns1__doesBucketExists, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__doesBucketExists::soap_del() deep deletes ns1__doesBucketExists data members, use only after ns1__doesBucketExists::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__doesBucketExists
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":doesBucketExistsResponse is a complexType.
///
/// class ns1__doesBucketExistsResponse operations:
/// - ns1__doesBucketExistsResponse* soap_new_ns1__doesBucketExistsResponse(soap*) allocate and default initialize
/// - ns1__doesBucketExistsResponse* soap_new_ns1__doesBucketExistsResponse(soap*, int num) allocate array and default initialize values
/// - ns1__doesBucketExistsResponse* soap_new_req_ns1__doesBucketExistsResponse(soap*, ...) allocate, set required members
/// - ns1__doesBucketExistsResponse* soap_new_set_ns1__doesBucketExistsResponse(soap*, ...) allocate, set all public members
/// - ns1__doesBucketExistsResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__doesBucketExistsResponse(soap*, ns1__doesBucketExistsResponse*) deserialize from a stream
/// - int soap_write_ns1__doesBucketExistsResponse(soap*, ns1__doesBucketExistsResponse*) serialize to a stream
/// - ns1__doesBucketExistsResponse* ns1__doesBucketExistsResponse::soap_dup(soap*) returns deep copy of ns1__doesBucketExistsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__doesBucketExistsResponse::soap_del() deep deletes ns1__doesBucketExistsResponse data members, use only after ns1__doesBucketExistsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__doesBucketExistsResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteBatchFile is a complexType.
///
/// class ns1__deleteBatchFile operations:
/// - ns1__deleteBatchFile* soap_new_ns1__deleteBatchFile(soap*) allocate and default initialize
/// - ns1__deleteBatchFile* soap_new_ns1__deleteBatchFile(soap*, int num) allocate array and default initialize values
/// - ns1__deleteBatchFile* soap_new_req_ns1__deleteBatchFile(soap*, ...) allocate, set required members
/// - ns1__deleteBatchFile* soap_new_set_ns1__deleteBatchFile(soap*, ...) allocate, set all public members
/// - ns1__deleteBatchFile::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteBatchFile(soap*, ns1__deleteBatchFile*) deserialize from a stream
/// - int soap_write_ns1__deleteBatchFile(soap*, ns1__deleteBatchFile*) serialize to a stream
/// - ns1__deleteBatchFile* ns1__deleteBatchFile::soap_dup(soap*) returns deep copy of ns1__deleteBatchFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteBatchFile::soap_del() deep deletes ns1__deleteBatchFile data members, use only after ns1__deleteBatchFile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteBatchFile
{ public:
/// Size of array of char* is 0..unbounded.
   $int                                  __sizearg0                     0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *arg0                           0;	///< Elements.
/// Size of array of char* is 0..unbounded.
   $int                                  __sizearg1                     0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *arg1                           0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":deleteBatchFileResponse is a complexType.
///
/// class ns1__deleteBatchFileResponse operations:
/// - ns1__deleteBatchFileResponse* soap_new_ns1__deleteBatchFileResponse(soap*) allocate and default initialize
/// - ns1__deleteBatchFileResponse* soap_new_ns1__deleteBatchFileResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deleteBatchFileResponse* soap_new_req_ns1__deleteBatchFileResponse(soap*, ...) allocate, set required members
/// - ns1__deleteBatchFileResponse* soap_new_set_ns1__deleteBatchFileResponse(soap*, ...) allocate, set all public members
/// - ns1__deleteBatchFileResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deleteBatchFileResponse(soap*, ns1__deleteBatchFileResponse*) deserialize from a stream
/// - int soap_write_ns1__deleteBatchFileResponse(soap*, ns1__deleteBatchFileResponse*) serialize to a stream
/// - ns1__deleteBatchFileResponse* ns1__deleteBatchFileResponse::soap_dup(soap*) returns deep copy of ns1__deleteBatchFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deleteBatchFileResponse::soap_del() deep deletes ns1__deleteBatchFileResponse data members, use only after ns1__deleteBatchFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deleteBatchFileResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":createBucket is a complexType.
///
/// class ns1__createBucket operations:
/// - ns1__createBucket* soap_new_ns1__createBucket(soap*) allocate and default initialize
/// - ns1__createBucket* soap_new_ns1__createBucket(soap*, int num) allocate array and default initialize values
/// - ns1__createBucket* soap_new_req_ns1__createBucket(soap*, ...) allocate, set required members
/// - ns1__createBucket* soap_new_set_ns1__createBucket(soap*, ...) allocate, set all public members
/// - ns1__createBucket::soap_default(soap*) default initialize members
/// - int soap_read_ns1__createBucket(soap*, ns1__createBucket*) deserialize from a stream
/// - int soap_write_ns1__createBucket(soap*, ns1__createBucket*) serialize to a stream
/// - ns1__createBucket* ns1__createBucket::soap_dup(soap*) returns deep copy of ns1__createBucket, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__createBucket::soap_del() deep deletes ns1__createBucket data members, use only after ns1__createBucket::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__createBucket
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":createBucketResponse is a complexType.
///
/// class ns1__createBucketResponse operations:
/// - ns1__createBucketResponse* soap_new_ns1__createBucketResponse(soap*) allocate and default initialize
/// - ns1__createBucketResponse* soap_new_ns1__createBucketResponse(soap*, int num) allocate array and default initialize values
/// - ns1__createBucketResponse* soap_new_req_ns1__createBucketResponse(soap*, ...) allocate, set required members
/// - ns1__createBucketResponse* soap_new_set_ns1__createBucketResponse(soap*, ...) allocate, set all public members
/// - ns1__createBucketResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__createBucketResponse(soap*, ns1__createBucketResponse*) deserialize from a stream
/// - int soap_write_ns1__createBucketResponse(soap*, ns1__createBucketResponse*) serialize to a stream
/// - ns1__createBucketResponse* ns1__createBucketResponse::soap_dup(soap*) returns deep copy of ns1__createBucketResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__createBucketResponse::soap_del() deep deletes ns1__createBucketResponse data members, use only after ns1__createBucketResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__createBucketResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":doesFileExists is a complexType.
///
/// class ns1__doesFileExists operations:
/// - ns1__doesFileExists* soap_new_ns1__doesFileExists(soap*) allocate and default initialize
/// - ns1__doesFileExists* soap_new_ns1__doesFileExists(soap*, int num) allocate array and default initialize values
/// - ns1__doesFileExists* soap_new_req_ns1__doesFileExists(soap*, ...) allocate, set required members
/// - ns1__doesFileExists* soap_new_set_ns1__doesFileExists(soap*, ...) allocate, set all public members
/// - ns1__doesFileExists::soap_default(soap*) default initialize members
/// - int soap_read_ns1__doesFileExists(soap*, ns1__doesFileExists*) deserialize from a stream
/// - int soap_write_ns1__doesFileExists(soap*, ns1__doesFileExists*) serialize to a stream
/// - ns1__doesFileExists* ns1__doesFileExists::soap_dup(soap*) returns deep copy of ns1__doesFileExists, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__doesFileExists::soap_del() deep deletes ns1__doesFileExists data members, use only after ns1__doesFileExists::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__doesFileExists
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":doesFileExistsResponse is a complexType.
///
/// class ns1__doesFileExistsResponse operations:
/// - ns1__doesFileExistsResponse* soap_new_ns1__doesFileExistsResponse(soap*) allocate and default initialize
/// - ns1__doesFileExistsResponse* soap_new_ns1__doesFileExistsResponse(soap*, int num) allocate array and default initialize values
/// - ns1__doesFileExistsResponse* soap_new_req_ns1__doesFileExistsResponse(soap*, ...) allocate, set required members
/// - ns1__doesFileExistsResponse* soap_new_set_ns1__doesFileExistsResponse(soap*, ...) allocate, set all public members
/// - ns1__doesFileExistsResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__doesFileExistsResponse(soap*, ns1__doesFileExistsResponse*) deserialize from a stream
/// - int soap_write_ns1__doesFileExistsResponse(soap*, ns1__doesFileExistsResponse*) serialize to a stream
/// - ns1__doesFileExistsResponse* ns1__doesFileExistsResponse::soap_dup(soap*) returns deep copy of ns1__doesFileExistsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__doesFileExistsResponse::soap_del() deep deletes ns1__doesFileExistsResponse data members, use only after ns1__doesFileExistsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__doesFileExistsResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getBucketFileNames is a complexType.
///
/// class ns1__getBucketFileNames operations:
/// - ns1__getBucketFileNames* soap_new_ns1__getBucketFileNames(soap*) allocate and default initialize
/// - ns1__getBucketFileNames* soap_new_ns1__getBucketFileNames(soap*, int num) allocate array and default initialize values
/// - ns1__getBucketFileNames* soap_new_req_ns1__getBucketFileNames(soap*, ...) allocate, set required members
/// - ns1__getBucketFileNames* soap_new_set_ns1__getBucketFileNames(soap*, ...) allocate, set all public members
/// - ns1__getBucketFileNames::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getBucketFileNames(soap*, ns1__getBucketFileNames*) deserialize from a stream
/// - int soap_write_ns1__getBucketFileNames(soap*, ns1__getBucketFileNames*) serialize to a stream
/// - ns1__getBucketFileNames* ns1__getBucketFileNames::soap_dup(soap*) returns deep copy of ns1__getBucketFileNames, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getBucketFileNames::soap_del() deep deletes ns1__getBucketFileNames data members, use only after ns1__getBucketFileNames::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getBucketFileNames
{ public:
/// Element "arg0" of XSD type xs:string.
    char*                                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://websiteman.cnki.net/":getBucketFileNamesResponse is a complexType.
///
/// class ns1__getBucketFileNamesResponse operations:
/// - ns1__getBucketFileNamesResponse* soap_new_ns1__getBucketFileNamesResponse(soap*) allocate and default initialize
/// - ns1__getBucketFileNamesResponse* soap_new_ns1__getBucketFileNamesResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getBucketFileNamesResponse* soap_new_req_ns1__getBucketFileNamesResponse(soap*, ...) allocate, set required members
/// - ns1__getBucketFileNamesResponse* soap_new_set_ns1__getBucketFileNamesResponse(soap*, ...) allocate, set all public members
/// - ns1__getBucketFileNamesResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getBucketFileNamesResponse(soap*, ns1__getBucketFileNamesResponse*) deserialize from a stream
/// - int soap_write_ns1__getBucketFileNamesResponse(soap*, ns1__getBucketFileNamesResponse*) serialize to a stream
/// - ns1__getBucketFileNamesResponse* ns1__getBucketFileNamesResponse::soap_dup(soap*) returns deep copy of ns1__getBucketFileNamesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getBucketFileNamesResponse::soap_del() deep deletes ns1__getBucketFileNamesResponse data members, use only after ns1__getBucketFileNamesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getBucketFileNamesResponse
{ public:
/// Size of array of char* is 0..unbounded.
   $int                                  __sizereturn_                  0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *return_                        0;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://websiteman.cnki.net/                                              *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://websiteman.cnki.net/":Exception of XSD type "http://websiteman.cnki.net/":Exception.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":createBucket of XSD type "http://websiteman.cnki.net/":createBucket.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":createBucketResponse of XSD type "http://websiteman.cnki.net/":createBucketResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteBatchFile of XSD type "http://websiteman.cnki.net/":deleteBatchFile.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteBatchFileResponse of XSD type "http://websiteman.cnki.net/":deleteBatchFileResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteBucket of XSD type "http://websiteman.cnki.net/":deleteBucket.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteBucketResponse of XSD type "http://websiteman.cnki.net/":deleteBucketResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteFileByName of XSD type "http://websiteman.cnki.net/":deleteFileByName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteFileByNameResponse of XSD type "http://websiteman.cnki.net/":deleteFileByNameResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteFiles of XSD type "http://websiteman.cnki.net/":deleteFiles.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteFilesResponse of XSD type "http://websiteman.cnki.net/":deleteFilesResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteOneFile of XSD type "http://websiteman.cnki.net/":deleteOneFile.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":deleteOneFileResponse of XSD type "http://websiteman.cnki.net/":deleteOneFileResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":doesBucketExists of XSD type "http://websiteman.cnki.net/":doesBucketExists.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":doesBucketExistsResponse of XSD type "http://websiteman.cnki.net/":doesBucketExistsResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":doesFileExists of XSD type "http://websiteman.cnki.net/":doesFileExists.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":doesFileExistsResponse of XSD type "http://websiteman.cnki.net/":doesFileExistsResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":downLoadFile of XSD type "http://websiteman.cnki.net/":downLoadFile.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":downLoadFileResponse of XSD type "http://websiteman.cnki.net/":downLoadFileResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getBucketFileNames of XSD type "http://websiteman.cnki.net/":getBucketFileNames.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getBucketFileNamesResponse of XSD type "http://websiteman.cnki.net/":getBucketFileNamesResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getBucketNames of XSD type "http://websiteman.cnki.net/":getBucketNames.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getBucketNamesResponse of XSD type "http://websiteman.cnki.net/":getBucketNamesResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getFileDetail of XSD type "http://websiteman.cnki.net/":getFileDetail.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getFileDetailResponse of XSD type "http://websiteman.cnki.net/":getFileDetailResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getFileMessage of XSD type "http://websiteman.cnki.net/":getFileMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":getFileMessageResponse of XSD type "http://websiteman.cnki.net/":getFileMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":uploadFile of XSD type "http://websiteman.cnki.net/":uploadFile.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://websiteman.cnki.net/":uploadFileResponse of XSD type "http://websiteman.cnki.net/":uploadFileResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://websiteman.cnki.net/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CephStoragePortBinding 
//gsoap ns1  service type:	CephStorageDelegate 
//gsoap ns1  service port:	http://websiteman.cnki.net:80/Ceph/CephStoragePort 
//gsoap ns1  service namespace:	http://websiteman.cnki.net/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CephStorageService Definitions

@section CephStorageService_bindings Service Bindings

  - @ref CephStoragePortBinding

@section CephStorageService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page CephStoragePortBinding Binding "CephStoragePortBinding"

@section CephStoragePortBinding_operations Operations of Binding "CephStoragePortBinding"

  - @ref __ns1__deleteFiles

  - @ref __ns1__createBucket

  - @ref __ns1__deleteBucket

  - @ref __ns1__doesBucketExists

  - @ref __ns1__getBucketNames

  - @ref __ns1__getBucketFileNames

  - @ref __ns1__doesFileExists

  - @ref __ns1__getFileMessage

  - @ref __ns1__getFileDetail

  - @ref __ns1__deleteOneFile

  - @ref __ns1__deleteBatchFile

  - @ref __ns1__deleteFileByName

  - @ref __ns1__uploadFile

  - @ref __ns1__downLoadFile

@section CephStoragePortBinding_ports Default endpoints of Binding "CephStoragePortBinding"

  - http://websiteman.cnki.net:80/Ceph/CephStoragePort

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "Exception" part "fault" element ""http://websiteman.cnki.net/":Exception".
    ns1__Exception*                      ns1__Exception_               ;
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CephStoragePortBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteFiles                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteFiles" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteFiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deleteFiles*                   ns1__deleteFiles_,
    // output parameters:
    ns1__deleteFilesResponse           &ns1__deleteFilesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteFiles(
    struct soap *soap,
    // input parameters:
    ns1__deleteFiles*                   ns1__deleteFiles_,
    // output parameters:
    ns1__deleteFilesResponse           &ns1__deleteFilesResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteFiles SOAP
//gsoap ns1  service method-style:	deleteFiles document
//gsoap ns1  service method-encoding:	deleteFiles literal
//gsoap ns1  service method-action:	deleteFiles ""
//gsoap ns1  service method-output-action:	deleteFiles Response
//gsoap ns1  service method-fault:	deleteFiles ns1__Exception_
int __ns1__deleteFiles(
    ns1__deleteFiles*                   ns1__deleteFiles_,	///< Input parameter
    ns1__deleteFilesResponse           &ns1__deleteFilesResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createBucket                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createBucket" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createBucket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__createBucket*                  ns1__createBucket_,
    // output parameters:
    ns1__createBucketResponse          &ns1__createBucketResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createBucket(
    struct soap *soap,
    // input parameters:
    ns1__createBucket*                  ns1__createBucket_,
    // output parameters:
    ns1__createBucketResponse          &ns1__createBucketResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createBucket SOAP
//gsoap ns1  service method-style:	createBucket document
//gsoap ns1  service method-encoding:	createBucket literal
//gsoap ns1  service method-action:	createBucket ""
//gsoap ns1  service method-output-action:	createBucket Response
//gsoap ns1  service method-fault:	createBucket ns1__Exception_
int __ns1__createBucket(
    ns1__createBucket*                  ns1__createBucket_,	///< Input parameter
    ns1__createBucketResponse          &ns1__createBucketResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteBucket                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteBucket" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteBucket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deleteBucket*                  ns1__deleteBucket_,
    // output parameters:
    ns1__deleteBucketResponse          &ns1__deleteBucketResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteBucket(
    struct soap *soap,
    // input parameters:
    ns1__deleteBucket*                  ns1__deleteBucket_,
    // output parameters:
    ns1__deleteBucketResponse          &ns1__deleteBucketResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteBucket SOAP
//gsoap ns1  service method-style:	deleteBucket document
//gsoap ns1  service method-encoding:	deleteBucket literal
//gsoap ns1  service method-action:	deleteBucket ""
//gsoap ns1  service method-output-action:	deleteBucket Response
//gsoap ns1  service method-fault:	deleteBucket ns1__Exception_
int __ns1__deleteBucket(
    ns1__deleteBucket*                  ns1__deleteBucket_,	///< Input parameter
    ns1__deleteBucketResponse          &ns1__deleteBucketResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doesBucketExists                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doesBucketExists" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doesBucketExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doesBucketExists*              ns1__doesBucketExists_,
    // output parameters:
    ns1__doesBucketExistsResponse      &ns1__doesBucketExistsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doesBucketExists(
    struct soap *soap,
    // input parameters:
    ns1__doesBucketExists*              ns1__doesBucketExists_,
    // output parameters:
    ns1__doesBucketExistsResponse      &ns1__doesBucketExistsResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doesBucketExists SOAP
//gsoap ns1  service method-style:	doesBucketExists document
//gsoap ns1  service method-encoding:	doesBucketExists literal
//gsoap ns1  service method-action:	doesBucketExists ""
//gsoap ns1  service method-output-action:	doesBucketExists Response
//gsoap ns1  service method-fault:	doesBucketExists ns1__Exception_
int __ns1__doesBucketExists(
    ns1__doesBucketExists*              ns1__doesBucketExists_,	///< Input parameter
    ns1__doesBucketExistsResponse      &ns1__doesBucketExistsResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getBucketNames                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getBucketNames" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getBucketNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getBucketNames*                ns1__getBucketNames_,
    // output parameters:
    ns1__getBucketNamesResponse        &ns1__getBucketNamesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getBucketNames(
    struct soap *soap,
    // input parameters:
    ns1__getBucketNames*                ns1__getBucketNames_,
    // output parameters:
    ns1__getBucketNamesResponse        &ns1__getBucketNamesResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getBucketNames SOAP
//gsoap ns1  service method-style:	getBucketNames document
//gsoap ns1  service method-encoding:	getBucketNames literal
//gsoap ns1  service method-action:	getBucketNames ""
//gsoap ns1  service method-output-action:	getBucketNames Response
//gsoap ns1  service method-fault:	getBucketNames ns1__Exception_
int __ns1__getBucketNames(
    ns1__getBucketNames*                ns1__getBucketNames_,	///< Input parameter
    ns1__getBucketNamesResponse        &ns1__getBucketNamesResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getBucketFileNames                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getBucketFileNames" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getBucketFileNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getBucketFileNames*            ns1__getBucketFileNames_,
    // output parameters:
    ns1__getBucketFileNamesResponse    &ns1__getBucketFileNamesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getBucketFileNames(
    struct soap *soap,
    // input parameters:
    ns1__getBucketFileNames*            ns1__getBucketFileNames_,
    // output parameters:
    ns1__getBucketFileNamesResponse    &ns1__getBucketFileNamesResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getBucketFileNames SOAP
//gsoap ns1  service method-style:	getBucketFileNames document
//gsoap ns1  service method-encoding:	getBucketFileNames literal
//gsoap ns1  service method-action:	getBucketFileNames ""
//gsoap ns1  service method-output-action:	getBucketFileNames Response
//gsoap ns1  service method-fault:	getBucketFileNames ns1__Exception_
int __ns1__getBucketFileNames(
    ns1__getBucketFileNames*            ns1__getBucketFileNames_,	///< Input parameter
    ns1__getBucketFileNamesResponse    &ns1__getBucketFileNamesResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doesFileExists                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doesFileExists" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doesFileExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doesFileExists*                ns1__doesFileExists_,
    // output parameters:
    ns1__doesFileExistsResponse        &ns1__doesFileExistsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doesFileExists(
    struct soap *soap,
    // input parameters:
    ns1__doesFileExists*                ns1__doesFileExists_,
    // output parameters:
    ns1__doesFileExistsResponse        &ns1__doesFileExistsResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doesFileExists SOAP
//gsoap ns1  service method-style:	doesFileExists document
//gsoap ns1  service method-encoding:	doesFileExists literal
//gsoap ns1  service method-action:	doesFileExists ""
//gsoap ns1  service method-output-action:	doesFileExists Response
//gsoap ns1  service method-fault:	doesFileExists ns1__Exception_
int __ns1__doesFileExists(
    ns1__doesFileExists*                ns1__doesFileExists_,	///< Input parameter
    ns1__doesFileExistsResponse        &ns1__doesFileExistsResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFileMessage                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getFileMessage" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFileMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getFileMessage*                ns1__getFileMessage_,
    // output parameters:
    ns1__getFileMessageResponse        &ns1__getFileMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFileMessage(
    struct soap *soap,
    // input parameters:
    ns1__getFileMessage*                ns1__getFileMessage_,
    // output parameters:
    ns1__getFileMessageResponse        &ns1__getFileMessageResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFileMessage SOAP
//gsoap ns1  service method-style:	getFileMessage document
//gsoap ns1  service method-encoding:	getFileMessage literal
//gsoap ns1  service method-action:	getFileMessage ""
//gsoap ns1  service method-output-action:	getFileMessage Response
//gsoap ns1  service method-fault:	getFileMessage ns1__Exception_
int __ns1__getFileMessage(
    ns1__getFileMessage*                ns1__getFileMessage_,	///< Input parameter
    ns1__getFileMessageResponse        &ns1__getFileMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFileDetail                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getFileDetail" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFileDetail(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getFileDetail*                 ns1__getFileDetail_,
    // output parameters:
    ns1__getFileDetailResponse         &ns1__getFileDetailResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFileDetail(
    struct soap *soap,
    // input parameters:
    ns1__getFileDetail*                 ns1__getFileDetail_,
    // output parameters:
    ns1__getFileDetailResponse         &ns1__getFileDetailResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFileDetail SOAP
//gsoap ns1  service method-style:	getFileDetail document
//gsoap ns1  service method-encoding:	getFileDetail literal
//gsoap ns1  service method-action:	getFileDetail ""
//gsoap ns1  service method-output-action:	getFileDetail Response
//gsoap ns1  service method-fault:	getFileDetail ns1__Exception_
int __ns1__getFileDetail(
    ns1__getFileDetail*                 ns1__getFileDetail_,	///< Input parameter
    ns1__getFileDetailResponse         &ns1__getFileDetailResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteOneFile                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteOneFile" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteOneFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deleteOneFile*                 ns1__deleteOneFile_,
    // output parameters:
    ns1__deleteOneFileResponse         &ns1__deleteOneFileResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteOneFile(
    struct soap *soap,
    // input parameters:
    ns1__deleteOneFile*                 ns1__deleteOneFile_,
    // output parameters:
    ns1__deleteOneFileResponse         &ns1__deleteOneFileResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteOneFile SOAP
//gsoap ns1  service method-style:	deleteOneFile document
//gsoap ns1  service method-encoding:	deleteOneFile literal
//gsoap ns1  service method-action:	deleteOneFile ""
//gsoap ns1  service method-output-action:	deleteOneFile Response
//gsoap ns1  service method-fault:	deleteOneFile ns1__Exception_
int __ns1__deleteOneFile(
    ns1__deleteOneFile*                 ns1__deleteOneFile_,	///< Input parameter
    ns1__deleteOneFileResponse         &ns1__deleteOneFileResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteBatchFile                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteBatchFile" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteBatchFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deleteBatchFile*               ns1__deleteBatchFile_,
    // output parameters:
    ns1__deleteBatchFileResponse       &ns1__deleteBatchFileResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteBatchFile(
    struct soap *soap,
    // input parameters:
    ns1__deleteBatchFile*               ns1__deleteBatchFile_,
    // output parameters:
    ns1__deleteBatchFileResponse       &ns1__deleteBatchFileResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteBatchFile SOAP
//gsoap ns1  service method-style:	deleteBatchFile document
//gsoap ns1  service method-encoding:	deleteBatchFile literal
//gsoap ns1  service method-action:	deleteBatchFile ""
//gsoap ns1  service method-output-action:	deleteBatchFile Response
//gsoap ns1  service method-fault:	deleteBatchFile ns1__Exception_
int __ns1__deleteBatchFile(
    ns1__deleteBatchFile*               ns1__deleteBatchFile_,	///< Input parameter
    ns1__deleteBatchFileResponse       &ns1__deleteBatchFileResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteFileByName                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteFileByName" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteFileByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deleteFileByName*              ns1__deleteFileByName_,
    // output parameters:
    ns1__deleteFileByNameResponse      &ns1__deleteFileByNameResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteFileByName(
    struct soap *soap,
    // input parameters:
    ns1__deleteFileByName*              ns1__deleteFileByName_,
    // output parameters:
    ns1__deleteFileByNameResponse      &ns1__deleteFileByNameResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteFileByName SOAP
//gsoap ns1  service method-style:	deleteFileByName document
//gsoap ns1  service method-encoding:	deleteFileByName literal
//gsoap ns1  service method-action:	deleteFileByName ""
//gsoap ns1  service method-output-action:	deleteFileByName Response
//gsoap ns1  service method-fault:	deleteFileByName ns1__Exception_
int __ns1__deleteFileByName(
    ns1__deleteFileByName*              ns1__deleteFileByName_,	///< Input parameter
    ns1__deleteFileByNameResponse      &ns1__deleteFileByNameResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__uploadFile                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__uploadFile" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__uploadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__uploadFile*                    ns1__uploadFile_,
    // output parameters:
    ns1__uploadFileResponse            &ns1__uploadFileResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__uploadFile(
    struct soap *soap,
    // input parameters:
    ns1__uploadFile*                    ns1__uploadFile_,
    // output parameters:
    ns1__uploadFileResponse            &ns1__uploadFileResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	uploadFile SOAP
//gsoap ns1  service method-style:	uploadFile document
//gsoap ns1  service method-encoding:	uploadFile literal
//gsoap ns1  service method-action:	uploadFile ""
//gsoap ns1  service method-output-action:	uploadFile Response
//gsoap ns1  service method-fault:	uploadFile ns1__Exception_
int __ns1__uploadFile(
    ns1__uploadFile*                    ns1__uploadFile_,	///< Input parameter
    ns1__uploadFileResponse            &ns1__uploadFileResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__downLoadFile                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__downLoadFile" of service binding "CephStoragePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://websiteman.cnki.net:80/Ceph/CephStoragePort

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://websiteman.cnki.net/":Exception (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__downLoadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__downLoadFile*                  ns1__downLoadFile_,
    // output parameters:
    ns1__downLoadFileResponse          &ns1__downLoadFileResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__downLoadFile(
    struct soap *soap,
    // input parameters:
    ns1__downLoadFile*                  ns1__downLoadFile_,
    // output parameters:
    ns1__downLoadFileResponse          &ns1__downLoadFileResponse_
  );
@endcode

C++ proxy class (defined in soapCephStoragePortBindingProxy.h generated with soapcpp2):
@code
  class CephStoragePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCephStoragePortBindingService.h generated with soapcpp2):
@code
  class CephStoragePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	downLoadFile SOAP
//gsoap ns1  service method-style:	downLoadFile document
//gsoap ns1  service method-encoding:	downLoadFile literal
//gsoap ns1  service method-action:	downLoadFile ""
//gsoap ns1  service method-output-action:	downLoadFile Response
//gsoap ns1  service method-fault:	downLoadFile ns1__Exception_
int __ns1__downLoadFile(
    ns1__downLoadFile*                  ns1__downLoadFile_,	///< Input parameter
    ns1__downLoadFileResponse          &ns1__downLoadFileResponse_	///< Output parameter
);

/**

@page CephStoragePortBinding Binding "CephStoragePortBinding"

@section CephStoragePortBinding_policy_enablers Policy Enablers of Binding "CephStoragePortBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section  Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://websiteman.cnki.net/"

  - <ns1:Exception> (use wsdl2h option -g to auto-generate type _ns1__Exception)

  - <ns1:createBucket> (use wsdl2h option -g to auto-generate type _ns1__createBucket)

  - <ns1:createBucketResponse> (use wsdl2h option -g to auto-generate type _ns1__createBucketResponse)

  - <ns1:deleteBatchFile> (use wsdl2h option -g to auto-generate type _ns1__deleteBatchFile)

  - <ns1:deleteBatchFileResponse> (use wsdl2h option -g to auto-generate type _ns1__deleteBatchFileResponse)

  - <ns1:deleteBucket> (use wsdl2h option -g to auto-generate type _ns1__deleteBucket)

  - <ns1:deleteBucketResponse> (use wsdl2h option -g to auto-generate type _ns1__deleteBucketResponse)

  - <ns1:deleteFileByName> (use wsdl2h option -g to auto-generate type _ns1__deleteFileByName)

  - <ns1:deleteFileByNameResponse> (use wsdl2h option -g to auto-generate type _ns1__deleteFileByNameResponse)

  - <ns1:deleteFiles> (use wsdl2h option -g to auto-generate type _ns1__deleteFiles)

  - <ns1:deleteFilesResponse> (use wsdl2h option -g to auto-generate type _ns1__deleteFilesResponse)

  - <ns1:deleteOneFile> (use wsdl2h option -g to auto-generate type _ns1__deleteOneFile)

  - <ns1:deleteOneFileResponse> (use wsdl2h option -g to auto-generate type _ns1__deleteOneFileResponse)

  - <ns1:doesBucketExists> (use wsdl2h option -g to auto-generate type _ns1__doesBucketExists)

  - <ns1:doesBucketExistsResponse> (use wsdl2h option -g to auto-generate type _ns1__doesBucketExistsResponse)

  - <ns1:doesFileExists> (use wsdl2h option -g to auto-generate type _ns1__doesFileExists)

  - <ns1:doesFileExistsResponse> (use wsdl2h option -g to auto-generate type _ns1__doesFileExistsResponse)

  - <ns1:downLoadFile> (use wsdl2h option -g to auto-generate type _ns1__downLoadFile)

  - <ns1:downLoadFileResponse> (use wsdl2h option -g to auto-generate type _ns1__downLoadFileResponse)

  - <ns1:getBucketFileNames> (use wsdl2h option -g to auto-generate type _ns1__getBucketFileNames)

  - <ns1:getBucketFileNamesResponse> (use wsdl2h option -g to auto-generate type _ns1__getBucketFileNamesResponse)

  - <ns1:getBucketNames> (use wsdl2h option -g to auto-generate type _ns1__getBucketNames)

  - <ns1:getBucketNamesResponse> (use wsdl2h option -g to auto-generate type _ns1__getBucketNamesResponse)

  - <ns1:getFileDetail> (use wsdl2h option -g to auto-generate type _ns1__getFileDetail)

  - <ns1:getFileDetailResponse> (use wsdl2h option -g to auto-generate type _ns1__getFileDetailResponse)

  - <ns1:getFileMessage> (use wsdl2h option -g to auto-generate type _ns1__getFileMessage)

  - <ns1:getFileMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__getFileMessageResponse)

  - <ns1:uploadFile> (use wsdl2h option -g to auto-generate type _ns1__uploadFile)

  - <ns1:uploadFileResponse> (use wsdl2h option -g to auto-generate type _ns1__uploadFileResponse)

*/

/* End of service1.h */
