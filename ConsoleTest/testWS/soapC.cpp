/* soapC.cpp
   Generated by gSOAP 2.8.51 for service1.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.51 2017-08-15 05:58:48 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		return soap_in_ns1__getBucketFileNamesResponse(soap, NULL, NULL, "ns1:getBucketFileNamesResponse");
	case SOAP_TYPE_ns1__getBucketFileNames:
		return soap_in_ns1__getBucketFileNames(soap, NULL, NULL, "ns1:getBucketFileNames");
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		return soap_in_ns1__doesFileExistsResponse(soap, NULL, NULL, "ns1:doesFileExistsResponse");
	case SOAP_TYPE_ns1__doesFileExists:
		return soap_in_ns1__doesFileExists(soap, NULL, NULL, "ns1:doesFileExists");
	case SOAP_TYPE_ns1__createBucketResponse:
		return soap_in_ns1__createBucketResponse(soap, NULL, NULL, "ns1:createBucketResponse");
	case SOAP_TYPE_ns1__createBucket:
		return soap_in_ns1__createBucket(soap, NULL, NULL, "ns1:createBucket");
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		return soap_in_ns1__deleteBatchFileResponse(soap, NULL, NULL, "ns1:deleteBatchFileResponse");
	case SOAP_TYPE_ns1__deleteBatchFile:
		return soap_in_ns1__deleteBatchFile(soap, NULL, NULL, "ns1:deleteBatchFile");
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		return soap_in_ns1__doesBucketExistsResponse(soap, NULL, NULL, "ns1:doesBucketExistsResponse");
	case SOAP_TYPE_ns1__doesBucketExists:
		return soap_in_ns1__doesBucketExists(soap, NULL, NULL, "ns1:doesBucketExists");
	case SOAP_TYPE_ns1__downLoadFileResponse:
		return soap_in_ns1__downLoadFileResponse(soap, NULL, NULL, "ns1:downLoadFileResponse");
	case SOAP_TYPE_ns1__downLoadFile:
		return soap_in_ns1__downLoadFile(soap, NULL, NULL, "ns1:downLoadFile");
	case SOAP_TYPE_ns1__deleteFilesResponse:
		return soap_in_ns1__deleteFilesResponse(soap, NULL, NULL, "ns1:deleteFilesResponse");
	case SOAP_TYPE_ns1__deleteFiles:
		return soap_in_ns1__deleteFiles(soap, NULL, NULL, "ns1:deleteFiles");
	case SOAP_TYPE_ns1__uploadFileResponse:
		return soap_in_ns1__uploadFileResponse(soap, NULL, NULL, "ns1:uploadFileResponse");
	case SOAP_TYPE_ns1__uploadFile:
		return soap_in_ns1__uploadFile(soap, NULL, NULL, "ns1:uploadFile");
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		return soap_in_ns1__getBucketNamesResponse(soap, NULL, NULL, "ns1:getBucketNamesResponse");
	case SOAP_TYPE_ns1__getBucketNames:
		return soap_in_ns1__getBucketNames(soap, NULL, NULL, "ns1:getBucketNames");
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		return soap_in_ns1__deleteOneFileResponse(soap, NULL, NULL, "ns1:deleteOneFileResponse");
	case SOAP_TYPE_ns1__deleteOneFile:
		return soap_in_ns1__deleteOneFile(soap, NULL, NULL, "ns1:deleteOneFile");
	case SOAP_TYPE_ns1__deleteBucketResponse:
		return soap_in_ns1__deleteBucketResponse(soap, NULL, NULL, "ns1:deleteBucketResponse");
	case SOAP_TYPE_ns1__deleteBucket:
		return soap_in_ns1__deleteBucket(soap, NULL, NULL, "ns1:deleteBucket");
	case SOAP_TYPE_ns1__getFileMessageResponse:
		return soap_in_ns1__getFileMessageResponse(soap, NULL, NULL, "ns1:getFileMessageResponse");
	case SOAP_TYPE_ns1__getFileMessage:
		return soap_in_ns1__getFileMessage(soap, NULL, NULL, "ns1:getFileMessage");
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		return soap_in_ns1__deleteFileByNameResponse(soap, NULL, NULL, "ns1:deleteFileByNameResponse");
	case SOAP_TYPE_ns1__deleteFileByName:
		return soap_in_ns1__deleteFileByName(soap, NULL, NULL, "ns1:deleteFileByName");
	case SOAP_TYPE_ns1__Exception:
		return soap_in_ns1__Exception(soap, NULL, NULL, "ns1:Exception");
	case SOAP_TYPE_ns1__getFileDetailResponse:
		return soap_in_ns1__getFileDetailResponse(soap, NULL, NULL, "ns1:getFileDetailResponse");
	case SOAP_TYPE_ns1__getFileDetail:
		return soap_in_ns1__getFileDetail(soap, NULL, NULL, "ns1:getFileDetail");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__downLoadFile:
		return soap_in_PointerTons1__downLoadFile(soap, NULL, NULL, "ns1:downLoadFile");
	case SOAP_TYPE_PointerTons1__uploadFile:
		return soap_in_PointerTons1__uploadFile(soap, NULL, NULL, "ns1:uploadFile");
	case SOAP_TYPE_PointerTons1__deleteFileByName:
		return soap_in_PointerTons1__deleteFileByName(soap, NULL, NULL, "ns1:deleteFileByName");
	case SOAP_TYPE_PointerTons1__deleteBatchFile:
		return soap_in_PointerTons1__deleteBatchFile(soap, NULL, NULL, "ns1:deleteBatchFile");
	case SOAP_TYPE_PointerTons1__deleteOneFile:
		return soap_in_PointerTons1__deleteOneFile(soap, NULL, NULL, "ns1:deleteOneFile");
	case SOAP_TYPE_PointerTons1__getFileDetail:
		return soap_in_PointerTons1__getFileDetail(soap, NULL, NULL, "ns1:getFileDetail");
	case SOAP_TYPE_PointerTons1__getFileMessage:
		return soap_in_PointerTons1__getFileMessage(soap, NULL, NULL, "ns1:getFileMessage");
	case SOAP_TYPE_PointerTons1__doesFileExists:
		return soap_in_PointerTons1__doesFileExists(soap, NULL, NULL, "ns1:doesFileExists");
	case SOAP_TYPE_PointerTons1__getBucketFileNames:
		return soap_in_PointerTons1__getBucketFileNames(soap, NULL, NULL, "ns1:getBucketFileNames");
	case SOAP_TYPE_PointerTons1__getBucketNames:
		return soap_in_PointerTons1__getBucketNames(soap, NULL, NULL, "ns1:getBucketNames");
	case SOAP_TYPE_PointerTons1__doesBucketExists:
		return soap_in_PointerTons1__doesBucketExists(soap, NULL, NULL, "ns1:doesBucketExists");
	case SOAP_TYPE_PointerTons1__deleteBucket:
		return soap_in_PointerTons1__deleteBucket(soap, NULL, NULL, "ns1:deleteBucket");
	case SOAP_TYPE_PointerTons1__createBucket:
		return soap_in_PointerTons1__createBucket(soap, NULL, NULL, "ns1:createBucket");
	case SOAP_TYPE_PointerTons1__deleteFiles:
		return soap_in_PointerTons1__deleteFiles(soap, NULL, NULL, "ns1:deleteFiles");
	case SOAP_TYPE_PointerTons1__Exception:
		return soap_in_PointerTons1__Exception(soap, NULL, NULL, "ns1:Exception");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getBucketFileNamesResponse"))
		{	*type = SOAP_TYPE_ns1__getBucketFileNamesResponse;
			return soap_in_ns1__getBucketFileNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBucketFileNames"))
		{	*type = SOAP_TYPE_ns1__getBucketFileNames;
			return soap_in_ns1__getBucketFileNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:doesFileExistsResponse"))
		{	*type = SOAP_TYPE_ns1__doesFileExistsResponse;
			return soap_in_ns1__doesFileExistsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:doesFileExists"))
		{	*type = SOAP_TYPE_ns1__doesFileExists;
			return soap_in_ns1__doesFileExists(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:createBucketResponse"))
		{	*type = SOAP_TYPE_ns1__createBucketResponse;
			return soap_in_ns1__createBucketResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:createBucket"))
		{	*type = SOAP_TYPE_ns1__createBucket;
			return soap_in_ns1__createBucket(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteBatchFileResponse"))
		{	*type = SOAP_TYPE_ns1__deleteBatchFileResponse;
			return soap_in_ns1__deleteBatchFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteBatchFile"))
		{	*type = SOAP_TYPE_ns1__deleteBatchFile;
			return soap_in_ns1__deleteBatchFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:doesBucketExistsResponse"))
		{	*type = SOAP_TYPE_ns1__doesBucketExistsResponse;
			return soap_in_ns1__doesBucketExistsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:doesBucketExists"))
		{	*type = SOAP_TYPE_ns1__doesBucketExists;
			return soap_in_ns1__doesBucketExists(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downLoadFileResponse"))
		{	*type = SOAP_TYPE_ns1__downLoadFileResponse;
			return soap_in_ns1__downLoadFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downLoadFile"))
		{	*type = SOAP_TYPE_ns1__downLoadFile;
			return soap_in_ns1__downLoadFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteFilesResponse"))
		{	*type = SOAP_TYPE_ns1__deleteFilesResponse;
			return soap_in_ns1__deleteFilesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteFiles"))
		{	*type = SOAP_TYPE_ns1__deleteFiles;
			return soap_in_ns1__deleteFiles(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadFileResponse"))
		{	*type = SOAP_TYPE_ns1__uploadFileResponse;
			return soap_in_ns1__uploadFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadFile"))
		{	*type = SOAP_TYPE_ns1__uploadFile;
			return soap_in_ns1__uploadFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBucketNamesResponse"))
		{	*type = SOAP_TYPE_ns1__getBucketNamesResponse;
			return soap_in_ns1__getBucketNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBucketNames"))
		{	*type = SOAP_TYPE_ns1__getBucketNames;
			return soap_in_ns1__getBucketNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteOneFileResponse"))
		{	*type = SOAP_TYPE_ns1__deleteOneFileResponse;
			return soap_in_ns1__deleteOneFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteOneFile"))
		{	*type = SOAP_TYPE_ns1__deleteOneFile;
			return soap_in_ns1__deleteOneFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteBucketResponse"))
		{	*type = SOAP_TYPE_ns1__deleteBucketResponse;
			return soap_in_ns1__deleteBucketResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteBucket"))
		{	*type = SOAP_TYPE_ns1__deleteBucket;
			return soap_in_ns1__deleteBucket(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFileMessageResponse"))
		{	*type = SOAP_TYPE_ns1__getFileMessageResponse;
			return soap_in_ns1__getFileMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFileMessage"))
		{	*type = SOAP_TYPE_ns1__getFileMessage;
			return soap_in_ns1__getFileMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteFileByNameResponse"))
		{	*type = SOAP_TYPE_ns1__deleteFileByNameResponse;
			return soap_in_ns1__deleteFileByNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteFileByName"))
		{	*type = SOAP_TYPE_ns1__deleteFileByName;
			return soap_in_ns1__deleteFileByName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Exception"))
		{	*type = SOAP_TYPE_ns1__Exception;
			return soap_in_ns1__Exception(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFileDetailResponse"))
		{	*type = SOAP_TYPE_ns1__getFileDetailResponse;
			return soap_in_ns1__getFileDetailResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFileDetail"))
		{	*type = SOAP_TYPE_ns1__getFileDetail;
			return soap_in_ns1__getFileDetail(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		return ((ns1__getBucketFileNamesResponse *)ptr)->soap_out(soap, tag, id, "ns1:getBucketFileNamesResponse");
	case SOAP_TYPE_ns1__getBucketFileNames:
		return ((ns1__getBucketFileNames *)ptr)->soap_out(soap, tag, id, "ns1:getBucketFileNames");
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		return ((ns1__doesFileExistsResponse *)ptr)->soap_out(soap, tag, id, "ns1:doesFileExistsResponse");
	case SOAP_TYPE_ns1__doesFileExists:
		return ((ns1__doesFileExists *)ptr)->soap_out(soap, tag, id, "ns1:doesFileExists");
	case SOAP_TYPE_ns1__createBucketResponse:
		return ((ns1__createBucketResponse *)ptr)->soap_out(soap, tag, id, "ns1:createBucketResponse");
	case SOAP_TYPE_ns1__createBucket:
		return ((ns1__createBucket *)ptr)->soap_out(soap, tag, id, "ns1:createBucket");
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		return ((ns1__deleteBatchFileResponse *)ptr)->soap_out(soap, tag, id, "ns1:deleteBatchFileResponse");
	case SOAP_TYPE_ns1__deleteBatchFile:
		return ((ns1__deleteBatchFile *)ptr)->soap_out(soap, tag, id, "ns1:deleteBatchFile");
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		return ((ns1__doesBucketExistsResponse *)ptr)->soap_out(soap, tag, id, "ns1:doesBucketExistsResponse");
	case SOAP_TYPE_ns1__doesBucketExists:
		return ((ns1__doesBucketExists *)ptr)->soap_out(soap, tag, id, "ns1:doesBucketExists");
	case SOAP_TYPE_ns1__downLoadFileResponse:
		return ((ns1__downLoadFileResponse *)ptr)->soap_out(soap, tag, id, "ns1:downLoadFileResponse");
	case SOAP_TYPE_ns1__downLoadFile:
		return ((ns1__downLoadFile *)ptr)->soap_out(soap, tag, id, "ns1:downLoadFile");
	case SOAP_TYPE_ns1__deleteFilesResponse:
		return ((ns1__deleteFilesResponse *)ptr)->soap_out(soap, tag, id, "ns1:deleteFilesResponse");
	case SOAP_TYPE_ns1__deleteFiles:
		return ((ns1__deleteFiles *)ptr)->soap_out(soap, tag, id, "ns1:deleteFiles");
	case SOAP_TYPE_ns1__uploadFileResponse:
		return ((ns1__uploadFileResponse *)ptr)->soap_out(soap, tag, id, "ns1:uploadFileResponse");
	case SOAP_TYPE_ns1__uploadFile:
		return ((ns1__uploadFile *)ptr)->soap_out(soap, tag, id, "ns1:uploadFile");
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		return ((ns1__getBucketNamesResponse *)ptr)->soap_out(soap, tag, id, "ns1:getBucketNamesResponse");
	case SOAP_TYPE_ns1__getBucketNames:
		return ((ns1__getBucketNames *)ptr)->soap_out(soap, tag, id, "ns1:getBucketNames");
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		return ((ns1__deleteOneFileResponse *)ptr)->soap_out(soap, tag, id, "ns1:deleteOneFileResponse");
	case SOAP_TYPE_ns1__deleteOneFile:
		return ((ns1__deleteOneFile *)ptr)->soap_out(soap, tag, id, "ns1:deleteOneFile");
	case SOAP_TYPE_ns1__deleteBucketResponse:
		return ((ns1__deleteBucketResponse *)ptr)->soap_out(soap, tag, id, "ns1:deleteBucketResponse");
	case SOAP_TYPE_ns1__deleteBucket:
		return ((ns1__deleteBucket *)ptr)->soap_out(soap, tag, id, "ns1:deleteBucket");
	case SOAP_TYPE_ns1__getFileMessageResponse:
		return ((ns1__getFileMessageResponse *)ptr)->soap_out(soap, tag, id, "ns1:getFileMessageResponse");
	case SOAP_TYPE_ns1__getFileMessage:
		return ((ns1__getFileMessage *)ptr)->soap_out(soap, tag, id, "ns1:getFileMessage");
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		return ((ns1__deleteFileByNameResponse *)ptr)->soap_out(soap, tag, id, "ns1:deleteFileByNameResponse");
	case SOAP_TYPE_ns1__deleteFileByName:
		return ((ns1__deleteFileByName *)ptr)->soap_out(soap, tag, id, "ns1:deleteFileByName");
	case SOAP_TYPE_ns1__Exception:
		return ((ns1__Exception *)ptr)->soap_out(soap, tag, id, "ns1:Exception");
	case SOAP_TYPE_ns1__getFileDetailResponse:
		return ((ns1__getFileDetailResponse *)ptr)->soap_out(soap, tag, id, "ns1:getFileDetailResponse");
	case SOAP_TYPE_ns1__getFileDetail:
		return ((ns1__getFileDetail *)ptr)->soap_out(soap, tag, id, "ns1:getFileDetail");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__downLoadFile:
		return soap_out_PointerTons1__downLoadFile(soap, tag, id, (ns1__downLoadFile *const*)ptr, "ns1:downLoadFile");
	case SOAP_TYPE_PointerTons1__uploadFile:
		return soap_out_PointerTons1__uploadFile(soap, tag, id, (ns1__uploadFile *const*)ptr, "ns1:uploadFile");
	case SOAP_TYPE_PointerTons1__deleteFileByName:
		return soap_out_PointerTons1__deleteFileByName(soap, tag, id, (ns1__deleteFileByName *const*)ptr, "ns1:deleteFileByName");
	case SOAP_TYPE_PointerTons1__deleteBatchFile:
		return soap_out_PointerTons1__deleteBatchFile(soap, tag, id, (ns1__deleteBatchFile *const*)ptr, "ns1:deleteBatchFile");
	case SOAP_TYPE_PointerTons1__deleteOneFile:
		return soap_out_PointerTons1__deleteOneFile(soap, tag, id, (ns1__deleteOneFile *const*)ptr, "ns1:deleteOneFile");
	case SOAP_TYPE_PointerTons1__getFileDetail:
		return soap_out_PointerTons1__getFileDetail(soap, tag, id, (ns1__getFileDetail *const*)ptr, "ns1:getFileDetail");
	case SOAP_TYPE_PointerTons1__getFileMessage:
		return soap_out_PointerTons1__getFileMessage(soap, tag, id, (ns1__getFileMessage *const*)ptr, "ns1:getFileMessage");
	case SOAP_TYPE_PointerTons1__doesFileExists:
		return soap_out_PointerTons1__doesFileExists(soap, tag, id, (ns1__doesFileExists *const*)ptr, "ns1:doesFileExists");
	case SOAP_TYPE_PointerTons1__getBucketFileNames:
		return soap_out_PointerTons1__getBucketFileNames(soap, tag, id, (ns1__getBucketFileNames *const*)ptr, "ns1:getBucketFileNames");
	case SOAP_TYPE_PointerTons1__getBucketNames:
		return soap_out_PointerTons1__getBucketNames(soap, tag, id, (ns1__getBucketNames *const*)ptr, "ns1:getBucketNames");
	case SOAP_TYPE_PointerTons1__doesBucketExists:
		return soap_out_PointerTons1__doesBucketExists(soap, tag, id, (ns1__doesBucketExists *const*)ptr, "ns1:doesBucketExists");
	case SOAP_TYPE_PointerTons1__deleteBucket:
		return soap_out_PointerTons1__deleteBucket(soap, tag, id, (ns1__deleteBucket *const*)ptr, "ns1:deleteBucket");
	case SOAP_TYPE_PointerTons1__createBucket:
		return soap_out_PointerTons1__createBucket(soap, tag, id, (ns1__createBucket *const*)ptr, "ns1:createBucket");
	case SOAP_TYPE_PointerTons1__deleteFiles:
		return soap_out_PointerTons1__deleteFiles(soap, tag, id, (ns1__deleteFiles *const*)ptr, "ns1:deleteFiles");
	case SOAP_TYPE_PointerTons1__Exception:
		return soap_out_PointerTons1__Exception(soap, tag, id, (ns1__Exception *const*)ptr, "ns1:Exception");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		((ns1__getBucketFileNamesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getBucketFileNames:
		((ns1__getBucketFileNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		((ns1__doesFileExistsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__doesFileExists:
		((ns1__doesFileExists *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__createBucketResponse:
		((ns1__createBucketResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__createBucket:
		((ns1__createBucket *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		((ns1__deleteBatchFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteBatchFile:
		((ns1__deleteBatchFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		((ns1__doesBucketExistsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__doesBucketExists:
		((ns1__doesBucketExists *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__downLoadFileResponse:
		((ns1__downLoadFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__downLoadFile:
		((ns1__downLoadFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteFilesResponse:
		((ns1__deleteFilesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteFiles:
		((ns1__deleteFiles *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__uploadFileResponse:
		((ns1__uploadFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__uploadFile:
		((ns1__uploadFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		((ns1__getBucketNamesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getBucketNames:
		((ns1__getBucketNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		((ns1__deleteOneFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteOneFile:
		((ns1__deleteOneFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteBucketResponse:
		((ns1__deleteBucketResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteBucket:
		((ns1__deleteBucket *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getFileMessageResponse:
		((ns1__getFileMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getFileMessage:
		((ns1__getFileMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		((ns1__deleteFileByNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deleteFileByName:
		((ns1__deleteFileByName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Exception:
		((ns1__Exception *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getFileDetailResponse:
		((ns1__getFileDetailResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getFileDetail:
		((ns1__getFileDetail *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__downLoadFile:
		soap_serialize___ns1__downLoadFile(soap, (const struct __ns1__downLoadFile *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadFile:
		soap_serialize___ns1__uploadFile(soap, (const struct __ns1__uploadFile *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteFileByName:
		soap_serialize___ns1__deleteFileByName(soap, (const struct __ns1__deleteFileByName *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteBatchFile:
		soap_serialize___ns1__deleteBatchFile(soap, (const struct __ns1__deleteBatchFile *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteOneFile:
		soap_serialize___ns1__deleteOneFile(soap, (const struct __ns1__deleteOneFile *)ptr);
		break;
	case SOAP_TYPE___ns1__getFileDetail:
		soap_serialize___ns1__getFileDetail(soap, (const struct __ns1__getFileDetail *)ptr);
		break;
	case SOAP_TYPE___ns1__getFileMessage:
		soap_serialize___ns1__getFileMessage(soap, (const struct __ns1__getFileMessage *)ptr);
		break;
	case SOAP_TYPE___ns1__doesFileExists:
		soap_serialize___ns1__doesFileExists(soap, (const struct __ns1__doesFileExists *)ptr);
		break;
	case SOAP_TYPE___ns1__getBucketFileNames:
		soap_serialize___ns1__getBucketFileNames(soap, (const struct __ns1__getBucketFileNames *)ptr);
		break;
	case SOAP_TYPE___ns1__getBucketNames:
		soap_serialize___ns1__getBucketNames(soap, (const struct __ns1__getBucketNames *)ptr);
		break;
	case SOAP_TYPE___ns1__doesBucketExists:
		soap_serialize___ns1__doesBucketExists(soap, (const struct __ns1__doesBucketExists *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteBucket:
		soap_serialize___ns1__deleteBucket(soap, (const struct __ns1__deleteBucket *)ptr);
		break;
	case SOAP_TYPE___ns1__createBucket:
		soap_serialize___ns1__createBucket(soap, (const struct __ns1__createBucket *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteFiles:
		soap_serialize___ns1__deleteFiles(soap, (const struct __ns1__deleteFiles *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__downLoadFile:
		soap_serialize_PointerTons1__downLoadFile(soap, (ns1__downLoadFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__uploadFile:
		soap_serialize_PointerTons1__uploadFile(soap, (ns1__uploadFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deleteFileByName:
		soap_serialize_PointerTons1__deleteFileByName(soap, (ns1__deleteFileByName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deleteBatchFile:
		soap_serialize_PointerTons1__deleteBatchFile(soap, (ns1__deleteBatchFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deleteOneFile:
		soap_serialize_PointerTons1__deleteOneFile(soap, (ns1__deleteOneFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getFileDetail:
		soap_serialize_PointerTons1__getFileDetail(soap, (ns1__getFileDetail *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getFileMessage:
		soap_serialize_PointerTons1__getFileMessage(soap, (ns1__getFileMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__doesFileExists:
		soap_serialize_PointerTons1__doesFileExists(soap, (ns1__doesFileExists *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getBucketFileNames:
		soap_serialize_PointerTons1__getBucketFileNames(soap, (ns1__getBucketFileNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getBucketNames:
		soap_serialize_PointerTons1__getBucketNames(soap, (ns1__getBucketNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__doesBucketExists:
		soap_serialize_PointerTons1__doesBucketExists(soap, (ns1__doesBucketExists *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deleteBucket:
		soap_serialize_PointerTons1__deleteBucket(soap, (ns1__deleteBucket *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__createBucket:
		soap_serialize_PointerTons1__createBucket(soap, (ns1__createBucket *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deleteFiles:
		soap_serialize_PointerTons1__deleteFiles(soap, (ns1__deleteFiles *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Exception:
		soap_serialize_PointerTons1__Exception(soap, (ns1__Exception *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFileDetail:
		return (void*)soap_instantiate_ns1__getFileDetail(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFileDetailResponse:
		return (void*)soap_instantiate_ns1__getFileDetailResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Exception:
		return (void*)soap_instantiate_ns1__Exception(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteFileByName:
		return (void*)soap_instantiate_ns1__deleteFileByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		return (void*)soap_instantiate_ns1__deleteFileByNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFileMessage:
		return (void*)soap_instantiate_ns1__getFileMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFileMessageResponse:
		return (void*)soap_instantiate_ns1__getFileMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteBucket:
		return (void*)soap_instantiate_ns1__deleteBucket(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteBucketResponse:
		return (void*)soap_instantiate_ns1__deleteBucketResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteOneFile:
		return (void*)soap_instantiate_ns1__deleteOneFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		return (void*)soap_instantiate_ns1__deleteOneFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getBucketNames:
		return (void*)soap_instantiate_ns1__getBucketNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		return (void*)soap_instantiate_ns1__getBucketNamesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__uploadFile:
		return (void*)soap_instantiate_ns1__uploadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__uploadFileResponse:
		return (void*)soap_instantiate_ns1__uploadFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteFiles:
		return (void*)soap_instantiate_ns1__deleteFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteFilesResponse:
		return (void*)soap_instantiate_ns1__deleteFilesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__downLoadFile:
		return (void*)soap_instantiate_ns1__downLoadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__downLoadFileResponse:
		return (void*)soap_instantiate_ns1__downLoadFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__doesBucketExists:
		return (void*)soap_instantiate_ns1__doesBucketExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		return (void*)soap_instantiate_ns1__doesBucketExistsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteBatchFile:
		return (void*)soap_instantiate_ns1__deleteBatchFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		return (void*)soap_instantiate_ns1__deleteBatchFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__createBucket:
		return (void*)soap_instantiate_ns1__createBucket(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__createBucketResponse:
		return (void*)soap_instantiate_ns1__createBucketResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__doesFileExists:
		return (void*)soap_instantiate_ns1__doesFileExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		return (void*)soap_instantiate_ns1__doesFileExistsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getBucketFileNames:
		return (void*)soap_instantiate_ns1__getBucketFileNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		return (void*)soap_instantiate_ns1__getBucketFileNamesResponse(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns1__deleteFiles:
		return (void*)soap_instantiate___ns1__deleteFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__createBucket:
		return (void*)soap_instantiate___ns1__createBucket(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deleteBucket:
		return (void*)soap_instantiate___ns1__deleteBucket(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__doesBucketExists:
		return (void*)soap_instantiate___ns1__doesBucketExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getBucketNames:
		return (void*)soap_instantiate___ns1__getBucketNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getBucketFileNames:
		return (void*)soap_instantiate___ns1__getBucketFileNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__doesFileExists:
		return (void*)soap_instantiate___ns1__doesFileExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getFileMessage:
		return (void*)soap_instantiate___ns1__getFileMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getFileDetail:
		return (void*)soap_instantiate___ns1__getFileDetail(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deleteOneFile:
		return (void*)soap_instantiate___ns1__deleteOneFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deleteBatchFile:
		return (void*)soap_instantiate___ns1__deleteBatchFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deleteFileByName:
		return (void*)soap_instantiate___ns1__deleteFileByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadFile:
		return (void*)soap_instantiate___ns1__uploadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__downLoadFile:
		return (void*)soap_instantiate___ns1__downLoadFile(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getFileDetail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getFileDetail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getFileDetail*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getFileDetailResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getFileDetailResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getFileDetailResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__Exception:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__Exception*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__Exception*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteFileByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteFileByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteFileByName*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteFileByNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteFileByNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getFileMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getFileMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getFileMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getFileMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getFileMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getFileMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteBucket:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteBucket*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteBucket*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteBucketResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteBucketResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteBucketResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteOneFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteOneFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteOneFile*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteOneFileResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteOneFileResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getBucketNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getBucketNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getBucketNames*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getBucketNamesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getBucketNamesResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__uploadFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__uploadFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__uploadFile*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__uploadFileResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__uploadFileResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__uploadFileResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteFiles:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteFiles*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteFiles*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteFilesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteFilesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteFilesResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__downLoadFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__downLoadFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__downLoadFile*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__downLoadFileResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__downLoadFileResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__downLoadFileResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__doesBucketExists:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__doesBucketExists*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__doesBucketExists*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__doesBucketExistsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__doesBucketExistsResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteBatchFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteBatchFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteBatchFile*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deleteBatchFileResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deleteBatchFileResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__createBucket:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__createBucket*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__createBucket*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__createBucketResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__createBucketResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__createBucketResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__doesFileExists:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__doesFileExists*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__doesFileExists*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__doesFileExistsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__doesFileExistsResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getBucketFileNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getBucketFileNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getBucketFileNames*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__getBucketFileNamesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__getBucketFileNamesResponse*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
	case SOAP_TYPE___ns1__deleteFiles:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deleteFiles*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deleteFiles*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__createBucket:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__createBucket*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__createBucket*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__deleteBucket:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deleteBucket*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deleteBucket*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__doesBucketExists:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__doesBucketExists*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__doesBucketExists*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getBucketNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getBucketNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getBucketNames*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getBucketFileNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getBucketFileNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getBucketFileNames*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__doesFileExists:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__doesFileExists*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__doesFileExists*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getFileMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getFileMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getFileMessage*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getFileDetail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getFileDetail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getFileDetail*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__deleteOneFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deleteOneFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deleteOneFile*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__deleteBatchFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deleteBatchFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deleteBatchFile*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__deleteFileByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deleteFileByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deleteFileByName*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__uploadFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__uploadFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__uploadFile*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__downLoadFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__downLoadFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__downLoadFile*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_ns1__getFileDetail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getFileDetail type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getFileDetail*)p = *(ns1__getFileDetail*)q;
		break;
	case SOAP_TYPE_ns1__getFileDetailResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getFileDetailResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getFileDetailResponse*)p = *(ns1__getFileDetailResponse*)q;
		break;
	case SOAP_TYPE_ns1__Exception:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Exception type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Exception*)p = *(ns1__Exception*)q;
		break;
	case SOAP_TYPE_ns1__deleteFileByName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteFileByName type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteFileByName*)p = *(ns1__deleteFileByName*)q;
		break;
	case SOAP_TYPE_ns1__deleteFileByNameResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteFileByNameResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteFileByNameResponse*)p = *(ns1__deleteFileByNameResponse*)q;
		break;
	case SOAP_TYPE_ns1__getFileMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getFileMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getFileMessage*)p = *(ns1__getFileMessage*)q;
		break;
	case SOAP_TYPE_ns1__getFileMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getFileMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getFileMessageResponse*)p = *(ns1__getFileMessageResponse*)q;
		break;
	case SOAP_TYPE_ns1__deleteBucket:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteBucket type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteBucket*)p = *(ns1__deleteBucket*)q;
		break;
	case SOAP_TYPE_ns1__deleteBucketResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteBucketResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteBucketResponse*)p = *(ns1__deleteBucketResponse*)q;
		break;
	case SOAP_TYPE_ns1__deleteOneFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteOneFile type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteOneFile*)p = *(ns1__deleteOneFile*)q;
		break;
	case SOAP_TYPE_ns1__deleteOneFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteOneFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteOneFileResponse*)p = *(ns1__deleteOneFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__getBucketNames:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getBucketNames type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getBucketNames*)p = *(ns1__getBucketNames*)q;
		break;
	case SOAP_TYPE_ns1__getBucketNamesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getBucketNamesResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getBucketNamesResponse*)p = *(ns1__getBucketNamesResponse*)q;
		break;
	case SOAP_TYPE_ns1__uploadFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__uploadFile type=%d location=%p object=%p\n", t, p, q));
		*(ns1__uploadFile*)p = *(ns1__uploadFile*)q;
		break;
	case SOAP_TYPE_ns1__uploadFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__uploadFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__uploadFileResponse*)p = *(ns1__uploadFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__deleteFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteFiles type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteFiles*)p = *(ns1__deleteFiles*)q;
		break;
	case SOAP_TYPE_ns1__deleteFilesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteFilesResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteFilesResponse*)p = *(ns1__deleteFilesResponse*)q;
		break;
	case SOAP_TYPE_ns1__downLoadFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__downLoadFile type=%d location=%p object=%p\n", t, p, q));
		*(ns1__downLoadFile*)p = *(ns1__downLoadFile*)q;
		break;
	case SOAP_TYPE_ns1__downLoadFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__downLoadFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__downLoadFileResponse*)p = *(ns1__downLoadFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__doesBucketExists:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__doesBucketExists type=%d location=%p object=%p\n", t, p, q));
		*(ns1__doesBucketExists*)p = *(ns1__doesBucketExists*)q;
		break;
	case SOAP_TYPE_ns1__doesBucketExistsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__doesBucketExistsResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__doesBucketExistsResponse*)p = *(ns1__doesBucketExistsResponse*)q;
		break;
	case SOAP_TYPE_ns1__deleteBatchFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteBatchFile type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteBatchFile*)p = *(ns1__deleteBatchFile*)q;
		break;
	case SOAP_TYPE_ns1__deleteBatchFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deleteBatchFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deleteBatchFileResponse*)p = *(ns1__deleteBatchFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__createBucket:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__createBucket type=%d location=%p object=%p\n", t, p, q));
		*(ns1__createBucket*)p = *(ns1__createBucket*)q;
		break;
	case SOAP_TYPE_ns1__createBucketResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__createBucketResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__createBucketResponse*)p = *(ns1__createBucketResponse*)q;
		break;
	case SOAP_TYPE_ns1__doesFileExists:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__doesFileExists type=%d location=%p object=%p\n", t, p, q));
		*(ns1__doesFileExists*)p = *(ns1__doesFileExists*)q;
		break;
	case SOAP_TYPE_ns1__doesFileExistsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__doesFileExistsResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__doesFileExistsResponse*)p = *(ns1__doesFileExistsResponse*)q;
		break;
	case SOAP_TYPE_ns1__getBucketFileNames:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getBucketFileNames type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getBucketFileNames*)p = *(ns1__getBucketFileNames*)q;
		break;
	case SOAP_TYPE_ns1__getBucketFileNamesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getBucketFileNamesResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getBucketFileNamesResponse*)p = *(ns1__getBucketFileNamesResponse*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE___ns1__deleteFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deleteFiles type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deleteFiles*)p = *(struct __ns1__deleteFiles*)q;
		break;
	case SOAP_TYPE___ns1__createBucket:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__createBucket type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__createBucket*)p = *(struct __ns1__createBucket*)q;
		break;
	case SOAP_TYPE___ns1__deleteBucket:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deleteBucket type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deleteBucket*)p = *(struct __ns1__deleteBucket*)q;
		break;
	case SOAP_TYPE___ns1__doesBucketExists:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__doesBucketExists type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__doesBucketExists*)p = *(struct __ns1__doesBucketExists*)q;
		break;
	case SOAP_TYPE___ns1__getBucketNames:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getBucketNames type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getBucketNames*)p = *(struct __ns1__getBucketNames*)q;
		break;
	case SOAP_TYPE___ns1__getBucketFileNames:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getBucketFileNames type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getBucketFileNames*)p = *(struct __ns1__getBucketFileNames*)q;
		break;
	case SOAP_TYPE___ns1__doesFileExists:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__doesFileExists type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__doesFileExists*)p = *(struct __ns1__doesFileExists*)q;
		break;
	case SOAP_TYPE___ns1__getFileMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getFileMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getFileMessage*)p = *(struct __ns1__getFileMessage*)q;
		break;
	case SOAP_TYPE___ns1__getFileDetail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getFileDetail type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getFileDetail*)p = *(struct __ns1__getFileDetail*)q;
		break;
	case SOAP_TYPE___ns1__deleteOneFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deleteOneFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deleteOneFile*)p = *(struct __ns1__deleteOneFile*)q;
		break;
	case SOAP_TYPE___ns1__deleteBatchFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deleteBatchFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deleteBatchFile*)p = *(struct __ns1__deleteBatchFile*)q;
		break;
	case SOAP_TYPE___ns1__deleteFileByName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deleteFileByName type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deleteFileByName*)p = *(struct __ns1__deleteFileByName*)q;
		break;
	case SOAP_TYPE___ns1__uploadFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__uploadFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__uploadFile*)p = *(struct __ns1__uploadFile*)q;
		break;
	case SOAP_TYPE___ns1__downLoadFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__downLoadFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__downLoadFile*)p = *(struct __ns1__downLoadFile*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getBucketFileNamesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getBucketFileNamesResponse::__sizereturn_ = 0;
	this->ns1__getBucketFileNamesResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__getBucketFileNamesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__getBucketFileNamesResponse::return_)
	{	int i;
		for (i = 0; i < (int)this->ns1__getBucketFileNamesResponse::__sizereturn_; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns1__getBucketFileNamesResponse::return_ + i));
		}
	}
#endif
}

int ns1__getBucketFileNamesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getBucketFileNamesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketFileNamesResponse(struct soap *soap, const char *tag, int id, const ns1__getBucketFileNamesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getBucketFileNamesResponse), type))
		return soap->error;
	if (a->ns1__getBucketFileNamesResponse::return_)
	{	int i;
		for (i = 0; i < (int)a->ns1__getBucketFileNamesResponse::__sizereturn_; i++)
			soap_out_string(soap, "return", -1, (char*const*)(a->ns1__getBucketFileNamesResponse::return_ + i), "");
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__getBucketFileNamesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getBucketFileNamesResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getBucketFileNamesResponse * SOAP_FMAC4 soap_in_ns1__getBucketFileNamesResponse(struct soap *soap, const char *tag, ns1__getBucketFileNamesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getBucketFileNamesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getBucketFileNamesResponse, sizeof(ns1__getBucketFileNamesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getBucketFileNamesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getBucketFileNamesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_return_1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "return", 1, NULL))
			{	if (a->ns1__getBucketFileNamesResponse::return_ == NULL)
				{	if (soap_blist_return_1 == NULL)
						soap_blist_return_1 = soap_alloc_block(soap);
					a->ns1__getBucketFileNamesResponse::return_ = (char **)soap_push_block_max(soap, soap_blist_return_1, sizeof(char *));
					if (a->ns1__getBucketFileNamesResponse::return_ == NULL)
						return NULL;
					*a->ns1__getBucketFileNamesResponse::return_ = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "return", (char**)a->ns1__getBucketFileNamesResponse::return_, "xsd:string"))
				{	a->ns1__getBucketFileNamesResponse::__sizereturn_++;
					a->ns1__getBucketFileNamesResponse::return_ = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__getBucketFileNamesResponse::return_)
			soap_pop_block(soap, soap_blist_return_1);
		if (a->ns1__getBucketFileNamesResponse::__sizereturn_)
		{	a->ns1__getBucketFileNamesResponse::return_ = (char **)soap_save_block(soap, soap_blist_return_1, NULL, 1);
		}
		else
		{	a->ns1__getBucketFileNamesResponse::return_ = NULL;
			if (soap_blist_return_1)
				soap_end_block(soap, soap_blist_return_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getBucketFileNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getBucketFileNamesResponse, SOAP_TYPE_ns1__getBucketFileNamesResponse, sizeof(ns1__getBucketFileNamesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getBucketFileNamesResponse * SOAP_FMAC2 soap_instantiate_ns1__getBucketFileNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getBucketFileNamesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getBucketFileNamesResponse *p;
	size_t k = sizeof(ns1__getBucketFileNamesResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getBucketFileNamesResponse);
		if (p)
			((ns1__getBucketFileNamesResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getBucketFileNamesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getBucketFileNamesResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getBucketFileNamesResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getBucketFileNamesResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getBucketFileNamesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getBucketFileNamesResponse(soap, tag ? tag : "ns1:getBucketFileNamesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getBucketFileNamesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getBucketFileNamesResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getBucketFileNamesResponse * SOAP_FMAC4 soap_get_ns1__getBucketFileNamesResponse(struct soap *soap, ns1__getBucketFileNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getBucketFileNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getBucketFileNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getBucketFileNames::arg0);
	/* transient soap skipped */
}

void ns1__getBucketFileNames::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__getBucketFileNames::arg0);
#endif
}

int ns1__getBucketFileNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getBucketFileNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketFileNames(struct soap *soap, const char *tag, int id, const ns1__getBucketFileNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getBucketFileNames), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__getBucketFileNames::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getBucketFileNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getBucketFileNames(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getBucketFileNames * SOAP_FMAC4 soap_in_ns1__getBucketFileNames(struct soap *soap, const char *tag, ns1__getBucketFileNames *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getBucketFileNames *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getBucketFileNames, sizeof(ns1__getBucketFileNames), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getBucketFileNames)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getBucketFileNames *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__getBucketFileNames::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getBucketFileNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getBucketFileNames, SOAP_TYPE_ns1__getBucketFileNames, sizeof(ns1__getBucketFileNames), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getBucketFileNames * SOAP_FMAC2 soap_instantiate_ns1__getBucketFileNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getBucketFileNames(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getBucketFileNames *p;
	size_t k = sizeof(ns1__getBucketFileNames);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getBucketFileNames);
		if (p)
			((ns1__getBucketFileNames*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getBucketFileNames, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getBucketFileNames*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getBucketFileNames location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getBucketFileNames, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getBucketFileNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getBucketFileNames(soap, tag ? tag : "ns1:getBucketFileNames", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getBucketFileNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getBucketFileNames(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getBucketFileNames * SOAP_FMAC4 soap_get_ns1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getBucketFileNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__doesFileExistsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__doesFileExistsResponse::return_);
	/* transient soap skipped */
}

void ns1__doesFileExistsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__doesFileExistsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__doesFileExistsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesFileExistsResponse(struct soap *soap, const char *tag, int id, const ns1__doesFileExistsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__doesFileExistsResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->ns1__doesFileExistsResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__doesFileExistsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__doesFileExistsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__doesFileExistsResponse * SOAP_FMAC4 soap_in_ns1__doesFileExistsResponse(struct soap *soap, const char *tag, ns1__doesFileExistsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__doesFileExistsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__doesFileExistsResponse, sizeof(ns1__doesFileExistsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__doesFileExistsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__doesFileExistsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "return", &a->ns1__doesFileExistsResponse::return_, "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__doesFileExistsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__doesFileExistsResponse, SOAP_TYPE_ns1__doesFileExistsResponse, sizeof(ns1__doesFileExistsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__doesFileExistsResponse * SOAP_FMAC2 soap_instantiate_ns1__doesFileExistsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__doesFileExistsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__doesFileExistsResponse *p;
	size_t k = sizeof(ns1__doesFileExistsResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__doesFileExistsResponse);
		if (p)
			((ns1__doesFileExistsResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__doesFileExistsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__doesFileExistsResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__doesFileExistsResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__doesFileExistsResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__doesFileExistsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__doesFileExistsResponse(soap, tag ? tag : "ns1:doesFileExistsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__doesFileExistsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__doesFileExistsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__doesFileExistsResponse * SOAP_FMAC4 soap_get_ns1__doesFileExistsResponse(struct soap *soap, ns1__doesFileExistsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__doesFileExistsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__doesFileExists::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__doesFileExists::arg0);
	soap_default_string(soap, &this->ns1__doesFileExists::arg1);
	/* transient soap skipped */
}

void ns1__doesFileExists::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__doesFileExists::arg0);
	soap_serialize_string(soap, (char*const*)&this->ns1__doesFileExists::arg1);
#endif
}

int ns1__doesFileExists::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__doesFileExists(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesFileExists(struct soap *soap, const char *tag, int id, const ns1__doesFileExists *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__doesFileExists), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__doesFileExists::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__doesFileExists::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__doesFileExists::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__doesFileExists(soap, tag, this, type);
}

SOAP_FMAC3 ns1__doesFileExists * SOAP_FMAC4 soap_in_ns1__doesFileExists(struct soap *soap, const char *tag, ns1__doesFileExists *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__doesFileExists *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__doesFileExists, sizeof(ns1__doesFileExists), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__doesFileExists)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__doesFileExists *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__doesFileExists::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg1", (char**)&a->ns1__doesFileExists::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__doesFileExists *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__doesFileExists, SOAP_TYPE_ns1__doesFileExists, sizeof(ns1__doesFileExists), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__doesFileExists * SOAP_FMAC2 soap_instantiate_ns1__doesFileExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__doesFileExists(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__doesFileExists *p;
	size_t k = sizeof(ns1__doesFileExists);
	if (n < 0)
	{	p = SOAP_NEW(ns1__doesFileExists);
		if (p)
			((ns1__doesFileExists*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__doesFileExists, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__doesFileExists*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__doesFileExists location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__doesFileExists, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__doesFileExists::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__doesFileExists(soap, tag ? tag : "ns1:doesFileExists", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__doesFileExists::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__doesFileExists(soap, this, tag, type);
}

SOAP_FMAC3 ns1__doesFileExists * SOAP_FMAC4 soap_get_ns1__doesFileExists(struct soap *soap, ns1__doesFileExists *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__doesFileExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__createBucketResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__createBucketResponse::return_);
	/* transient soap skipped */
}

void ns1__createBucketResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__createBucketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__createBucketResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createBucketResponse(struct soap *soap, const char *tag, int id, const ns1__createBucketResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__createBucketResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->ns1__createBucketResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__createBucketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__createBucketResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__createBucketResponse * SOAP_FMAC4 soap_in_ns1__createBucketResponse(struct soap *soap, const char *tag, ns1__createBucketResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__createBucketResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__createBucketResponse, sizeof(ns1__createBucketResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__createBucketResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__createBucketResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "return", &a->ns1__createBucketResponse::return_, "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__createBucketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__createBucketResponse, SOAP_TYPE_ns1__createBucketResponse, sizeof(ns1__createBucketResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__createBucketResponse * SOAP_FMAC2 soap_instantiate_ns1__createBucketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__createBucketResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__createBucketResponse *p;
	size_t k = sizeof(ns1__createBucketResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__createBucketResponse);
		if (p)
			((ns1__createBucketResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__createBucketResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__createBucketResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__createBucketResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__createBucketResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__createBucketResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__createBucketResponse(soap, tag ? tag : "ns1:createBucketResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__createBucketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__createBucketResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__createBucketResponse * SOAP_FMAC4 soap_get_ns1__createBucketResponse(struct soap *soap, ns1__createBucketResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__createBucketResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__createBucket::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__createBucket::arg0);
	/* transient soap skipped */
}

void ns1__createBucket::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__createBucket::arg0);
#endif
}

int ns1__createBucket::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__createBucket(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createBucket(struct soap *soap, const char *tag, int id, const ns1__createBucket *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__createBucket), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__createBucket::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__createBucket::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__createBucket(soap, tag, this, type);
}

SOAP_FMAC3 ns1__createBucket * SOAP_FMAC4 soap_in_ns1__createBucket(struct soap *soap, const char *tag, ns1__createBucket *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__createBucket *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__createBucket, sizeof(ns1__createBucket), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__createBucket)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__createBucket *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__createBucket::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__createBucket *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__createBucket, SOAP_TYPE_ns1__createBucket, sizeof(ns1__createBucket), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__createBucket * SOAP_FMAC2 soap_instantiate_ns1__createBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__createBucket(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__createBucket *p;
	size_t k = sizeof(ns1__createBucket);
	if (n < 0)
	{	p = SOAP_NEW(ns1__createBucket);
		if (p)
			((ns1__createBucket*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__createBucket, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__createBucket*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__createBucket location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__createBucket, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__createBucket::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__createBucket(soap, tag ? tag : "ns1:createBucket", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__createBucket::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__createBucket(soap, this, tag, type);
}

SOAP_FMAC3 ns1__createBucket * SOAP_FMAC4 soap_get_ns1__createBucket(struct soap *soap, ns1__createBucket *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__createBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteBatchFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__deleteBatchFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__deleteBatchFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteBatchFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBatchFileResponse(struct soap *soap, const char *tag, int id, const ns1__deleteBatchFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteBatchFileResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteBatchFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteBatchFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteBatchFileResponse * SOAP_FMAC4 soap_in_ns1__deleteBatchFileResponse(struct soap *soap, const char *tag, ns1__deleteBatchFileResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteBatchFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteBatchFileResponse, sizeof(ns1__deleteBatchFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteBatchFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteBatchFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteBatchFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteBatchFileResponse, SOAP_TYPE_ns1__deleteBatchFileResponse, sizeof(ns1__deleteBatchFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteBatchFileResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteBatchFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteBatchFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteBatchFileResponse *p;
	size_t k = sizeof(ns1__deleteBatchFileResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteBatchFileResponse);
		if (p)
			((ns1__deleteBatchFileResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteBatchFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteBatchFileResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteBatchFileResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteBatchFileResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteBatchFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteBatchFileResponse(soap, tag ? tag : "ns1:deleteBatchFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteBatchFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteBatchFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteBatchFileResponse * SOAP_FMAC4 soap_get_ns1__deleteBatchFileResponse(struct soap *soap, ns1__deleteBatchFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteBatchFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteBatchFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__deleteBatchFile::__sizearg0 = 0;
	this->ns1__deleteBatchFile::arg0 = NULL;
	this->ns1__deleteBatchFile::__sizearg1 = 0;
	this->ns1__deleteBatchFile::arg1 = NULL;
	/* transient soap skipped */
}

void ns1__deleteBatchFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__deleteBatchFile::arg0)
	{	int i;
		for (i = 0; i < (int)this->ns1__deleteBatchFile::__sizearg0; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns1__deleteBatchFile::arg0 + i));
		}
	}
	if (this->ns1__deleteBatchFile::arg1)
	{	int i;
		for (i = 0; i < (int)this->ns1__deleteBatchFile::__sizearg1; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns1__deleteBatchFile::arg1 + i));
		}
	}
#endif
}

int ns1__deleteBatchFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteBatchFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBatchFile(struct soap *soap, const char *tag, int id, const ns1__deleteBatchFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteBatchFile), type))
		return soap->error;
	if (a->ns1__deleteBatchFile::arg0)
	{	int i;
		for (i = 0; i < (int)a->ns1__deleteBatchFile::__sizearg0; i++)
			soap_out_string(soap, "arg0", -1, (char*const*)(a->ns1__deleteBatchFile::arg0 + i), "");
	}
	if (a->ns1__deleteBatchFile::arg1)
	{	int i;
		for (i = 0; i < (int)a->ns1__deleteBatchFile::__sizearg1; i++)
			soap_out_string(soap, "arg1", -1, (char*const*)(a->ns1__deleteBatchFile::arg1 + i), "");
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteBatchFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteBatchFile(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteBatchFile * SOAP_FMAC4 soap_in_ns1__deleteBatchFile(struct soap *soap, const char *tag, ns1__deleteBatchFile *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteBatchFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteBatchFile, sizeof(ns1__deleteBatchFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteBatchFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteBatchFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_arg01 = NULL;
	struct soap_blist *soap_blist_arg11 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arg0", 1, NULL))
			{	if (a->ns1__deleteBatchFile::arg0 == NULL)
				{	if (soap_blist_arg01 == NULL)
						soap_blist_arg01 = soap_alloc_block(soap);
					a->ns1__deleteBatchFile::arg0 = (char **)soap_push_block_max(soap, soap_blist_arg01, sizeof(char *));
					if (a->ns1__deleteBatchFile::arg0 == NULL)
						return NULL;
					*a->ns1__deleteBatchFile::arg0 = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "arg0", (char**)a->ns1__deleteBatchFile::arg0, "xsd:string"))
				{	a->ns1__deleteBatchFile::__sizearg0++;
					a->ns1__deleteBatchFile::arg0 = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arg1", 1, NULL))
			{	if (a->ns1__deleteBatchFile::arg1 == NULL)
				{	if (soap_blist_arg11 == NULL)
						soap_blist_arg11 = soap_alloc_block(soap);
					a->ns1__deleteBatchFile::arg1 = (char **)soap_push_block_max(soap, soap_blist_arg11, sizeof(char *));
					if (a->ns1__deleteBatchFile::arg1 == NULL)
						return NULL;
					*a->ns1__deleteBatchFile::arg1 = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "arg1", (char**)a->ns1__deleteBatchFile::arg1, "xsd:string"))
				{	a->ns1__deleteBatchFile::__sizearg1++;
					a->ns1__deleteBatchFile::arg1 = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__deleteBatchFile::arg0)
			soap_pop_block(soap, soap_blist_arg01);
		if (a->ns1__deleteBatchFile::__sizearg0)
		{	a->ns1__deleteBatchFile::arg0 = (char **)soap_save_block(soap, soap_blist_arg01, NULL, 1);
		}
		else
		{	a->ns1__deleteBatchFile::arg0 = NULL;
			if (soap_blist_arg01)
				soap_end_block(soap, soap_blist_arg01);
		}
		if (a->ns1__deleteBatchFile::arg1)
			soap_pop_block(soap, soap_blist_arg11);
		if (a->ns1__deleteBatchFile::__sizearg1)
		{	a->ns1__deleteBatchFile::arg1 = (char **)soap_save_block(soap, soap_blist_arg11, NULL, 1);
		}
		else
		{	a->ns1__deleteBatchFile::arg1 = NULL;
			if (soap_blist_arg11)
				soap_end_block(soap, soap_blist_arg11);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteBatchFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteBatchFile, SOAP_TYPE_ns1__deleteBatchFile, sizeof(ns1__deleteBatchFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteBatchFile * SOAP_FMAC2 soap_instantiate_ns1__deleteBatchFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteBatchFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteBatchFile *p;
	size_t k = sizeof(ns1__deleteBatchFile);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteBatchFile);
		if (p)
			((ns1__deleteBatchFile*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteBatchFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteBatchFile*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteBatchFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteBatchFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteBatchFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteBatchFile(soap, tag ? tag : "ns1:deleteBatchFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteBatchFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteBatchFile(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteBatchFile * SOAP_FMAC4 soap_get_ns1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteBatchFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__doesBucketExistsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__doesBucketExistsResponse::return_);
	/* transient soap skipped */
}

void ns1__doesBucketExistsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__doesBucketExistsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__doesBucketExistsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesBucketExistsResponse(struct soap *soap, const char *tag, int id, const ns1__doesBucketExistsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__doesBucketExistsResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->ns1__doesBucketExistsResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__doesBucketExistsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__doesBucketExistsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__doesBucketExistsResponse * SOAP_FMAC4 soap_in_ns1__doesBucketExistsResponse(struct soap *soap, const char *tag, ns1__doesBucketExistsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__doesBucketExistsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__doesBucketExistsResponse, sizeof(ns1__doesBucketExistsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__doesBucketExistsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__doesBucketExistsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "return", &a->ns1__doesBucketExistsResponse::return_, "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__doesBucketExistsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__doesBucketExistsResponse, SOAP_TYPE_ns1__doesBucketExistsResponse, sizeof(ns1__doesBucketExistsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__doesBucketExistsResponse * SOAP_FMAC2 soap_instantiate_ns1__doesBucketExistsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__doesBucketExistsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__doesBucketExistsResponse *p;
	size_t k = sizeof(ns1__doesBucketExistsResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__doesBucketExistsResponse);
		if (p)
			((ns1__doesBucketExistsResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__doesBucketExistsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__doesBucketExistsResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__doesBucketExistsResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__doesBucketExistsResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__doesBucketExistsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__doesBucketExistsResponse(soap, tag ? tag : "ns1:doesBucketExistsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__doesBucketExistsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__doesBucketExistsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__doesBucketExistsResponse * SOAP_FMAC4 soap_get_ns1__doesBucketExistsResponse(struct soap *soap, ns1__doesBucketExistsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__doesBucketExistsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__doesBucketExists::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__doesBucketExists::arg0);
	/* transient soap skipped */
}

void ns1__doesBucketExists::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__doesBucketExists::arg0);
#endif
}

int ns1__doesBucketExists::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__doesBucketExists(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesBucketExists(struct soap *soap, const char *tag, int id, const ns1__doesBucketExists *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__doesBucketExists), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__doesBucketExists::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__doesBucketExists::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__doesBucketExists(soap, tag, this, type);
}

SOAP_FMAC3 ns1__doesBucketExists * SOAP_FMAC4 soap_in_ns1__doesBucketExists(struct soap *soap, const char *tag, ns1__doesBucketExists *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__doesBucketExists *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__doesBucketExists, sizeof(ns1__doesBucketExists), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__doesBucketExists)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__doesBucketExists *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__doesBucketExists::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__doesBucketExists *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__doesBucketExists, SOAP_TYPE_ns1__doesBucketExists, sizeof(ns1__doesBucketExists), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__doesBucketExists * SOAP_FMAC2 soap_instantiate_ns1__doesBucketExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__doesBucketExists(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__doesBucketExists *p;
	size_t k = sizeof(ns1__doesBucketExists);
	if (n < 0)
	{	p = SOAP_NEW(ns1__doesBucketExists);
		if (p)
			((ns1__doesBucketExists*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__doesBucketExists, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__doesBucketExists*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__doesBucketExists location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__doesBucketExists, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__doesBucketExists::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__doesBucketExists(soap, tag ? tag : "ns1:doesBucketExists", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__doesBucketExists::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__doesBucketExists(soap, this, tag, type);
}

SOAP_FMAC3 ns1__doesBucketExists * SOAP_FMAC4 soap_get_ns1__doesBucketExists(struct soap *soap, ns1__doesBucketExists *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__doesBucketExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__downLoadFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__downLoadFileResponse::return_);
	/* transient soap skipped */
}

void ns1__downLoadFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__downLoadFileResponse::return_);
#endif
}

int ns1__downLoadFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__downLoadFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downLoadFileResponse(struct soap *soap, const char *tag, int id, const ns1__downLoadFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__downLoadFileResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__downLoadFileResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__downLoadFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__downLoadFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__downLoadFileResponse * SOAP_FMAC4 soap_in_ns1__downLoadFileResponse(struct soap *soap, const char *tag, ns1__downLoadFileResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__downLoadFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__downLoadFileResponse, sizeof(ns1__downLoadFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__downLoadFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__downLoadFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "return", (char**)&a->ns1__downLoadFileResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__downLoadFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__downLoadFileResponse, SOAP_TYPE_ns1__downLoadFileResponse, sizeof(ns1__downLoadFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__downLoadFileResponse * SOAP_FMAC2 soap_instantiate_ns1__downLoadFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__downLoadFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__downLoadFileResponse *p;
	size_t k = sizeof(ns1__downLoadFileResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__downLoadFileResponse);
		if (p)
			((ns1__downLoadFileResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__downLoadFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__downLoadFileResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__downLoadFileResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__downLoadFileResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__downLoadFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__downLoadFileResponse(soap, tag ? tag : "ns1:downLoadFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__downLoadFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__downLoadFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__downLoadFileResponse * SOAP_FMAC4 soap_get_ns1__downLoadFileResponse(struct soap *soap, ns1__downLoadFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__downLoadFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__downLoadFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__downLoadFile::arg0);
	soap_default_string(soap, &this->ns1__downLoadFile::arg1);
	/* transient soap skipped */
}

void ns1__downLoadFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__downLoadFile::arg0);
	soap_serialize_string(soap, (char*const*)&this->ns1__downLoadFile::arg1);
#endif
}

int ns1__downLoadFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__downLoadFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downLoadFile(struct soap *soap, const char *tag, int id, const ns1__downLoadFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__downLoadFile), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__downLoadFile::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__downLoadFile::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__downLoadFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__downLoadFile(soap, tag, this, type);
}

SOAP_FMAC3 ns1__downLoadFile * SOAP_FMAC4 soap_in_ns1__downLoadFile(struct soap *soap, const char *tag, ns1__downLoadFile *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__downLoadFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__downLoadFile, sizeof(ns1__downLoadFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__downLoadFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__downLoadFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__downLoadFile::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg1", (char**)&a->ns1__downLoadFile::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__downLoadFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__downLoadFile, SOAP_TYPE_ns1__downLoadFile, sizeof(ns1__downLoadFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__downLoadFile * SOAP_FMAC2 soap_instantiate_ns1__downLoadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__downLoadFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__downLoadFile *p;
	size_t k = sizeof(ns1__downLoadFile);
	if (n < 0)
	{	p = SOAP_NEW(ns1__downLoadFile);
		if (p)
			((ns1__downLoadFile*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__downLoadFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__downLoadFile*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__downLoadFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__downLoadFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__downLoadFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__downLoadFile(soap, tag ? tag : "ns1:downLoadFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__downLoadFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__downLoadFile(soap, this, tag, type);
}

SOAP_FMAC3 ns1__downLoadFile * SOAP_FMAC4 soap_get_ns1__downLoadFile(struct soap *soap, ns1__downLoadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__downLoadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteFilesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__deleteFilesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__deleteFilesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteFilesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFilesResponse(struct soap *soap, const char *tag, int id, const ns1__deleteFilesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteFilesResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteFilesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteFilesResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteFilesResponse * SOAP_FMAC4 soap_in_ns1__deleteFilesResponse(struct soap *soap, const char *tag, ns1__deleteFilesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteFilesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteFilesResponse, sizeof(ns1__deleteFilesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteFilesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteFilesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteFilesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteFilesResponse, SOAP_TYPE_ns1__deleteFilesResponse, sizeof(ns1__deleteFilesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteFilesResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFilesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteFilesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteFilesResponse *p;
	size_t k = sizeof(ns1__deleteFilesResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteFilesResponse);
		if (p)
			((ns1__deleteFilesResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteFilesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteFilesResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteFilesResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteFilesResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteFilesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteFilesResponse(soap, tag ? tag : "ns1:deleteFilesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteFilesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteFilesResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteFilesResponse * SOAP_FMAC4 soap_get_ns1__deleteFilesResponse(struct soap *soap, ns1__deleteFilesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteFilesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteFiles::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__deleteFiles::arg0);
	this->ns1__deleteFiles::__sizearg1 = 0;
	this->ns1__deleteFiles::arg1 = NULL;
	/* transient soap skipped */
}

void ns1__deleteFiles::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__deleteFiles::arg0);
	if (this->ns1__deleteFiles::arg1)
	{	int i;
		for (i = 0; i < (int)this->ns1__deleteFiles::__sizearg1; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns1__deleteFiles::arg1 + i));
		}
	}
#endif
}

int ns1__deleteFiles::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteFiles(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFiles(struct soap *soap, const char *tag, int id, const ns1__deleteFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteFiles), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__deleteFiles::arg0, ""))
		return soap->error;
	if (a->ns1__deleteFiles::arg1)
	{	int i;
		for (i = 0; i < (int)a->ns1__deleteFiles::__sizearg1; i++)
			soap_out_string(soap, "arg1", -1, (char*const*)(a->ns1__deleteFiles::arg1 + i), "");
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteFiles::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteFiles(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteFiles * SOAP_FMAC4 soap_in_ns1__deleteFiles(struct soap *soap, const char *tag, ns1__deleteFiles *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteFiles *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteFiles, sizeof(ns1__deleteFiles), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteFiles)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteFiles *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	struct soap_blist *soap_blist_arg11 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__deleteFiles::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arg1", 1, NULL))
			{	if (a->ns1__deleteFiles::arg1 == NULL)
				{	if (soap_blist_arg11 == NULL)
						soap_blist_arg11 = soap_alloc_block(soap);
					a->ns1__deleteFiles::arg1 = (char **)soap_push_block_max(soap, soap_blist_arg11, sizeof(char *));
					if (a->ns1__deleteFiles::arg1 == NULL)
						return NULL;
					*a->ns1__deleteFiles::arg1 = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "arg1", (char**)a->ns1__deleteFiles::arg1, "xsd:string"))
				{	a->ns1__deleteFiles::__sizearg1++;
					a->ns1__deleteFiles::arg1 = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__deleteFiles::arg1)
			soap_pop_block(soap, soap_blist_arg11);
		if (a->ns1__deleteFiles::__sizearg1)
		{	a->ns1__deleteFiles::arg1 = (char **)soap_save_block(soap, soap_blist_arg11, NULL, 1);
		}
		else
		{	a->ns1__deleteFiles::arg1 = NULL;
			if (soap_blist_arg11)
				soap_end_block(soap, soap_blist_arg11);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteFiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteFiles, SOAP_TYPE_ns1__deleteFiles, sizeof(ns1__deleteFiles), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteFiles * SOAP_FMAC2 soap_instantiate_ns1__deleteFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteFiles(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteFiles *p;
	size_t k = sizeof(ns1__deleteFiles);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteFiles);
		if (p)
			((ns1__deleteFiles*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteFiles, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteFiles*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteFiles location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteFiles, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteFiles::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteFiles(soap, tag ? tag : "ns1:deleteFiles", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteFiles::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteFiles(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteFiles * SOAP_FMAC4 soap_get_ns1__deleteFiles(struct soap *soap, ns1__deleteFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__uploadFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__uploadFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__uploadFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__uploadFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__uploadFileResponse(struct soap *soap, const char *tag, int id, const ns1__uploadFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__uploadFileResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__uploadFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__uploadFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__uploadFileResponse * SOAP_FMAC4 soap_in_ns1__uploadFileResponse(struct soap *soap, const char *tag, ns1__uploadFileResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__uploadFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__uploadFileResponse, sizeof(ns1__uploadFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__uploadFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__uploadFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__uploadFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__uploadFileResponse, SOAP_TYPE_ns1__uploadFileResponse, sizeof(ns1__uploadFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__uploadFileResponse * SOAP_FMAC2 soap_instantiate_ns1__uploadFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__uploadFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__uploadFileResponse *p;
	size_t k = sizeof(ns1__uploadFileResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__uploadFileResponse);
		if (p)
			((ns1__uploadFileResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__uploadFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__uploadFileResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__uploadFileResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__uploadFileResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__uploadFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__uploadFileResponse(soap, tag ? tag : "ns1:uploadFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__uploadFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__uploadFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__uploadFileResponse * SOAP_FMAC4 soap_get_ns1__uploadFileResponse(struct soap *soap, ns1__uploadFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__uploadFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__uploadFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__uploadFile::arg0);
	soap_default_string(soap, &this->ns1__uploadFile::arg1);
	this->ns1__uploadFile::arg2 = NULL;
	/* transient soap skipped */
}

void ns1__uploadFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__uploadFile::arg0);
	soap_serialize_string(soap, (char*const*)&this->ns1__uploadFile::arg1);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__uploadFile::arg2);
#endif
}

int ns1__uploadFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__uploadFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__uploadFile(struct soap *soap, const char *tag, int id, const ns1__uploadFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__uploadFile), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__uploadFile::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__uploadFile::arg1, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "arg2", -1, &a->ns1__uploadFile::arg2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__uploadFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__uploadFile(soap, tag, this, type);
}

SOAP_FMAC3 ns1__uploadFile * SOAP_FMAC4 soap_in_ns1__uploadFile(struct soap *soap, const char *tag, ns1__uploadFile *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__uploadFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__uploadFile, sizeof(ns1__uploadFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__uploadFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__uploadFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	size_t soap_flag_arg21 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__uploadFile::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg1", (char**)&a->ns1__uploadFile::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap_flag_arg21 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "arg2", &a->ns1__uploadFile::arg2, "xsd:base64Binary"))
				{	soap_flag_arg21--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__uploadFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__uploadFile, SOAP_TYPE_ns1__uploadFile, sizeof(ns1__uploadFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__uploadFile * SOAP_FMAC2 soap_instantiate_ns1__uploadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__uploadFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__uploadFile *p;
	size_t k = sizeof(ns1__uploadFile);
	if (n < 0)
	{	p = SOAP_NEW(ns1__uploadFile);
		if (p)
			((ns1__uploadFile*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__uploadFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__uploadFile*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__uploadFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__uploadFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__uploadFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__uploadFile(soap, tag ? tag : "ns1:uploadFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__uploadFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__uploadFile(soap, this, tag, type);
}

SOAP_FMAC3 ns1__uploadFile * SOAP_FMAC4 soap_get_ns1__uploadFile(struct soap *soap, ns1__uploadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__uploadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getBucketNamesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getBucketNamesResponse::__sizereturn_ = 0;
	this->ns1__getBucketNamesResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__getBucketNamesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__getBucketNamesResponse::return_)
	{	int i;
		for (i = 0; i < (int)this->ns1__getBucketNamesResponse::__sizereturn_; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns1__getBucketNamesResponse::return_ + i));
		}
	}
#endif
}

int ns1__getBucketNamesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getBucketNamesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketNamesResponse(struct soap *soap, const char *tag, int id, const ns1__getBucketNamesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getBucketNamesResponse), type))
		return soap->error;
	if (a->ns1__getBucketNamesResponse::return_)
	{	int i;
		for (i = 0; i < (int)a->ns1__getBucketNamesResponse::__sizereturn_; i++)
			soap_out_string(soap, "return", -1, (char*const*)(a->ns1__getBucketNamesResponse::return_ + i), "");
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__getBucketNamesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getBucketNamesResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getBucketNamesResponse * SOAP_FMAC4 soap_in_ns1__getBucketNamesResponse(struct soap *soap, const char *tag, ns1__getBucketNamesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getBucketNamesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getBucketNamesResponse, sizeof(ns1__getBucketNamesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getBucketNamesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getBucketNamesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_return_1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "return", 1, NULL))
			{	if (a->ns1__getBucketNamesResponse::return_ == NULL)
				{	if (soap_blist_return_1 == NULL)
						soap_blist_return_1 = soap_alloc_block(soap);
					a->ns1__getBucketNamesResponse::return_ = (char **)soap_push_block_max(soap, soap_blist_return_1, sizeof(char *));
					if (a->ns1__getBucketNamesResponse::return_ == NULL)
						return NULL;
					*a->ns1__getBucketNamesResponse::return_ = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "return", (char**)a->ns1__getBucketNamesResponse::return_, "xsd:string"))
				{	a->ns1__getBucketNamesResponse::__sizereturn_++;
					a->ns1__getBucketNamesResponse::return_ = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__getBucketNamesResponse::return_)
			soap_pop_block(soap, soap_blist_return_1);
		if (a->ns1__getBucketNamesResponse::__sizereturn_)
		{	a->ns1__getBucketNamesResponse::return_ = (char **)soap_save_block(soap, soap_blist_return_1, NULL, 1);
		}
		else
		{	a->ns1__getBucketNamesResponse::return_ = NULL;
			if (soap_blist_return_1)
				soap_end_block(soap, soap_blist_return_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getBucketNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getBucketNamesResponse, SOAP_TYPE_ns1__getBucketNamesResponse, sizeof(ns1__getBucketNamesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getBucketNamesResponse * SOAP_FMAC2 soap_instantiate_ns1__getBucketNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getBucketNamesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getBucketNamesResponse *p;
	size_t k = sizeof(ns1__getBucketNamesResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getBucketNamesResponse);
		if (p)
			((ns1__getBucketNamesResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getBucketNamesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getBucketNamesResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getBucketNamesResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getBucketNamesResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getBucketNamesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getBucketNamesResponse(soap, tag ? tag : "ns1:getBucketNamesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getBucketNamesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getBucketNamesResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getBucketNamesResponse * SOAP_FMAC4 soap_get_ns1__getBucketNamesResponse(struct soap *soap, ns1__getBucketNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getBucketNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getBucketNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__getBucketNames::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__getBucketNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getBucketNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketNames(struct soap *soap, const char *tag, int id, const ns1__getBucketNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getBucketNames), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getBucketNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getBucketNames(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getBucketNames * SOAP_FMAC4 soap_in_ns1__getBucketNames(struct soap *soap, const char *tag, ns1__getBucketNames *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getBucketNames *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getBucketNames, sizeof(ns1__getBucketNames), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getBucketNames)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getBucketNames *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getBucketNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getBucketNames, SOAP_TYPE_ns1__getBucketNames, sizeof(ns1__getBucketNames), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getBucketNames * SOAP_FMAC2 soap_instantiate_ns1__getBucketNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getBucketNames(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getBucketNames *p;
	size_t k = sizeof(ns1__getBucketNames);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getBucketNames);
		if (p)
			((ns1__getBucketNames*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getBucketNames, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getBucketNames*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getBucketNames location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getBucketNames, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getBucketNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getBucketNames(soap, tag ? tag : "ns1:getBucketNames", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getBucketNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getBucketNames(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getBucketNames * SOAP_FMAC4 soap_get_ns1__getBucketNames(struct soap *soap, ns1__getBucketNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getBucketNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteOneFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__deleteOneFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__deleteOneFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteOneFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteOneFileResponse(struct soap *soap, const char *tag, int id, const ns1__deleteOneFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteOneFileResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteOneFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteOneFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteOneFileResponse * SOAP_FMAC4 soap_in_ns1__deleteOneFileResponse(struct soap *soap, const char *tag, ns1__deleteOneFileResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteOneFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteOneFileResponse, sizeof(ns1__deleteOneFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteOneFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteOneFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteOneFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteOneFileResponse, SOAP_TYPE_ns1__deleteOneFileResponse, sizeof(ns1__deleteOneFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteOneFileResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteOneFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteOneFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteOneFileResponse *p;
	size_t k = sizeof(ns1__deleteOneFileResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteOneFileResponse);
		if (p)
			((ns1__deleteOneFileResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteOneFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteOneFileResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteOneFileResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteOneFileResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteOneFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteOneFileResponse(soap, tag ? tag : "ns1:deleteOneFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteOneFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteOneFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteOneFileResponse * SOAP_FMAC4 soap_get_ns1__deleteOneFileResponse(struct soap *soap, ns1__deleteOneFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteOneFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteOneFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__deleteOneFile::arg0);
	soap_default_string(soap, &this->ns1__deleteOneFile::arg1);
	/* transient soap skipped */
}

void ns1__deleteOneFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__deleteOneFile::arg0);
	soap_serialize_string(soap, (char*const*)&this->ns1__deleteOneFile::arg1);
#endif
}

int ns1__deleteOneFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteOneFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteOneFile(struct soap *soap, const char *tag, int id, const ns1__deleteOneFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteOneFile), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__deleteOneFile::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__deleteOneFile::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteOneFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteOneFile(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteOneFile * SOAP_FMAC4 soap_in_ns1__deleteOneFile(struct soap *soap, const char *tag, ns1__deleteOneFile *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteOneFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteOneFile, sizeof(ns1__deleteOneFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteOneFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteOneFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__deleteOneFile::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg1", (char**)&a->ns1__deleteOneFile::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteOneFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteOneFile, SOAP_TYPE_ns1__deleteOneFile, sizeof(ns1__deleteOneFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteOneFile * SOAP_FMAC2 soap_instantiate_ns1__deleteOneFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteOneFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteOneFile *p;
	size_t k = sizeof(ns1__deleteOneFile);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteOneFile);
		if (p)
			((ns1__deleteOneFile*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteOneFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteOneFile*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteOneFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteOneFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteOneFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteOneFile(soap, tag ? tag : "ns1:deleteOneFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteOneFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteOneFile(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteOneFile * SOAP_FMAC4 soap_get_ns1__deleteOneFile(struct soap *soap, ns1__deleteOneFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteOneFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteBucketResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__deleteBucketResponse::return_);
	/* transient soap skipped */
}

void ns1__deleteBucketResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__deleteBucketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteBucketResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBucketResponse(struct soap *soap, const char *tag, int id, const ns1__deleteBucketResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteBucketResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->ns1__deleteBucketResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteBucketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteBucketResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteBucketResponse * SOAP_FMAC4 soap_in_ns1__deleteBucketResponse(struct soap *soap, const char *tag, ns1__deleteBucketResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteBucketResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteBucketResponse, sizeof(ns1__deleteBucketResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteBucketResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteBucketResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "return", &a->ns1__deleteBucketResponse::return_, "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__deleteBucketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteBucketResponse, SOAP_TYPE_ns1__deleteBucketResponse, sizeof(ns1__deleteBucketResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteBucketResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteBucketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteBucketResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteBucketResponse *p;
	size_t k = sizeof(ns1__deleteBucketResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteBucketResponse);
		if (p)
			((ns1__deleteBucketResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteBucketResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteBucketResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteBucketResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteBucketResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteBucketResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteBucketResponse(soap, tag ? tag : "ns1:deleteBucketResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteBucketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteBucketResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteBucketResponse * SOAP_FMAC4 soap_get_ns1__deleteBucketResponse(struct soap *soap, ns1__deleteBucketResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteBucketResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteBucket::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__deleteBucket::arg0);
	/* transient soap skipped */
}

void ns1__deleteBucket::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__deleteBucket::arg0);
#endif
}

int ns1__deleteBucket::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteBucket(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBucket(struct soap *soap, const char *tag, int id, const ns1__deleteBucket *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteBucket), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__deleteBucket::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteBucket::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteBucket(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteBucket * SOAP_FMAC4 soap_in_ns1__deleteBucket(struct soap *soap, const char *tag, ns1__deleteBucket *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteBucket *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteBucket, sizeof(ns1__deleteBucket), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteBucket)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteBucket *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__deleteBucket::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteBucket *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteBucket, SOAP_TYPE_ns1__deleteBucket, sizeof(ns1__deleteBucket), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteBucket * SOAP_FMAC2 soap_instantiate_ns1__deleteBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteBucket(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteBucket *p;
	size_t k = sizeof(ns1__deleteBucket);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteBucket);
		if (p)
			((ns1__deleteBucket*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteBucket, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteBucket*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteBucket location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteBucket, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteBucket::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteBucket(soap, tag ? tag : "ns1:deleteBucket", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteBucket::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteBucket(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteBucket * SOAP_FMAC4 soap_get_ns1__deleteBucket(struct soap *soap, ns1__deleteBucket *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getFileMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getFileMessageResponse::return_);
	/* transient soap skipped */
}

void ns1__getFileMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__getFileMessageResponse::return_);
#endif
}

int ns1__getFileMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getFileMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileMessageResponse(struct soap *soap, const char *tag, int id, const ns1__getFileMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFileMessageResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__getFileMessageResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getFileMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getFileMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getFileMessageResponse * SOAP_FMAC4 soap_in_ns1__getFileMessageResponse(struct soap *soap, const char *tag, ns1__getFileMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getFileMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFileMessageResponse, sizeof(ns1__getFileMessageResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getFileMessageResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getFileMessageResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "return", (char**)&a->ns1__getFileMessageResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getFileMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFileMessageResponse, SOAP_TYPE_ns1__getFileMessageResponse, sizeof(ns1__getFileMessageResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getFileMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__getFileMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFileMessageResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getFileMessageResponse *p;
	size_t k = sizeof(ns1__getFileMessageResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getFileMessageResponse);
		if (p)
			((ns1__getFileMessageResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getFileMessageResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getFileMessageResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getFileMessageResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getFileMessageResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getFileMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getFileMessageResponse(soap, tag ? tag : "ns1:getFileMessageResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getFileMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getFileMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getFileMessageResponse * SOAP_FMAC4 soap_get_ns1__getFileMessageResponse(struct soap *soap, ns1__getFileMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFileMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getFileMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getFileMessage::arg0);
	soap_default_string(soap, &this->ns1__getFileMessage::arg1);
	/* transient soap skipped */
}

void ns1__getFileMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__getFileMessage::arg0);
	soap_serialize_string(soap, (char*const*)&this->ns1__getFileMessage::arg1);
#endif
}

int ns1__getFileMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getFileMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileMessage(struct soap *soap, const char *tag, int id, const ns1__getFileMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFileMessage), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__getFileMessage::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__getFileMessage::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getFileMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getFileMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getFileMessage * SOAP_FMAC4 soap_in_ns1__getFileMessage(struct soap *soap, const char *tag, ns1__getFileMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getFileMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFileMessage, sizeof(ns1__getFileMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getFileMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getFileMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__getFileMessage::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg1", (char**)&a->ns1__getFileMessage::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getFileMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFileMessage, SOAP_TYPE_ns1__getFileMessage, sizeof(ns1__getFileMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getFileMessage * SOAP_FMAC2 soap_instantiate_ns1__getFileMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFileMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getFileMessage *p;
	size_t k = sizeof(ns1__getFileMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getFileMessage);
		if (p)
			((ns1__getFileMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getFileMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getFileMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getFileMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getFileMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getFileMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getFileMessage(soap, tag ? tag : "ns1:getFileMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getFileMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getFileMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getFileMessage * SOAP_FMAC4 soap_get_ns1__getFileMessage(struct soap *soap, ns1__getFileMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFileMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteFileByNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__deleteFileByNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__deleteFileByNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteFileByNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFileByNameResponse(struct soap *soap, const char *tag, int id, const ns1__deleteFileByNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteFileByNameResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteFileByNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteFileByNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteFileByNameResponse * SOAP_FMAC4 soap_in_ns1__deleteFileByNameResponse(struct soap *soap, const char *tag, ns1__deleteFileByNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteFileByNameResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteFileByNameResponse, sizeof(ns1__deleteFileByNameResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteFileByNameResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteFileByNameResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteFileByNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteFileByNameResponse, SOAP_TYPE_ns1__deleteFileByNameResponse, sizeof(ns1__deleteFileByNameResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteFileByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFileByNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteFileByNameResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteFileByNameResponse *p;
	size_t k = sizeof(ns1__deleteFileByNameResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteFileByNameResponse);
		if (p)
			((ns1__deleteFileByNameResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteFileByNameResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteFileByNameResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteFileByNameResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteFileByNameResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteFileByNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteFileByNameResponse(soap, tag ? tag : "ns1:deleteFileByNameResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteFileByNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteFileByNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteFileByNameResponse * SOAP_FMAC4 soap_get_ns1__deleteFileByNameResponse(struct soap *soap, ns1__deleteFileByNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteFileByNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deleteFileByName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__deleteFileByName::arg0);
	/* transient soap skipped */
}

void ns1__deleteFileByName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__deleteFileByName::arg0);
#endif
}

int ns1__deleteFileByName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deleteFileByName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFileByName(struct soap *soap, const char *tag, int id, const ns1__deleteFileByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteFileByName), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__deleteFileByName::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deleteFileByName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deleteFileByName(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deleteFileByName * SOAP_FMAC4 soap_in_ns1__deleteFileByName(struct soap *soap, const char *tag, ns1__deleteFileByName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deleteFileByName *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteFileByName, sizeof(ns1__deleteFileByName), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deleteFileByName)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deleteFileByName *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__deleteFileByName::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deleteFileByName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteFileByName, SOAP_TYPE_ns1__deleteFileByName, sizeof(ns1__deleteFileByName), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deleteFileByName * SOAP_FMAC2 soap_instantiate_ns1__deleteFileByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteFileByName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deleteFileByName *p;
	size_t k = sizeof(ns1__deleteFileByName);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deleteFileByName);
		if (p)
			((ns1__deleteFileByName*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deleteFileByName, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deleteFileByName*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deleteFileByName location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteFileByName, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deleteFileByName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deleteFileByName(soap, tag ? tag : "ns1:deleteFileByName", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deleteFileByName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deleteFileByName(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deleteFileByName * SOAP_FMAC4 soap_get_ns1__deleteFileByName(struct soap *soap, ns1__deleteFileByName *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteFileByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Exception::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__Exception::message);
	/* transient soap skipped */
}

void ns1__Exception::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__Exception::message);
#endif
}

int ns1__Exception::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Exception(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Exception(struct soap *soap, const char *tag, int id, const ns1__Exception *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Exception), type))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns1__Exception::message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Exception::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Exception(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_in_ns1__Exception(struct soap *soap, const char *tag, ns1__Exception *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Exception *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Exception, sizeof(ns1__Exception), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Exception)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Exception *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_message1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns1__Exception::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Exception *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Exception, SOAP_TYPE_ns1__Exception, sizeof(ns1__Exception), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Exception * SOAP_FMAC2 soap_instantiate_ns1__Exception(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Exception(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Exception *p;
	size_t k = sizeof(ns1__Exception);
	if (n < 0)
	{	p = SOAP_NEW(ns1__Exception);
		if (p)
			((ns1__Exception*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__Exception, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__Exception*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Exception location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__Exception, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__Exception::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Exception(soap, tag ? tag : "ns1:Exception", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Exception::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Exception(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_get_ns1__Exception(struct soap *soap, ns1__Exception *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getFileDetailResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getFileDetailResponse::return_);
	/* transient soap skipped */
}

void ns1__getFileDetailResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__getFileDetailResponse::return_);
#endif
}

int ns1__getFileDetailResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getFileDetailResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileDetailResponse(struct soap *soap, const char *tag, int id, const ns1__getFileDetailResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFileDetailResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__getFileDetailResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getFileDetailResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getFileDetailResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getFileDetailResponse * SOAP_FMAC4 soap_in_ns1__getFileDetailResponse(struct soap *soap, const char *tag, ns1__getFileDetailResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getFileDetailResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFileDetailResponse, sizeof(ns1__getFileDetailResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getFileDetailResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getFileDetailResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "return", (char**)&a->ns1__getFileDetailResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getFileDetailResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFileDetailResponse, SOAP_TYPE_ns1__getFileDetailResponse, sizeof(ns1__getFileDetailResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getFileDetailResponse * SOAP_FMAC2 soap_instantiate_ns1__getFileDetailResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFileDetailResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getFileDetailResponse *p;
	size_t k = sizeof(ns1__getFileDetailResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getFileDetailResponse);
		if (p)
			((ns1__getFileDetailResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getFileDetailResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getFileDetailResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getFileDetailResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getFileDetailResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getFileDetailResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getFileDetailResponse(soap, tag ? tag : "ns1:getFileDetailResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getFileDetailResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getFileDetailResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getFileDetailResponse * SOAP_FMAC4 soap_get_ns1__getFileDetailResponse(struct soap *soap, ns1__getFileDetailResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFileDetailResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getFileDetail::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getFileDetail::arg0);
	/* transient soap skipped */
}

void ns1__getFileDetail::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__getFileDetail::arg0);
#endif
}

int ns1__getFileDetail::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getFileDetail(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileDetail(struct soap *soap, const char *tag, int id, const ns1__getFileDetail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFileDetail), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, (char*const*)&a->ns1__getFileDetail::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getFileDetail::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getFileDetail(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getFileDetail * SOAP_FMAC4 soap_in_ns1__getFileDetail(struct soap *soap, const char *tag, ns1__getFileDetail *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getFileDetail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFileDetail, sizeof(ns1__getFileDetail), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getFileDetail)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getFileDetail *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "arg0", (char**)&a->ns1__getFileDetail::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getFileDetail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFileDetail, SOAP_TYPE_ns1__getFileDetail, sizeof(ns1__getFileDetail), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getFileDetail * SOAP_FMAC2 soap_instantiate_ns1__getFileDetail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFileDetail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getFileDetail *p;
	size_t k = sizeof(ns1__getFileDetail);
	if (n < 0)
	{	p = SOAP_NEW(ns1__getFileDetail);
		if (p)
			((ns1__getFileDetail*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__getFileDetail, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__getFileDetail*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getFileDetail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getFileDetail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__getFileDetail::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getFileDetail(soap, tag ? tag : "ns1:getFileDetail", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getFileDetail::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getFileDetail(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getFileDetail * SOAP_FMAC4 soap_get_ns1__getFileDetail(struct soap *soap, ns1__getFileDetail *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFileDetail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	if (n < 0)
	{	p = SOAP_NEW(xsd__base64Binary);
		if (p)
			((xsd__base64Binary*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__base64Binary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__downLoadFile(struct soap *soap, struct __ns1__downLoadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__downLoadFile_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__downLoadFile(struct soap *soap, const struct __ns1__downLoadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__downLoadFile(soap, &a->ns1__downLoadFile_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__downLoadFile(struct soap *soap, const char *tag, int id, const struct __ns1__downLoadFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__downLoadFile(soap, "ns1:downLoadFile", -1, &a->ns1__downLoadFile_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downLoadFile * SOAP_FMAC4 soap_in___ns1__downLoadFile(struct soap *soap, const char *tag, struct __ns1__downLoadFile *a, const char *type)
{
	size_t soap_flag_ns1__downLoadFile_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__downLoadFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__downLoadFile, sizeof(struct __ns1__downLoadFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__downLoadFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__downLoadFile_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__downLoadFile(soap, "ns1:downLoadFile", &a->ns1__downLoadFile_, "ns1:downLoadFile"))
				{	soap_flag_ns1__downLoadFile_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__downLoadFile * SOAP_FMAC2 soap_instantiate___ns1__downLoadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__downLoadFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__downLoadFile *p;
	size_t k = sizeof(struct __ns1__downLoadFile);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__downLoadFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__downLoadFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__downLoadFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__downLoadFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__downLoadFile(struct soap *soap, const struct __ns1__downLoadFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__downLoadFile(soap, tag ? tag : "-ns1:downLoadFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downLoadFile * SOAP_FMAC4 soap_get___ns1__downLoadFile(struct soap *soap, struct __ns1__downLoadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__downLoadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadFile(struct soap *soap, struct __ns1__uploadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadFile_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadFile(struct soap *soap, const struct __ns1__uploadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__uploadFile(soap, &a->ns1__uploadFile_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadFile(struct soap *soap, const char *tag, int id, const struct __ns1__uploadFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__uploadFile(soap, "ns1:uploadFile", -1, &a->ns1__uploadFile_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadFile * SOAP_FMAC4 soap_in___ns1__uploadFile(struct soap *soap, const char *tag, struct __ns1__uploadFile *a, const char *type)
{
	size_t soap_flag_ns1__uploadFile_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__uploadFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadFile, sizeof(struct __ns1__uploadFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadFile_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__uploadFile(soap, "ns1:uploadFile", &a->ns1__uploadFile_, "ns1:uploadFile"))
				{	soap_flag_ns1__uploadFile_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__uploadFile * SOAP_FMAC2 soap_instantiate___ns1__uploadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__uploadFile *p;
	size_t k = sizeof(struct __ns1__uploadFile);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__uploadFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__uploadFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__uploadFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__uploadFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadFile(struct soap *soap, const struct __ns1__uploadFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__uploadFile(soap, tag ? tag : "-ns1:uploadFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadFile * SOAP_FMAC4 soap_get___ns1__uploadFile(struct soap *soap, struct __ns1__uploadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteFileByName(struct soap *soap, struct __ns1__deleteFileByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deleteFileByName_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteFileByName(struct soap *soap, const struct __ns1__deleteFileByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deleteFileByName(soap, &a->ns1__deleteFileByName_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteFileByName(struct soap *soap, const char *tag, int id, const struct __ns1__deleteFileByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deleteFileByName(soap, "ns1:deleteFileByName", -1, &a->ns1__deleteFileByName_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteFileByName * SOAP_FMAC4 soap_in___ns1__deleteFileByName(struct soap *soap, const char *tag, struct __ns1__deleteFileByName *a, const char *type)
{
	size_t soap_flag_ns1__deleteFileByName_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deleteFileByName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteFileByName, sizeof(struct __ns1__deleteFileByName), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteFileByName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deleteFileByName_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__deleteFileByName(soap, "ns1:deleteFileByName", &a->ns1__deleteFileByName_, "ns1:deleteFileByName"))
				{	soap_flag_ns1__deleteFileByName_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deleteFileByName * SOAP_FMAC2 soap_instantiate___ns1__deleteFileByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteFileByName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deleteFileByName *p;
	size_t k = sizeof(struct __ns1__deleteFileByName);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deleteFileByName);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deleteFileByName, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deleteFileByName location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deleteFileByName, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteFileByName(struct soap *soap, const struct __ns1__deleteFileByName *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deleteFileByName(soap, tag ? tag : "-ns1:deleteFileByName", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteFileByName * SOAP_FMAC4 soap_get___ns1__deleteFileByName(struct soap *soap, struct __ns1__deleteFileByName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteFileByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteBatchFile(struct soap *soap, struct __ns1__deleteBatchFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deleteBatchFile_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteBatchFile(struct soap *soap, const struct __ns1__deleteBatchFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deleteBatchFile(soap, &a->ns1__deleteBatchFile_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteBatchFile(struct soap *soap, const char *tag, int id, const struct __ns1__deleteBatchFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deleteBatchFile(soap, "ns1:deleteBatchFile", -1, &a->ns1__deleteBatchFile_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteBatchFile * SOAP_FMAC4 soap_in___ns1__deleteBatchFile(struct soap *soap, const char *tag, struct __ns1__deleteBatchFile *a, const char *type)
{
	size_t soap_flag_ns1__deleteBatchFile_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deleteBatchFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteBatchFile, sizeof(struct __ns1__deleteBatchFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteBatchFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deleteBatchFile_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__deleteBatchFile(soap, "ns1:deleteBatchFile", &a->ns1__deleteBatchFile_, "ns1:deleteBatchFile"))
				{	soap_flag_ns1__deleteBatchFile_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deleteBatchFile * SOAP_FMAC2 soap_instantiate___ns1__deleteBatchFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteBatchFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deleteBatchFile *p;
	size_t k = sizeof(struct __ns1__deleteBatchFile);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deleteBatchFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deleteBatchFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deleteBatchFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deleteBatchFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteBatchFile(struct soap *soap, const struct __ns1__deleteBatchFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deleteBatchFile(soap, tag ? tag : "-ns1:deleteBatchFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteBatchFile * SOAP_FMAC4 soap_get___ns1__deleteBatchFile(struct soap *soap, struct __ns1__deleteBatchFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteBatchFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteOneFile(struct soap *soap, struct __ns1__deleteOneFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deleteOneFile_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteOneFile(struct soap *soap, const struct __ns1__deleteOneFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deleteOneFile(soap, &a->ns1__deleteOneFile_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteOneFile(struct soap *soap, const char *tag, int id, const struct __ns1__deleteOneFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deleteOneFile(soap, "ns1:deleteOneFile", -1, &a->ns1__deleteOneFile_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteOneFile * SOAP_FMAC4 soap_in___ns1__deleteOneFile(struct soap *soap, const char *tag, struct __ns1__deleteOneFile *a, const char *type)
{
	size_t soap_flag_ns1__deleteOneFile_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deleteOneFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteOneFile, sizeof(struct __ns1__deleteOneFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteOneFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deleteOneFile_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__deleteOneFile(soap, "ns1:deleteOneFile", &a->ns1__deleteOneFile_, "ns1:deleteOneFile"))
				{	soap_flag_ns1__deleteOneFile_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deleteOneFile * SOAP_FMAC2 soap_instantiate___ns1__deleteOneFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteOneFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deleteOneFile *p;
	size_t k = sizeof(struct __ns1__deleteOneFile);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deleteOneFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deleteOneFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deleteOneFile location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deleteOneFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteOneFile(struct soap *soap, const struct __ns1__deleteOneFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deleteOneFile(soap, tag ? tag : "-ns1:deleteOneFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteOneFile * SOAP_FMAC4 soap_get___ns1__deleteOneFile(struct soap *soap, struct __ns1__deleteOneFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteOneFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getFileDetail(struct soap *soap, struct __ns1__getFileDetail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getFileDetail_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getFileDetail(struct soap *soap, const struct __ns1__getFileDetail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getFileDetail(soap, &a->ns1__getFileDetail_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getFileDetail(struct soap *soap, const char *tag, int id, const struct __ns1__getFileDetail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getFileDetail(soap, "ns1:getFileDetail", -1, &a->ns1__getFileDetail_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getFileDetail * SOAP_FMAC4 soap_in___ns1__getFileDetail(struct soap *soap, const char *tag, struct __ns1__getFileDetail *a, const char *type)
{
	size_t soap_flag_ns1__getFileDetail_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getFileDetail *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getFileDetail, sizeof(struct __ns1__getFileDetail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getFileDetail(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getFileDetail_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getFileDetail(soap, "ns1:getFileDetail", &a->ns1__getFileDetail_, "ns1:getFileDetail"))
				{	soap_flag_ns1__getFileDetail_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getFileDetail * SOAP_FMAC2 soap_instantiate___ns1__getFileDetail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getFileDetail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getFileDetail *p;
	size_t k = sizeof(struct __ns1__getFileDetail);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__getFileDetail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__getFileDetail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getFileDetail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__getFileDetail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getFileDetail(struct soap *soap, const struct __ns1__getFileDetail *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getFileDetail(soap, tag ? tag : "-ns1:getFileDetail", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getFileDetail * SOAP_FMAC4 soap_get___ns1__getFileDetail(struct soap *soap, struct __ns1__getFileDetail *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getFileDetail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getFileMessage(struct soap *soap, struct __ns1__getFileMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getFileMessage_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getFileMessage(struct soap *soap, const struct __ns1__getFileMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getFileMessage(soap, &a->ns1__getFileMessage_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getFileMessage(struct soap *soap, const char *tag, int id, const struct __ns1__getFileMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getFileMessage(soap, "ns1:getFileMessage", -1, &a->ns1__getFileMessage_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getFileMessage * SOAP_FMAC4 soap_in___ns1__getFileMessage(struct soap *soap, const char *tag, struct __ns1__getFileMessage *a, const char *type)
{
	size_t soap_flag_ns1__getFileMessage_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getFileMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getFileMessage, sizeof(struct __ns1__getFileMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getFileMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getFileMessage_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getFileMessage(soap, "ns1:getFileMessage", &a->ns1__getFileMessage_, "ns1:getFileMessage"))
				{	soap_flag_ns1__getFileMessage_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getFileMessage * SOAP_FMAC2 soap_instantiate___ns1__getFileMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getFileMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getFileMessage *p;
	size_t k = sizeof(struct __ns1__getFileMessage);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__getFileMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__getFileMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getFileMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__getFileMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getFileMessage(struct soap *soap, const struct __ns1__getFileMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getFileMessage(soap, tag ? tag : "-ns1:getFileMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getFileMessage * SOAP_FMAC4 soap_get___ns1__getFileMessage(struct soap *soap, struct __ns1__getFileMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getFileMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doesFileExists(struct soap *soap, struct __ns1__doesFileExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__doesFileExists_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doesFileExists(struct soap *soap, const struct __ns1__doesFileExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__doesFileExists(soap, &a->ns1__doesFileExists_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doesFileExists(struct soap *soap, const char *tag, int id, const struct __ns1__doesFileExists *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__doesFileExists(soap, "ns1:doesFileExists", -1, &a->ns1__doesFileExists_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__doesFileExists * SOAP_FMAC4 soap_in___ns1__doesFileExists(struct soap *soap, const char *tag, struct __ns1__doesFileExists *a, const char *type)
{
	size_t soap_flag_ns1__doesFileExists_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__doesFileExists *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__doesFileExists, sizeof(struct __ns1__doesFileExists), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__doesFileExists(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__doesFileExists_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__doesFileExists(soap, "ns1:doesFileExists", &a->ns1__doesFileExists_, "ns1:doesFileExists"))
				{	soap_flag_ns1__doesFileExists_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__doesFileExists * SOAP_FMAC2 soap_instantiate___ns1__doesFileExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__doesFileExists(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__doesFileExists *p;
	size_t k = sizeof(struct __ns1__doesFileExists);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__doesFileExists);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__doesFileExists, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__doesFileExists location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__doesFileExists, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doesFileExists(struct soap *soap, const struct __ns1__doesFileExists *a, const char *tag, const char *type)
{
	if (soap_out___ns1__doesFileExists(soap, tag ? tag : "-ns1:doesFileExists", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__doesFileExists * SOAP_FMAC4 soap_get___ns1__doesFileExists(struct soap *soap, struct __ns1__doesFileExists *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__doesFileExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getBucketFileNames(struct soap *soap, struct __ns1__getBucketFileNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBucketFileNames_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getBucketFileNames(struct soap *soap, const struct __ns1__getBucketFileNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getBucketFileNames(soap, &a->ns1__getBucketFileNames_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getBucketFileNames(struct soap *soap, const char *tag, int id, const struct __ns1__getBucketFileNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getBucketFileNames(soap, "ns1:getBucketFileNames", -1, &a->ns1__getBucketFileNames_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getBucketFileNames * SOAP_FMAC4 soap_in___ns1__getBucketFileNames(struct soap *soap, const char *tag, struct __ns1__getBucketFileNames *a, const char *type)
{
	size_t soap_flag_ns1__getBucketFileNames_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getBucketFileNames *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getBucketFileNames, sizeof(struct __ns1__getBucketFileNames), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getBucketFileNames(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBucketFileNames_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getBucketFileNames(soap, "ns1:getBucketFileNames", &a->ns1__getBucketFileNames_, "ns1:getBucketFileNames"))
				{	soap_flag_ns1__getBucketFileNames_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getBucketFileNames * SOAP_FMAC2 soap_instantiate___ns1__getBucketFileNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getBucketFileNames(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getBucketFileNames *p;
	size_t k = sizeof(struct __ns1__getBucketFileNames);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__getBucketFileNames);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__getBucketFileNames, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getBucketFileNames location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__getBucketFileNames, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getBucketFileNames(struct soap *soap, const struct __ns1__getBucketFileNames *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getBucketFileNames(soap, tag ? tag : "-ns1:getBucketFileNames", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getBucketFileNames * SOAP_FMAC4 soap_get___ns1__getBucketFileNames(struct soap *soap, struct __ns1__getBucketFileNames *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getBucketFileNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getBucketNames(struct soap *soap, struct __ns1__getBucketNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBucketNames_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getBucketNames(struct soap *soap, const struct __ns1__getBucketNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getBucketNames(soap, &a->ns1__getBucketNames_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getBucketNames(struct soap *soap, const char *tag, int id, const struct __ns1__getBucketNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getBucketNames(soap, "ns1:getBucketNames", -1, &a->ns1__getBucketNames_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getBucketNames * SOAP_FMAC4 soap_in___ns1__getBucketNames(struct soap *soap, const char *tag, struct __ns1__getBucketNames *a, const char *type)
{
	size_t soap_flag_ns1__getBucketNames_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getBucketNames *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getBucketNames, sizeof(struct __ns1__getBucketNames), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getBucketNames(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBucketNames_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getBucketNames(soap, "ns1:getBucketNames", &a->ns1__getBucketNames_, "ns1:getBucketNames"))
				{	soap_flag_ns1__getBucketNames_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getBucketNames * SOAP_FMAC2 soap_instantiate___ns1__getBucketNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getBucketNames(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getBucketNames *p;
	size_t k = sizeof(struct __ns1__getBucketNames);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__getBucketNames);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__getBucketNames, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getBucketNames location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__getBucketNames, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getBucketNames(struct soap *soap, const struct __ns1__getBucketNames *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getBucketNames(soap, tag ? tag : "-ns1:getBucketNames", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getBucketNames * SOAP_FMAC4 soap_get___ns1__getBucketNames(struct soap *soap, struct __ns1__getBucketNames *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getBucketNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doesBucketExists(struct soap *soap, struct __ns1__doesBucketExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__doesBucketExists_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doesBucketExists(struct soap *soap, const struct __ns1__doesBucketExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__doesBucketExists(soap, &a->ns1__doesBucketExists_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doesBucketExists(struct soap *soap, const char *tag, int id, const struct __ns1__doesBucketExists *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__doesBucketExists(soap, "ns1:doesBucketExists", -1, &a->ns1__doesBucketExists_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__doesBucketExists * SOAP_FMAC4 soap_in___ns1__doesBucketExists(struct soap *soap, const char *tag, struct __ns1__doesBucketExists *a, const char *type)
{
	size_t soap_flag_ns1__doesBucketExists_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__doesBucketExists *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__doesBucketExists, sizeof(struct __ns1__doesBucketExists), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__doesBucketExists(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__doesBucketExists_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__doesBucketExists(soap, "ns1:doesBucketExists", &a->ns1__doesBucketExists_, "ns1:doesBucketExists"))
				{	soap_flag_ns1__doesBucketExists_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__doesBucketExists * SOAP_FMAC2 soap_instantiate___ns1__doesBucketExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__doesBucketExists(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__doesBucketExists *p;
	size_t k = sizeof(struct __ns1__doesBucketExists);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__doesBucketExists);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__doesBucketExists, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__doesBucketExists location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__doesBucketExists, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doesBucketExists(struct soap *soap, const struct __ns1__doesBucketExists *a, const char *tag, const char *type)
{
	if (soap_out___ns1__doesBucketExists(soap, tag ? tag : "-ns1:doesBucketExists", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__doesBucketExists * SOAP_FMAC4 soap_get___ns1__doesBucketExists(struct soap *soap, struct __ns1__doesBucketExists *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__doesBucketExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteBucket(struct soap *soap, struct __ns1__deleteBucket *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deleteBucket_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteBucket(struct soap *soap, const struct __ns1__deleteBucket *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deleteBucket(soap, &a->ns1__deleteBucket_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteBucket(struct soap *soap, const char *tag, int id, const struct __ns1__deleteBucket *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deleteBucket(soap, "ns1:deleteBucket", -1, &a->ns1__deleteBucket_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteBucket * SOAP_FMAC4 soap_in___ns1__deleteBucket(struct soap *soap, const char *tag, struct __ns1__deleteBucket *a, const char *type)
{
	size_t soap_flag_ns1__deleteBucket_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deleteBucket *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteBucket, sizeof(struct __ns1__deleteBucket), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteBucket(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deleteBucket_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__deleteBucket(soap, "ns1:deleteBucket", &a->ns1__deleteBucket_, "ns1:deleteBucket"))
				{	soap_flag_ns1__deleteBucket_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deleteBucket * SOAP_FMAC2 soap_instantiate___ns1__deleteBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteBucket(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deleteBucket *p;
	size_t k = sizeof(struct __ns1__deleteBucket);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deleteBucket);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deleteBucket, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deleteBucket location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deleteBucket, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteBucket(struct soap *soap, const struct __ns1__deleteBucket *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deleteBucket(soap, tag ? tag : "-ns1:deleteBucket", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteBucket * SOAP_FMAC4 soap_get___ns1__deleteBucket(struct soap *soap, struct __ns1__deleteBucket *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createBucket(struct soap *soap, struct __ns1__createBucket *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__createBucket_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createBucket(struct soap *soap, const struct __ns1__createBucket *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__createBucket(soap, &a->ns1__createBucket_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createBucket(struct soap *soap, const char *tag, int id, const struct __ns1__createBucket *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__createBucket(soap, "ns1:createBucket", -1, &a->ns1__createBucket_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__createBucket * SOAP_FMAC4 soap_in___ns1__createBucket(struct soap *soap, const char *tag, struct __ns1__createBucket *a, const char *type)
{
	size_t soap_flag_ns1__createBucket_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__createBucket *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__createBucket, sizeof(struct __ns1__createBucket), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__createBucket(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__createBucket_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__createBucket(soap, "ns1:createBucket", &a->ns1__createBucket_, "ns1:createBucket"))
				{	soap_flag_ns1__createBucket_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__createBucket * SOAP_FMAC2 soap_instantiate___ns1__createBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__createBucket(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__createBucket *p;
	size_t k = sizeof(struct __ns1__createBucket);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__createBucket);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__createBucket, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__createBucket location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__createBucket, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createBucket(struct soap *soap, const struct __ns1__createBucket *a, const char *tag, const char *type)
{
	if (soap_out___ns1__createBucket(soap, tag ? tag : "-ns1:createBucket", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__createBucket * SOAP_FMAC4 soap_get___ns1__createBucket(struct soap *soap, struct __ns1__createBucket *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__createBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteFiles(struct soap *soap, struct __ns1__deleteFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deleteFiles_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteFiles(struct soap *soap, const struct __ns1__deleteFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deleteFiles(soap, &a->ns1__deleteFiles_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteFiles(struct soap *soap, const char *tag, int id, const struct __ns1__deleteFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deleteFiles(soap, "ns1:deleteFiles", -1, &a->ns1__deleteFiles_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteFiles * SOAP_FMAC4 soap_in___ns1__deleteFiles(struct soap *soap, const char *tag, struct __ns1__deleteFiles *a, const char *type)
{
	size_t soap_flag_ns1__deleteFiles_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deleteFiles *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteFiles, sizeof(struct __ns1__deleteFiles), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteFiles(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deleteFiles_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__deleteFiles(soap, "ns1:deleteFiles", &a->ns1__deleteFiles_, "ns1:deleteFiles"))
				{	soap_flag_ns1__deleteFiles_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deleteFiles * SOAP_FMAC2 soap_instantiate___ns1__deleteFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deleteFiles(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deleteFiles *p;
	size_t k = sizeof(struct __ns1__deleteFiles);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deleteFiles);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deleteFiles, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deleteFiles location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deleteFiles, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteFiles(struct soap *soap, const struct __ns1__deleteFiles *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deleteFiles(soap, tag ? tag : "-ns1:deleteFiles", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteFiles * SOAP_FMAC4 soap_get___ns1__deleteFiles(struct soap *soap, struct __ns1__deleteFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Exception_ = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__Exception(soap, &a->ns1__Exception_);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons1__Exception(soap, "ns1:Exception", -1, &a->ns1__Exception_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns1__Exception_ = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Exception_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Exception(soap, "ns1:Exception", &a->ns1__Exception_, "ns1:Exception"))
				{	soap_flag_ns1__Exception_--;
					continue;
				}
			}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__downLoadFile(struct soap *soap, ns1__downLoadFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__downLoadFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__downLoadFile(struct soap *soap, const char *tag, int id, ns1__downLoadFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__downLoadFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__downLoadFile ? type : NULL);
}

SOAP_FMAC3 ns1__downLoadFile ** SOAP_FMAC4 soap_in_PointerTons1__downLoadFile(struct soap *soap, const char *tag, ns1__downLoadFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__downLoadFile **)soap_malloc(soap, sizeof(ns1__downLoadFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__downLoadFile *)soap_instantiate_ns1__downLoadFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__downLoadFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__downLoadFile, sizeof(ns1__downLoadFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__downLoadFile(struct soap *soap, ns1__downLoadFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__downLoadFile(soap, tag ? tag : "ns1:downLoadFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__downLoadFile ** SOAP_FMAC4 soap_get_PointerTons1__downLoadFile(struct soap *soap, ns1__downLoadFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__downLoadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__uploadFile(struct soap *soap, ns1__uploadFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__uploadFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__uploadFile(struct soap *soap, const char *tag, int id, ns1__uploadFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__uploadFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__uploadFile ? type : NULL);
}

SOAP_FMAC3 ns1__uploadFile ** SOAP_FMAC4 soap_in_PointerTons1__uploadFile(struct soap *soap, const char *tag, ns1__uploadFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__uploadFile **)soap_malloc(soap, sizeof(ns1__uploadFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__uploadFile *)soap_instantiate_ns1__uploadFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__uploadFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__uploadFile, sizeof(ns1__uploadFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__uploadFile(struct soap *soap, ns1__uploadFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__uploadFile(soap, tag ? tag : "ns1:uploadFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__uploadFile ** SOAP_FMAC4 soap_get_PointerTons1__uploadFile(struct soap *soap, ns1__uploadFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__uploadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteFileByName(struct soap *soap, ns1__deleteFileByName *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deleteFileByName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteFileByName(struct soap *soap, const char *tag, int id, ns1__deleteFileByName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deleteFileByName, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deleteFileByName ? type : NULL);
}

SOAP_FMAC3 ns1__deleteFileByName ** SOAP_FMAC4 soap_in_PointerTons1__deleteFileByName(struct soap *soap, const char *tag, ns1__deleteFileByName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deleteFileByName **)soap_malloc(soap, sizeof(ns1__deleteFileByName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deleteFileByName *)soap_instantiate_ns1__deleteFileByName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deleteFileByName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deleteFileByName, sizeof(ns1__deleteFileByName), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteFileByName(struct soap *soap, ns1__deleteFileByName *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deleteFileByName(soap, tag ? tag : "ns1:deleteFileByName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deleteFileByName ** SOAP_FMAC4 soap_get_PointerTons1__deleteFileByName(struct soap *soap, ns1__deleteFileByName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deleteFileByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deleteBatchFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteBatchFile(struct soap *soap, const char *tag, int id, ns1__deleteBatchFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deleteBatchFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deleteBatchFile ? type : NULL);
}

SOAP_FMAC3 ns1__deleteBatchFile ** SOAP_FMAC4 soap_in_PointerTons1__deleteBatchFile(struct soap *soap, const char *tag, ns1__deleteBatchFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deleteBatchFile **)soap_malloc(soap, sizeof(ns1__deleteBatchFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deleteBatchFile *)soap_instantiate_ns1__deleteBatchFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deleteBatchFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deleteBatchFile, sizeof(ns1__deleteBatchFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deleteBatchFile(soap, tag ? tag : "ns1:deleteBatchFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deleteBatchFile ** SOAP_FMAC4 soap_get_PointerTons1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deleteBatchFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteOneFile(struct soap *soap, ns1__deleteOneFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deleteOneFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteOneFile(struct soap *soap, const char *tag, int id, ns1__deleteOneFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deleteOneFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deleteOneFile ? type : NULL);
}

SOAP_FMAC3 ns1__deleteOneFile ** SOAP_FMAC4 soap_in_PointerTons1__deleteOneFile(struct soap *soap, const char *tag, ns1__deleteOneFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deleteOneFile **)soap_malloc(soap, sizeof(ns1__deleteOneFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deleteOneFile *)soap_instantiate_ns1__deleteOneFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deleteOneFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deleteOneFile, sizeof(ns1__deleteOneFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteOneFile(struct soap *soap, ns1__deleteOneFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deleteOneFile(soap, tag ? tag : "ns1:deleteOneFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deleteOneFile ** SOAP_FMAC4 soap_get_PointerTons1__deleteOneFile(struct soap *soap, ns1__deleteOneFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deleteOneFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getFileDetail(struct soap *soap, ns1__getFileDetail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getFileDetail))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getFileDetail(struct soap *soap, const char *tag, int id, ns1__getFileDetail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getFileDetail, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getFileDetail ? type : NULL);
}

SOAP_FMAC3 ns1__getFileDetail ** SOAP_FMAC4 soap_in_PointerTons1__getFileDetail(struct soap *soap, const char *tag, ns1__getFileDetail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getFileDetail **)soap_malloc(soap, sizeof(ns1__getFileDetail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getFileDetail *)soap_instantiate_ns1__getFileDetail(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getFileDetail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getFileDetail, sizeof(ns1__getFileDetail), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getFileDetail(struct soap *soap, ns1__getFileDetail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getFileDetail(soap, tag ? tag : "ns1:getFileDetail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getFileDetail ** SOAP_FMAC4 soap_get_PointerTons1__getFileDetail(struct soap *soap, ns1__getFileDetail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getFileDetail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getFileMessage(struct soap *soap, ns1__getFileMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getFileMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getFileMessage(struct soap *soap, const char *tag, int id, ns1__getFileMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getFileMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getFileMessage ? type : NULL);
}

SOAP_FMAC3 ns1__getFileMessage ** SOAP_FMAC4 soap_in_PointerTons1__getFileMessage(struct soap *soap, const char *tag, ns1__getFileMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getFileMessage **)soap_malloc(soap, sizeof(ns1__getFileMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getFileMessage *)soap_instantiate_ns1__getFileMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getFileMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getFileMessage, sizeof(ns1__getFileMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getFileMessage(struct soap *soap, ns1__getFileMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getFileMessage(soap, tag ? tag : "ns1:getFileMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getFileMessage ** SOAP_FMAC4 soap_get_PointerTons1__getFileMessage(struct soap *soap, ns1__getFileMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getFileMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__doesFileExists(struct soap *soap, ns1__doesFileExists *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__doesFileExists))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__doesFileExists(struct soap *soap, const char *tag, int id, ns1__doesFileExists *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__doesFileExists, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__doesFileExists ? type : NULL);
}

SOAP_FMAC3 ns1__doesFileExists ** SOAP_FMAC4 soap_in_PointerTons1__doesFileExists(struct soap *soap, const char *tag, ns1__doesFileExists **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__doesFileExists **)soap_malloc(soap, sizeof(ns1__doesFileExists *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__doesFileExists *)soap_instantiate_ns1__doesFileExists(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__doesFileExists **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__doesFileExists, sizeof(ns1__doesFileExists), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__doesFileExists(struct soap *soap, ns1__doesFileExists *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__doesFileExists(soap, tag ? tag : "ns1:doesFileExists", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__doesFileExists ** SOAP_FMAC4 soap_get_PointerTons1__doesFileExists(struct soap *soap, ns1__doesFileExists **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__doesFileExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getBucketFileNames))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getBucketFileNames(struct soap *soap, const char *tag, int id, ns1__getBucketFileNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getBucketFileNames, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getBucketFileNames ? type : NULL);
}

SOAP_FMAC3 ns1__getBucketFileNames ** SOAP_FMAC4 soap_in_PointerTons1__getBucketFileNames(struct soap *soap, const char *tag, ns1__getBucketFileNames **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getBucketFileNames **)soap_malloc(soap, sizeof(ns1__getBucketFileNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getBucketFileNames *)soap_instantiate_ns1__getBucketFileNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getBucketFileNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getBucketFileNames, sizeof(ns1__getBucketFileNames), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getBucketFileNames(soap, tag ? tag : "ns1:getBucketFileNames", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getBucketFileNames ** SOAP_FMAC4 soap_get_PointerTons1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getBucketFileNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getBucketNames(struct soap *soap, ns1__getBucketNames *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getBucketNames))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getBucketNames(struct soap *soap, const char *tag, int id, ns1__getBucketNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getBucketNames, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getBucketNames ? type : NULL);
}

SOAP_FMAC3 ns1__getBucketNames ** SOAP_FMAC4 soap_in_PointerTons1__getBucketNames(struct soap *soap, const char *tag, ns1__getBucketNames **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getBucketNames **)soap_malloc(soap, sizeof(ns1__getBucketNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getBucketNames *)soap_instantiate_ns1__getBucketNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getBucketNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getBucketNames, sizeof(ns1__getBucketNames), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getBucketNames(struct soap *soap, ns1__getBucketNames *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getBucketNames(soap, tag ? tag : "ns1:getBucketNames", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getBucketNames ** SOAP_FMAC4 soap_get_PointerTons1__getBucketNames(struct soap *soap, ns1__getBucketNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getBucketNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__doesBucketExists(struct soap *soap, ns1__doesBucketExists *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__doesBucketExists))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__doesBucketExists(struct soap *soap, const char *tag, int id, ns1__doesBucketExists *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__doesBucketExists, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__doesBucketExists ? type : NULL);
}

SOAP_FMAC3 ns1__doesBucketExists ** SOAP_FMAC4 soap_in_PointerTons1__doesBucketExists(struct soap *soap, const char *tag, ns1__doesBucketExists **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__doesBucketExists **)soap_malloc(soap, sizeof(ns1__doesBucketExists *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__doesBucketExists *)soap_instantiate_ns1__doesBucketExists(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__doesBucketExists **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__doesBucketExists, sizeof(ns1__doesBucketExists), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__doesBucketExists(struct soap *soap, ns1__doesBucketExists *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__doesBucketExists(soap, tag ? tag : "ns1:doesBucketExists", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__doesBucketExists ** SOAP_FMAC4 soap_get_PointerTons1__doesBucketExists(struct soap *soap, ns1__doesBucketExists **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__doesBucketExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteBucket(struct soap *soap, ns1__deleteBucket *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deleteBucket))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteBucket(struct soap *soap, const char *tag, int id, ns1__deleteBucket *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deleteBucket, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deleteBucket ? type : NULL);
}

SOAP_FMAC3 ns1__deleteBucket ** SOAP_FMAC4 soap_in_PointerTons1__deleteBucket(struct soap *soap, const char *tag, ns1__deleteBucket **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deleteBucket **)soap_malloc(soap, sizeof(ns1__deleteBucket *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deleteBucket *)soap_instantiate_ns1__deleteBucket(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deleteBucket **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deleteBucket, sizeof(ns1__deleteBucket), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteBucket(struct soap *soap, ns1__deleteBucket *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deleteBucket(soap, tag ? tag : "ns1:deleteBucket", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deleteBucket ** SOAP_FMAC4 soap_get_PointerTons1__deleteBucket(struct soap *soap, ns1__deleteBucket **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deleteBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__createBucket(struct soap *soap, ns1__createBucket *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__createBucket))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__createBucket(struct soap *soap, const char *tag, int id, ns1__createBucket *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__createBucket, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__createBucket ? type : NULL);
}

SOAP_FMAC3 ns1__createBucket ** SOAP_FMAC4 soap_in_PointerTons1__createBucket(struct soap *soap, const char *tag, ns1__createBucket **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__createBucket **)soap_malloc(soap, sizeof(ns1__createBucket *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__createBucket *)soap_instantiate_ns1__createBucket(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__createBucket **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__createBucket, sizeof(ns1__createBucket), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__createBucket(struct soap *soap, ns1__createBucket *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__createBucket(soap, tag ? tag : "ns1:createBucket", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__createBucket ** SOAP_FMAC4 soap_get_PointerTons1__createBucket(struct soap *soap, ns1__createBucket **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__createBucket(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteFiles(struct soap *soap, ns1__deleteFiles *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deleteFiles))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteFiles(struct soap *soap, const char *tag, int id, ns1__deleteFiles *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deleteFiles, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deleteFiles ? type : NULL);
}

SOAP_FMAC3 ns1__deleteFiles ** SOAP_FMAC4 soap_in_PointerTons1__deleteFiles(struct soap *soap, const char *tag, ns1__deleteFiles **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deleteFiles **)soap_malloc(soap, sizeof(ns1__deleteFiles *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deleteFiles *)soap_instantiate_ns1__deleteFiles(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deleteFiles **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deleteFiles, sizeof(ns1__deleteFiles), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteFiles(struct soap *soap, ns1__deleteFiles *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deleteFiles(soap, tag ? tag : "ns1:deleteFiles", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deleteFiles ** SOAP_FMAC4 soap_get_PointerTons1__deleteFiles(struct soap *soap, ns1__deleteFiles **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deleteFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Exception(struct soap *soap, ns1__Exception *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Exception))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Exception(struct soap *soap, const char *tag, int id, ns1__Exception *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Exception, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Exception ? type : NULL);
}

SOAP_FMAC3 ns1__Exception ** SOAP_FMAC4 soap_in_PointerTons1__Exception(struct soap *soap, const char *tag, ns1__Exception **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Exception **)soap_malloc(soap, sizeof(ns1__Exception *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Exception *)soap_instantiate_ns1__Exception(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Exception **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Exception, sizeof(ns1__Exception), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Exception(struct soap *soap, ns1__Exception *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Exception(soap, tag ? tag : "ns1:Exception", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Exception ** SOAP_FMAC4 soap_get_PointerTons1__Exception(struct soap *soap, ns1__Exception **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_xsd__base64Binary, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__base64Binary ? type : NULL);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
