/* soapH.h
   Generated by gSOAP 2.8.51 for service1.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBucketFileNamesResponse_DEFINED
#define SOAP_TYPE_ns1__getBucketFileNamesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketFileNamesResponse(struct soap*, const char*, int, const ns1__getBucketFileNamesResponse *, const char*);
SOAP_FMAC3 ns1__getBucketFileNamesResponse * SOAP_FMAC4 soap_in_ns1__getBucketFileNamesResponse(struct soap*, const char*, ns1__getBucketFileNamesResponse *, const char*);
SOAP_FMAC1 ns1__getBucketFileNamesResponse * SOAP_FMAC2 soap_instantiate_ns1__getBucketFileNamesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getBucketFileNamesResponse * soap_new_ns1__getBucketFileNamesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBucketFileNamesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getBucketFileNamesResponse * soap_new_req_ns1__getBucketFileNamesResponse(
	struct soap *soap,
	int __sizereturn_,
	char **return_)
{
	ns1__getBucketFileNamesResponse *_p = soap_new_ns1__getBucketFileNamesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getBucketFileNamesResponse::__sizereturn_ = __sizereturn_;
		_p->ns1__getBucketFileNamesResponse::return_ = return_;
	}
	return _p;
}

inline ns1__getBucketFileNamesResponse * soap_new_set_ns1__getBucketFileNamesResponse(
	struct soap *soap,
	int __sizereturn_,
	char **return_)
{
	ns1__getBucketFileNamesResponse *_p = soap_new_ns1__getBucketFileNamesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getBucketFileNamesResponse::__sizereturn_ = __sizereturn_;
		_p->ns1__getBucketFileNamesResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getBucketFileNamesResponse(struct soap *soap, ns1__getBucketFileNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBucketFileNamesResponse(struct soap *soap, const char *URL, ns1__getBucketFileNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBucketFileNamesResponse(struct soap *soap, const char *URL, ns1__getBucketFileNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getBucketFileNamesResponse * SOAP_FMAC4 soap_get_ns1__getBucketFileNamesResponse(struct soap*, ns1__getBucketFileNamesResponse *, const char*, const char*);

inline int soap_read_ns1__getBucketFileNamesResponse(struct soap *soap, ns1__getBucketFileNamesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getBucketFileNamesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBucketFileNamesResponse(struct soap *soap, const char *URL, ns1__getBucketFileNamesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBucketFileNamesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBucketFileNamesResponse(struct soap *soap, ns1__getBucketFileNamesResponse *p)
{
	if (soap_read_ns1__getBucketFileNamesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBucketFileNames_DEFINED
#define SOAP_TYPE_ns1__getBucketFileNames_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketFileNames(struct soap*, const char*, int, const ns1__getBucketFileNames *, const char*);
SOAP_FMAC3 ns1__getBucketFileNames * SOAP_FMAC4 soap_in_ns1__getBucketFileNames(struct soap*, const char*, ns1__getBucketFileNames *, const char*);
SOAP_FMAC1 ns1__getBucketFileNames * SOAP_FMAC2 soap_instantiate_ns1__getBucketFileNames(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getBucketFileNames * soap_new_ns1__getBucketFileNames(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBucketFileNames(soap, n, NULL, NULL, NULL);
}

inline ns1__getBucketFileNames * soap_new_req_ns1__getBucketFileNames(
	struct soap *soap)
{
	ns1__getBucketFileNames *_p = soap_new_ns1__getBucketFileNames(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getBucketFileNames * soap_new_set_ns1__getBucketFileNames(
	struct soap *soap,
	char *arg0)
{
	ns1__getBucketFileNames *_p = soap_new_ns1__getBucketFileNames(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getBucketFileNames::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNames", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBucketFileNames(struct soap *soap, const char *URL, ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNames", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBucketFileNames(struct soap *soap, const char *URL, ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketFileNames", p->soap_type() == SOAP_TYPE_ns1__getBucketFileNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getBucketFileNames * SOAP_FMAC4 soap_get_ns1__getBucketFileNames(struct soap*, ns1__getBucketFileNames *, const char*, const char*);

inline int soap_read_ns1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getBucketFileNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBucketFileNames(struct soap *soap, const char *URL, ns1__getBucketFileNames *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBucketFileNames(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBucketFileNames(struct soap *soap, ns1__getBucketFileNames *p)
{
	if (soap_read_ns1__getBucketFileNames(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__doesFileExistsResponse_DEFINED
#define SOAP_TYPE_ns1__doesFileExistsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesFileExistsResponse(struct soap*, const char*, int, const ns1__doesFileExistsResponse *, const char*);
SOAP_FMAC3 ns1__doesFileExistsResponse * SOAP_FMAC4 soap_in_ns1__doesFileExistsResponse(struct soap*, const char*, ns1__doesFileExistsResponse *, const char*);
SOAP_FMAC1 ns1__doesFileExistsResponse * SOAP_FMAC2 soap_instantiate_ns1__doesFileExistsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__doesFileExistsResponse * soap_new_ns1__doesFileExistsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__doesFileExistsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__doesFileExistsResponse * soap_new_req_ns1__doesFileExistsResponse(
	struct soap *soap,
	bool return_)
{
	ns1__doesFileExistsResponse *_p = soap_new_ns1__doesFileExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesFileExistsResponse::return_ = return_;
	}
	return _p;
}

inline ns1__doesFileExistsResponse * soap_new_set_ns1__doesFileExistsResponse(
	struct soap *soap,
	bool return_)
{
	ns1__doesFileExistsResponse *_p = soap_new_ns1__doesFileExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesFileExistsResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__doesFileExistsResponse(struct soap *soap, ns1__doesFileExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesFileExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__doesFileExistsResponse(struct soap *soap, const char *URL, ns1__doesFileExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesFileExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__doesFileExistsResponse(struct soap *soap, const char *URL, ns1__doesFileExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesFileExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__doesFileExistsResponse * SOAP_FMAC4 soap_get_ns1__doesFileExistsResponse(struct soap*, ns1__doesFileExistsResponse *, const char*, const char*);

inline int soap_read_ns1__doesFileExistsResponse(struct soap *soap, ns1__doesFileExistsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__doesFileExistsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__doesFileExistsResponse(struct soap *soap, const char *URL, ns1__doesFileExistsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__doesFileExistsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__doesFileExistsResponse(struct soap *soap, ns1__doesFileExistsResponse *p)
{
	if (soap_read_ns1__doesFileExistsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__doesFileExists_DEFINED
#define SOAP_TYPE_ns1__doesFileExists_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesFileExists(struct soap*, const char*, int, const ns1__doesFileExists *, const char*);
SOAP_FMAC3 ns1__doesFileExists * SOAP_FMAC4 soap_in_ns1__doesFileExists(struct soap*, const char*, ns1__doesFileExists *, const char*);
SOAP_FMAC1 ns1__doesFileExists * SOAP_FMAC2 soap_instantiate_ns1__doesFileExists(struct soap*, int, const char*, const char*, size_t*);

inline ns1__doesFileExists * soap_new_ns1__doesFileExists(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__doesFileExists(soap, n, NULL, NULL, NULL);
}

inline ns1__doesFileExists * soap_new_req_ns1__doesFileExists(
	struct soap *soap)
{
	ns1__doesFileExists *_p = soap_new_ns1__doesFileExists(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__doesFileExists * soap_new_set_ns1__doesFileExists(
	struct soap *soap,
	char *arg0,
	char *arg1)
{
	ns1__doesFileExists *_p = soap_new_ns1__doesFileExists(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesFileExists::arg0 = arg0;
		_p->ns1__doesFileExists::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__doesFileExists(struct soap *soap, ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExists", p->soap_type() == SOAP_TYPE_ns1__doesFileExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__doesFileExists(struct soap *soap, const char *URL, ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExists", p->soap_type() == SOAP_TYPE_ns1__doesFileExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__doesFileExists(struct soap *soap, const char *URL, ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesFileExists", p->soap_type() == SOAP_TYPE_ns1__doesFileExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__doesFileExists * SOAP_FMAC4 soap_get_ns1__doesFileExists(struct soap*, ns1__doesFileExists *, const char*, const char*);

inline int soap_read_ns1__doesFileExists(struct soap *soap, ns1__doesFileExists *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__doesFileExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__doesFileExists(struct soap *soap, const char *URL, ns1__doesFileExists *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__doesFileExists(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__doesFileExists(struct soap *soap, ns1__doesFileExists *p)
{
	if (soap_read_ns1__doesFileExists(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__createBucketResponse_DEFINED
#define SOAP_TYPE_ns1__createBucketResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createBucketResponse(struct soap*, const char*, int, const ns1__createBucketResponse *, const char*);
SOAP_FMAC3 ns1__createBucketResponse * SOAP_FMAC4 soap_in_ns1__createBucketResponse(struct soap*, const char*, ns1__createBucketResponse *, const char*);
SOAP_FMAC1 ns1__createBucketResponse * SOAP_FMAC2 soap_instantiate_ns1__createBucketResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__createBucketResponse * soap_new_ns1__createBucketResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__createBucketResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__createBucketResponse * soap_new_req_ns1__createBucketResponse(
	struct soap *soap,
	bool return_)
{
	ns1__createBucketResponse *_p = soap_new_ns1__createBucketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__createBucketResponse::return_ = return_;
	}
	return _p;
}

inline ns1__createBucketResponse * soap_new_set_ns1__createBucketResponse(
	struct soap *soap,
	bool return_)
{
	ns1__createBucketResponse *_p = soap_new_ns1__createBucketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__createBucketResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__createBucketResponse(struct soap *soap, ns1__createBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucketResponse", p->soap_type() == SOAP_TYPE_ns1__createBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__createBucketResponse(struct soap *soap, const char *URL, ns1__createBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucketResponse", p->soap_type() == SOAP_TYPE_ns1__createBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__createBucketResponse(struct soap *soap, const char *URL, ns1__createBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucketResponse", p->soap_type() == SOAP_TYPE_ns1__createBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__createBucketResponse * SOAP_FMAC4 soap_get_ns1__createBucketResponse(struct soap*, ns1__createBucketResponse *, const char*, const char*);

inline int soap_read_ns1__createBucketResponse(struct soap *soap, ns1__createBucketResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__createBucketResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__createBucketResponse(struct soap *soap, const char *URL, ns1__createBucketResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__createBucketResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__createBucketResponse(struct soap *soap, ns1__createBucketResponse *p)
{
	if (soap_read_ns1__createBucketResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__createBucket_DEFINED
#define SOAP_TYPE_ns1__createBucket_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createBucket(struct soap*, const char*, int, const ns1__createBucket *, const char*);
SOAP_FMAC3 ns1__createBucket * SOAP_FMAC4 soap_in_ns1__createBucket(struct soap*, const char*, ns1__createBucket *, const char*);
SOAP_FMAC1 ns1__createBucket * SOAP_FMAC2 soap_instantiate_ns1__createBucket(struct soap*, int, const char*, const char*, size_t*);

inline ns1__createBucket * soap_new_ns1__createBucket(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__createBucket(soap, n, NULL, NULL, NULL);
}

inline ns1__createBucket * soap_new_req_ns1__createBucket(
	struct soap *soap)
{
	ns1__createBucket *_p = soap_new_ns1__createBucket(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__createBucket * soap_new_set_ns1__createBucket(
	struct soap *soap,
	char *arg0)
{
	ns1__createBucket *_p = soap_new_ns1__createBucket(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__createBucket::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__createBucket(struct soap *soap, ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucket", p->soap_type() == SOAP_TYPE_ns1__createBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__createBucket(struct soap *soap, const char *URL, ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucket", p->soap_type() == SOAP_TYPE_ns1__createBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__createBucket(struct soap *soap, const char *URL, ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:createBucket", p->soap_type() == SOAP_TYPE_ns1__createBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__createBucket * SOAP_FMAC4 soap_get_ns1__createBucket(struct soap*, ns1__createBucket *, const char*, const char*);

inline int soap_read_ns1__createBucket(struct soap *soap, ns1__createBucket *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__createBucket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__createBucket(struct soap *soap, const char *URL, ns1__createBucket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__createBucket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__createBucket(struct soap *soap, ns1__createBucket *p)
{
	if (soap_read_ns1__createBucket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteBatchFileResponse_DEFINED
#define SOAP_TYPE_ns1__deleteBatchFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBatchFileResponse(struct soap*, const char*, int, const ns1__deleteBatchFileResponse *, const char*);
SOAP_FMAC3 ns1__deleteBatchFileResponse * SOAP_FMAC4 soap_in_ns1__deleteBatchFileResponse(struct soap*, const char*, ns1__deleteBatchFileResponse *, const char*);
SOAP_FMAC1 ns1__deleteBatchFileResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteBatchFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteBatchFileResponse * soap_new_ns1__deleteBatchFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteBatchFileResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteBatchFileResponse * soap_new_req_ns1__deleteBatchFileResponse(
	struct soap *soap)
{
	ns1__deleteBatchFileResponse *_p = soap_new_ns1__deleteBatchFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteBatchFileResponse * soap_new_set_ns1__deleteBatchFileResponse(
	struct soap *soap)
{
	ns1__deleteBatchFileResponse *_p = soap_new_ns1__deleteBatchFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__deleteBatchFileResponse(struct soap *soap, ns1__deleteBatchFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteBatchFileResponse(struct soap *soap, const char *URL, ns1__deleteBatchFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteBatchFileResponse(struct soap *soap, const char *URL, ns1__deleteBatchFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteBatchFileResponse * SOAP_FMAC4 soap_get_ns1__deleteBatchFileResponse(struct soap*, ns1__deleteBatchFileResponse *, const char*, const char*);

inline int soap_read_ns1__deleteBatchFileResponse(struct soap *soap, ns1__deleteBatchFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteBatchFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteBatchFileResponse(struct soap *soap, const char *URL, ns1__deleteBatchFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteBatchFileResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteBatchFileResponse(struct soap *soap, ns1__deleteBatchFileResponse *p)
{
	if (soap_read_ns1__deleteBatchFileResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteBatchFile_DEFINED
#define SOAP_TYPE_ns1__deleteBatchFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBatchFile(struct soap*, const char*, int, const ns1__deleteBatchFile *, const char*);
SOAP_FMAC3 ns1__deleteBatchFile * SOAP_FMAC4 soap_in_ns1__deleteBatchFile(struct soap*, const char*, ns1__deleteBatchFile *, const char*);
SOAP_FMAC1 ns1__deleteBatchFile * SOAP_FMAC2 soap_instantiate_ns1__deleteBatchFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteBatchFile * soap_new_ns1__deleteBatchFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteBatchFile(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteBatchFile * soap_new_req_ns1__deleteBatchFile(
	struct soap *soap,
	int __sizearg0,
	char **arg0,
	int __sizearg1,
	char **arg1)
{
	ns1__deleteBatchFile *_p = soap_new_ns1__deleteBatchFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteBatchFile::__sizearg0 = __sizearg0;
		_p->ns1__deleteBatchFile::arg0 = arg0;
		_p->ns1__deleteBatchFile::__sizearg1 = __sizearg1;
		_p->ns1__deleteBatchFile::arg1 = arg1;
	}
	return _p;
}

inline ns1__deleteBatchFile * soap_new_set_ns1__deleteBatchFile(
	struct soap *soap,
	int __sizearg0,
	char **arg0,
	int __sizearg1,
	char **arg1)
{
	ns1__deleteBatchFile *_p = soap_new_ns1__deleteBatchFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteBatchFile::__sizearg0 = __sizearg0;
		_p->ns1__deleteBatchFile::arg0 = arg0;
		_p->ns1__deleteBatchFile::__sizearg1 = __sizearg1;
		_p->ns1__deleteBatchFile::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFile", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteBatchFile(struct soap *soap, const char *URL, ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFile", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteBatchFile(struct soap *soap, const char *URL, ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBatchFile", p->soap_type() == SOAP_TYPE_ns1__deleteBatchFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteBatchFile * SOAP_FMAC4 soap_get_ns1__deleteBatchFile(struct soap*, ns1__deleteBatchFile *, const char*, const char*);

inline int soap_read_ns1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteBatchFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteBatchFile(struct soap *soap, const char *URL, ns1__deleteBatchFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteBatchFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteBatchFile(struct soap *soap, ns1__deleteBatchFile *p)
{
	if (soap_read_ns1__deleteBatchFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__doesBucketExistsResponse_DEFINED
#define SOAP_TYPE_ns1__doesBucketExistsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesBucketExistsResponse(struct soap*, const char*, int, const ns1__doesBucketExistsResponse *, const char*);
SOAP_FMAC3 ns1__doesBucketExistsResponse * SOAP_FMAC4 soap_in_ns1__doesBucketExistsResponse(struct soap*, const char*, ns1__doesBucketExistsResponse *, const char*);
SOAP_FMAC1 ns1__doesBucketExistsResponse * SOAP_FMAC2 soap_instantiate_ns1__doesBucketExistsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__doesBucketExistsResponse * soap_new_ns1__doesBucketExistsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__doesBucketExistsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__doesBucketExistsResponse * soap_new_req_ns1__doesBucketExistsResponse(
	struct soap *soap,
	bool return_)
{
	ns1__doesBucketExistsResponse *_p = soap_new_ns1__doesBucketExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesBucketExistsResponse::return_ = return_;
	}
	return _p;
}

inline ns1__doesBucketExistsResponse * soap_new_set_ns1__doesBucketExistsResponse(
	struct soap *soap,
	bool return_)
{
	ns1__doesBucketExistsResponse *_p = soap_new_ns1__doesBucketExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesBucketExistsResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__doesBucketExistsResponse(struct soap *soap, ns1__doesBucketExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesBucketExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__doesBucketExistsResponse(struct soap *soap, const char *URL, ns1__doesBucketExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesBucketExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__doesBucketExistsResponse(struct soap *soap, const char *URL, ns1__doesBucketExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExistsResponse", p->soap_type() == SOAP_TYPE_ns1__doesBucketExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__doesBucketExistsResponse * SOAP_FMAC4 soap_get_ns1__doesBucketExistsResponse(struct soap*, ns1__doesBucketExistsResponse *, const char*, const char*);

inline int soap_read_ns1__doesBucketExistsResponse(struct soap *soap, ns1__doesBucketExistsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__doesBucketExistsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__doesBucketExistsResponse(struct soap *soap, const char *URL, ns1__doesBucketExistsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__doesBucketExistsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__doesBucketExistsResponse(struct soap *soap, ns1__doesBucketExistsResponse *p)
{
	if (soap_read_ns1__doesBucketExistsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__doesBucketExists_DEFINED
#define SOAP_TYPE_ns1__doesBucketExists_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__doesBucketExists(struct soap*, const char*, int, const ns1__doesBucketExists *, const char*);
SOAP_FMAC3 ns1__doesBucketExists * SOAP_FMAC4 soap_in_ns1__doesBucketExists(struct soap*, const char*, ns1__doesBucketExists *, const char*);
SOAP_FMAC1 ns1__doesBucketExists * SOAP_FMAC2 soap_instantiate_ns1__doesBucketExists(struct soap*, int, const char*, const char*, size_t*);

inline ns1__doesBucketExists * soap_new_ns1__doesBucketExists(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__doesBucketExists(soap, n, NULL, NULL, NULL);
}

inline ns1__doesBucketExists * soap_new_req_ns1__doesBucketExists(
	struct soap *soap)
{
	ns1__doesBucketExists *_p = soap_new_ns1__doesBucketExists(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__doesBucketExists * soap_new_set_ns1__doesBucketExists(
	struct soap *soap,
	char *arg0)
{
	ns1__doesBucketExists *_p = soap_new_ns1__doesBucketExists(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__doesBucketExists::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__doesBucketExists(struct soap *soap, ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExists", p->soap_type() == SOAP_TYPE_ns1__doesBucketExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__doesBucketExists(struct soap *soap, const char *URL, ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExists", p->soap_type() == SOAP_TYPE_ns1__doesBucketExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__doesBucketExists(struct soap *soap, const char *URL, ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doesBucketExists", p->soap_type() == SOAP_TYPE_ns1__doesBucketExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__doesBucketExists * SOAP_FMAC4 soap_get_ns1__doesBucketExists(struct soap*, ns1__doesBucketExists *, const char*, const char*);

inline int soap_read_ns1__doesBucketExists(struct soap *soap, ns1__doesBucketExists *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__doesBucketExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__doesBucketExists(struct soap *soap, const char *URL, ns1__doesBucketExists *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__doesBucketExists(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__doesBucketExists(struct soap *soap, ns1__doesBucketExists *p)
{
	if (soap_read_ns1__doesBucketExists(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__downLoadFileResponse_DEFINED
#define SOAP_TYPE_ns1__downLoadFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downLoadFileResponse(struct soap*, const char*, int, const ns1__downLoadFileResponse *, const char*);
SOAP_FMAC3 ns1__downLoadFileResponse * SOAP_FMAC4 soap_in_ns1__downLoadFileResponse(struct soap*, const char*, ns1__downLoadFileResponse *, const char*);
SOAP_FMAC1 ns1__downLoadFileResponse * SOAP_FMAC2 soap_instantiate_ns1__downLoadFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__downLoadFileResponse * soap_new_ns1__downLoadFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__downLoadFileResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__downLoadFileResponse * soap_new_req_ns1__downLoadFileResponse(
	struct soap *soap)
{
	ns1__downLoadFileResponse *_p = soap_new_ns1__downLoadFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__downLoadFileResponse * soap_new_set_ns1__downLoadFileResponse(
	struct soap *soap,
	char *return_)
{
	ns1__downLoadFileResponse *_p = soap_new_ns1__downLoadFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__downLoadFileResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__downLoadFileResponse(struct soap *soap, ns1__downLoadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFileResponse", p->soap_type() == SOAP_TYPE_ns1__downLoadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__downLoadFileResponse(struct soap *soap, const char *URL, ns1__downLoadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFileResponse", p->soap_type() == SOAP_TYPE_ns1__downLoadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__downLoadFileResponse(struct soap *soap, const char *URL, ns1__downLoadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFileResponse", p->soap_type() == SOAP_TYPE_ns1__downLoadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__downLoadFileResponse * SOAP_FMAC4 soap_get_ns1__downLoadFileResponse(struct soap*, ns1__downLoadFileResponse *, const char*, const char*);

inline int soap_read_ns1__downLoadFileResponse(struct soap *soap, ns1__downLoadFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__downLoadFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__downLoadFileResponse(struct soap *soap, const char *URL, ns1__downLoadFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__downLoadFileResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__downLoadFileResponse(struct soap *soap, ns1__downLoadFileResponse *p)
{
	if (soap_read_ns1__downLoadFileResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__downLoadFile_DEFINED
#define SOAP_TYPE_ns1__downLoadFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downLoadFile(struct soap*, const char*, int, const ns1__downLoadFile *, const char*);
SOAP_FMAC3 ns1__downLoadFile * SOAP_FMAC4 soap_in_ns1__downLoadFile(struct soap*, const char*, ns1__downLoadFile *, const char*);
SOAP_FMAC1 ns1__downLoadFile * SOAP_FMAC2 soap_instantiate_ns1__downLoadFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__downLoadFile * soap_new_ns1__downLoadFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__downLoadFile(soap, n, NULL, NULL, NULL);
}

inline ns1__downLoadFile * soap_new_req_ns1__downLoadFile(
	struct soap *soap)
{
	ns1__downLoadFile *_p = soap_new_ns1__downLoadFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__downLoadFile * soap_new_set_ns1__downLoadFile(
	struct soap *soap,
	char *arg0,
	char *arg1)
{
	ns1__downLoadFile *_p = soap_new_ns1__downLoadFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__downLoadFile::arg0 = arg0;
		_p->ns1__downLoadFile::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__downLoadFile(struct soap *soap, ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFile", p->soap_type() == SOAP_TYPE_ns1__downLoadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__downLoadFile(struct soap *soap, const char *URL, ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFile", p->soap_type() == SOAP_TYPE_ns1__downLoadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__downLoadFile(struct soap *soap, const char *URL, ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:downLoadFile", p->soap_type() == SOAP_TYPE_ns1__downLoadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__downLoadFile * SOAP_FMAC4 soap_get_ns1__downLoadFile(struct soap*, ns1__downLoadFile *, const char*, const char*);

inline int soap_read_ns1__downLoadFile(struct soap *soap, ns1__downLoadFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__downLoadFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__downLoadFile(struct soap *soap, const char *URL, ns1__downLoadFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__downLoadFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__downLoadFile(struct soap *soap, ns1__downLoadFile *p)
{
	if (soap_read_ns1__downLoadFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteFilesResponse_DEFINED
#define SOAP_TYPE_ns1__deleteFilesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFilesResponse(struct soap*, const char*, int, const ns1__deleteFilesResponse *, const char*);
SOAP_FMAC3 ns1__deleteFilesResponse * SOAP_FMAC4 soap_in_ns1__deleteFilesResponse(struct soap*, const char*, ns1__deleteFilesResponse *, const char*);
SOAP_FMAC1 ns1__deleteFilesResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteFilesResponse * soap_new_ns1__deleteFilesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteFilesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteFilesResponse * soap_new_req_ns1__deleteFilesResponse(
	struct soap *soap)
{
	ns1__deleteFilesResponse *_p = soap_new_ns1__deleteFilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteFilesResponse * soap_new_set_ns1__deleteFilesResponse(
	struct soap *soap)
{
	ns1__deleteFilesResponse *_p = soap_new_ns1__deleteFilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__deleteFilesResponse(struct soap *soap, ns1__deleteFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFilesResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFilesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteFilesResponse(struct soap *soap, const char *URL, ns1__deleteFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFilesResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFilesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteFilesResponse(struct soap *soap, const char *URL, ns1__deleteFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFilesResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFilesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteFilesResponse * SOAP_FMAC4 soap_get_ns1__deleteFilesResponse(struct soap*, ns1__deleteFilesResponse *, const char*, const char*);

inline int soap_read_ns1__deleteFilesResponse(struct soap *soap, ns1__deleteFilesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteFilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteFilesResponse(struct soap *soap, const char *URL, ns1__deleteFilesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteFilesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteFilesResponse(struct soap *soap, ns1__deleteFilesResponse *p)
{
	if (soap_read_ns1__deleteFilesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteFiles_DEFINED
#define SOAP_TYPE_ns1__deleteFiles_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFiles(struct soap*, const char*, int, const ns1__deleteFiles *, const char*);
SOAP_FMAC3 ns1__deleteFiles * SOAP_FMAC4 soap_in_ns1__deleteFiles(struct soap*, const char*, ns1__deleteFiles *, const char*);
SOAP_FMAC1 ns1__deleteFiles * SOAP_FMAC2 soap_instantiate_ns1__deleteFiles(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteFiles * soap_new_ns1__deleteFiles(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteFiles(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteFiles * soap_new_req_ns1__deleteFiles(
	struct soap *soap,
	int __sizearg1,
	char **arg1)
{
	ns1__deleteFiles *_p = soap_new_ns1__deleteFiles(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteFiles::__sizearg1 = __sizearg1;
		_p->ns1__deleteFiles::arg1 = arg1;
	}
	return _p;
}

inline ns1__deleteFiles * soap_new_set_ns1__deleteFiles(
	struct soap *soap,
	char *arg0,
	int __sizearg1,
	char **arg1)
{
	ns1__deleteFiles *_p = soap_new_ns1__deleteFiles(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteFiles::arg0 = arg0;
		_p->ns1__deleteFiles::__sizearg1 = __sizearg1;
		_p->ns1__deleteFiles::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__deleteFiles(struct soap *soap, ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFiles", p->soap_type() == SOAP_TYPE_ns1__deleteFiles ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteFiles(struct soap *soap, const char *URL, ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFiles", p->soap_type() == SOAP_TYPE_ns1__deleteFiles ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteFiles(struct soap *soap, const char *URL, ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFiles", p->soap_type() == SOAP_TYPE_ns1__deleteFiles ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteFiles * SOAP_FMAC4 soap_get_ns1__deleteFiles(struct soap*, ns1__deleteFiles *, const char*, const char*);

inline int soap_read_ns1__deleteFiles(struct soap *soap, ns1__deleteFiles *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteFiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteFiles(struct soap *soap, const char *URL, ns1__deleteFiles *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteFiles(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteFiles(struct soap *soap, ns1__deleteFiles *p)
{
	if (soap_read_ns1__deleteFiles(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__uploadFileResponse_DEFINED
#define SOAP_TYPE_ns1__uploadFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__uploadFileResponse(struct soap*, const char*, int, const ns1__uploadFileResponse *, const char*);
SOAP_FMAC3 ns1__uploadFileResponse * SOAP_FMAC4 soap_in_ns1__uploadFileResponse(struct soap*, const char*, ns1__uploadFileResponse *, const char*);
SOAP_FMAC1 ns1__uploadFileResponse * SOAP_FMAC2 soap_instantiate_ns1__uploadFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__uploadFileResponse * soap_new_ns1__uploadFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__uploadFileResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__uploadFileResponse * soap_new_req_ns1__uploadFileResponse(
	struct soap *soap)
{
	ns1__uploadFileResponse *_p = soap_new_ns1__uploadFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__uploadFileResponse * soap_new_set_ns1__uploadFileResponse(
	struct soap *soap)
{
	ns1__uploadFileResponse *_p = soap_new_ns1__uploadFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__uploadFileResponse(struct soap *soap, ns1__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFileResponse", p->soap_type() == SOAP_TYPE_ns1__uploadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__uploadFileResponse(struct soap *soap, const char *URL, ns1__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFileResponse", p->soap_type() == SOAP_TYPE_ns1__uploadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__uploadFileResponse(struct soap *soap, const char *URL, ns1__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFileResponse", p->soap_type() == SOAP_TYPE_ns1__uploadFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__uploadFileResponse * SOAP_FMAC4 soap_get_ns1__uploadFileResponse(struct soap*, ns1__uploadFileResponse *, const char*, const char*);

inline int soap_read_ns1__uploadFileResponse(struct soap *soap, ns1__uploadFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__uploadFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__uploadFileResponse(struct soap *soap, const char *URL, ns1__uploadFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__uploadFileResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__uploadFileResponse(struct soap *soap, ns1__uploadFileResponse *p)
{
	if (soap_read_ns1__uploadFileResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__uploadFile_DEFINED
#define SOAP_TYPE_ns1__uploadFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__uploadFile(struct soap*, const char*, int, const ns1__uploadFile *, const char*);
SOAP_FMAC3 ns1__uploadFile * SOAP_FMAC4 soap_in_ns1__uploadFile(struct soap*, const char*, ns1__uploadFile *, const char*);
SOAP_FMAC1 ns1__uploadFile * SOAP_FMAC2 soap_instantiate_ns1__uploadFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__uploadFile * soap_new_ns1__uploadFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__uploadFile(soap, n, NULL, NULL, NULL);
}

inline ns1__uploadFile * soap_new_req_ns1__uploadFile(
	struct soap *soap)
{
	ns1__uploadFile *_p = soap_new_ns1__uploadFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__uploadFile * soap_new_set_ns1__uploadFile(
	struct soap *soap,
	char *arg0,
	char *arg1,
	xsd__base64Binary *arg2)
{
	ns1__uploadFile *_p = soap_new_ns1__uploadFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__uploadFile::arg0 = arg0;
		_p->ns1__uploadFile::arg1 = arg1;
		_p->ns1__uploadFile::arg2 = arg2;
	}
	return _p;
}

inline int soap_write_ns1__uploadFile(struct soap *soap, ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFile", p->soap_type() == SOAP_TYPE_ns1__uploadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__uploadFile(struct soap *soap, const char *URL, ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFile", p->soap_type() == SOAP_TYPE_ns1__uploadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__uploadFile(struct soap *soap, const char *URL, ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:uploadFile", p->soap_type() == SOAP_TYPE_ns1__uploadFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__uploadFile * SOAP_FMAC4 soap_get_ns1__uploadFile(struct soap*, ns1__uploadFile *, const char*, const char*);

inline int soap_read_ns1__uploadFile(struct soap *soap, ns1__uploadFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__uploadFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__uploadFile(struct soap *soap, const char *URL, ns1__uploadFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__uploadFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__uploadFile(struct soap *soap, ns1__uploadFile *p)
{
	if (soap_read_ns1__uploadFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBucketNamesResponse_DEFINED
#define SOAP_TYPE_ns1__getBucketNamesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketNamesResponse(struct soap*, const char*, int, const ns1__getBucketNamesResponse *, const char*);
SOAP_FMAC3 ns1__getBucketNamesResponse * SOAP_FMAC4 soap_in_ns1__getBucketNamesResponse(struct soap*, const char*, ns1__getBucketNamesResponse *, const char*);
SOAP_FMAC1 ns1__getBucketNamesResponse * SOAP_FMAC2 soap_instantiate_ns1__getBucketNamesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getBucketNamesResponse * soap_new_ns1__getBucketNamesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBucketNamesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getBucketNamesResponse * soap_new_req_ns1__getBucketNamesResponse(
	struct soap *soap,
	int __sizereturn_,
	char **return_)
{
	ns1__getBucketNamesResponse *_p = soap_new_ns1__getBucketNamesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getBucketNamesResponse::__sizereturn_ = __sizereturn_;
		_p->ns1__getBucketNamesResponse::return_ = return_;
	}
	return _p;
}

inline ns1__getBucketNamesResponse * soap_new_set_ns1__getBucketNamesResponse(
	struct soap *soap,
	int __sizereturn_,
	char **return_)
{
	ns1__getBucketNamesResponse *_p = soap_new_ns1__getBucketNamesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getBucketNamesResponse::__sizereturn_ = __sizereturn_;
		_p->ns1__getBucketNamesResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getBucketNamesResponse(struct soap *soap, ns1__getBucketNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBucketNamesResponse(struct soap *soap, const char *URL, ns1__getBucketNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBucketNamesResponse(struct soap *soap, const char *URL, ns1__getBucketNamesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNamesResponse", p->soap_type() == SOAP_TYPE_ns1__getBucketNamesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getBucketNamesResponse * SOAP_FMAC4 soap_get_ns1__getBucketNamesResponse(struct soap*, ns1__getBucketNamesResponse *, const char*, const char*);

inline int soap_read_ns1__getBucketNamesResponse(struct soap *soap, ns1__getBucketNamesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getBucketNamesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBucketNamesResponse(struct soap *soap, const char *URL, ns1__getBucketNamesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBucketNamesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBucketNamesResponse(struct soap *soap, ns1__getBucketNamesResponse *p)
{
	if (soap_read_ns1__getBucketNamesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBucketNames_DEFINED
#define SOAP_TYPE_ns1__getBucketNames_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBucketNames(struct soap*, const char*, int, const ns1__getBucketNames *, const char*);
SOAP_FMAC3 ns1__getBucketNames * SOAP_FMAC4 soap_in_ns1__getBucketNames(struct soap*, const char*, ns1__getBucketNames *, const char*);
SOAP_FMAC1 ns1__getBucketNames * SOAP_FMAC2 soap_instantiate_ns1__getBucketNames(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getBucketNames * soap_new_ns1__getBucketNames(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBucketNames(soap, n, NULL, NULL, NULL);
}

inline ns1__getBucketNames * soap_new_req_ns1__getBucketNames(
	struct soap *soap)
{
	ns1__getBucketNames *_p = soap_new_ns1__getBucketNames(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getBucketNames * soap_new_set_ns1__getBucketNames(
	struct soap *soap)
{
	ns1__getBucketNames *_p = soap_new_ns1__getBucketNames(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__getBucketNames(struct soap *soap, ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNames", p->soap_type() == SOAP_TYPE_ns1__getBucketNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBucketNames(struct soap *soap, const char *URL, ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNames", p->soap_type() == SOAP_TYPE_ns1__getBucketNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBucketNames(struct soap *soap, const char *URL, ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getBucketNames", p->soap_type() == SOAP_TYPE_ns1__getBucketNames ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getBucketNames * SOAP_FMAC4 soap_get_ns1__getBucketNames(struct soap*, ns1__getBucketNames *, const char*, const char*);

inline int soap_read_ns1__getBucketNames(struct soap *soap, ns1__getBucketNames *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getBucketNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBucketNames(struct soap *soap, const char *URL, ns1__getBucketNames *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBucketNames(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBucketNames(struct soap *soap, ns1__getBucketNames *p)
{
	if (soap_read_ns1__getBucketNames(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteOneFileResponse_DEFINED
#define SOAP_TYPE_ns1__deleteOneFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteOneFileResponse(struct soap*, const char*, int, const ns1__deleteOneFileResponse *, const char*);
SOAP_FMAC3 ns1__deleteOneFileResponse * SOAP_FMAC4 soap_in_ns1__deleteOneFileResponse(struct soap*, const char*, ns1__deleteOneFileResponse *, const char*);
SOAP_FMAC1 ns1__deleteOneFileResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteOneFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteOneFileResponse * soap_new_ns1__deleteOneFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteOneFileResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteOneFileResponse * soap_new_req_ns1__deleteOneFileResponse(
	struct soap *soap)
{
	ns1__deleteOneFileResponse *_p = soap_new_ns1__deleteOneFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteOneFileResponse * soap_new_set_ns1__deleteOneFileResponse(
	struct soap *soap)
{
	ns1__deleteOneFileResponse *_p = soap_new_ns1__deleteOneFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__deleteOneFileResponse(struct soap *soap, ns1__deleteOneFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteOneFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteOneFileResponse(struct soap *soap, const char *URL, ns1__deleteOneFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteOneFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteOneFileResponse(struct soap *soap, const char *URL, ns1__deleteOneFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFileResponse", p->soap_type() == SOAP_TYPE_ns1__deleteOneFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteOneFileResponse * SOAP_FMAC4 soap_get_ns1__deleteOneFileResponse(struct soap*, ns1__deleteOneFileResponse *, const char*, const char*);

inline int soap_read_ns1__deleteOneFileResponse(struct soap *soap, ns1__deleteOneFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteOneFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteOneFileResponse(struct soap *soap, const char *URL, ns1__deleteOneFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteOneFileResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteOneFileResponse(struct soap *soap, ns1__deleteOneFileResponse *p)
{
	if (soap_read_ns1__deleteOneFileResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteOneFile_DEFINED
#define SOAP_TYPE_ns1__deleteOneFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteOneFile(struct soap*, const char*, int, const ns1__deleteOneFile *, const char*);
SOAP_FMAC3 ns1__deleteOneFile * SOAP_FMAC4 soap_in_ns1__deleteOneFile(struct soap*, const char*, ns1__deleteOneFile *, const char*);
SOAP_FMAC1 ns1__deleteOneFile * SOAP_FMAC2 soap_instantiate_ns1__deleteOneFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteOneFile * soap_new_ns1__deleteOneFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteOneFile(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteOneFile * soap_new_req_ns1__deleteOneFile(
	struct soap *soap)
{
	ns1__deleteOneFile *_p = soap_new_ns1__deleteOneFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteOneFile * soap_new_set_ns1__deleteOneFile(
	struct soap *soap,
	char *arg0,
	char *arg1)
{
	ns1__deleteOneFile *_p = soap_new_ns1__deleteOneFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteOneFile::arg0 = arg0;
		_p->ns1__deleteOneFile::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__deleteOneFile(struct soap *soap, ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFile", p->soap_type() == SOAP_TYPE_ns1__deleteOneFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteOneFile(struct soap *soap, const char *URL, ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFile", p->soap_type() == SOAP_TYPE_ns1__deleteOneFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteOneFile(struct soap *soap, const char *URL, ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteOneFile", p->soap_type() == SOAP_TYPE_ns1__deleteOneFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteOneFile * SOAP_FMAC4 soap_get_ns1__deleteOneFile(struct soap*, ns1__deleteOneFile *, const char*, const char*);

inline int soap_read_ns1__deleteOneFile(struct soap *soap, ns1__deleteOneFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteOneFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteOneFile(struct soap *soap, const char *URL, ns1__deleteOneFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteOneFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteOneFile(struct soap *soap, ns1__deleteOneFile *p)
{
	if (soap_read_ns1__deleteOneFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteBucketResponse_DEFINED
#define SOAP_TYPE_ns1__deleteBucketResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBucketResponse(struct soap*, const char*, int, const ns1__deleteBucketResponse *, const char*);
SOAP_FMAC3 ns1__deleteBucketResponse * SOAP_FMAC4 soap_in_ns1__deleteBucketResponse(struct soap*, const char*, ns1__deleteBucketResponse *, const char*);
SOAP_FMAC1 ns1__deleteBucketResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteBucketResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteBucketResponse * soap_new_ns1__deleteBucketResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteBucketResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteBucketResponse * soap_new_req_ns1__deleteBucketResponse(
	struct soap *soap,
	bool return_)
{
	ns1__deleteBucketResponse *_p = soap_new_ns1__deleteBucketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteBucketResponse::return_ = return_;
	}
	return _p;
}

inline ns1__deleteBucketResponse * soap_new_set_ns1__deleteBucketResponse(
	struct soap *soap,
	bool return_)
{
	ns1__deleteBucketResponse *_p = soap_new_ns1__deleteBucketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteBucketResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__deleteBucketResponse(struct soap *soap, ns1__deleteBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucketResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteBucketResponse(struct soap *soap, const char *URL, ns1__deleteBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucketResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteBucketResponse(struct soap *soap, const char *URL, ns1__deleteBucketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucketResponse", p->soap_type() == SOAP_TYPE_ns1__deleteBucketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteBucketResponse * SOAP_FMAC4 soap_get_ns1__deleteBucketResponse(struct soap*, ns1__deleteBucketResponse *, const char*, const char*);

inline int soap_read_ns1__deleteBucketResponse(struct soap *soap, ns1__deleteBucketResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteBucketResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteBucketResponse(struct soap *soap, const char *URL, ns1__deleteBucketResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteBucketResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteBucketResponse(struct soap *soap, ns1__deleteBucketResponse *p)
{
	if (soap_read_ns1__deleteBucketResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteBucket_DEFINED
#define SOAP_TYPE_ns1__deleteBucket_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteBucket(struct soap*, const char*, int, const ns1__deleteBucket *, const char*);
SOAP_FMAC3 ns1__deleteBucket * SOAP_FMAC4 soap_in_ns1__deleteBucket(struct soap*, const char*, ns1__deleteBucket *, const char*);
SOAP_FMAC1 ns1__deleteBucket * SOAP_FMAC2 soap_instantiate_ns1__deleteBucket(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteBucket * soap_new_ns1__deleteBucket(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteBucket(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteBucket * soap_new_req_ns1__deleteBucket(
	struct soap *soap)
{
	ns1__deleteBucket *_p = soap_new_ns1__deleteBucket(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteBucket * soap_new_set_ns1__deleteBucket(
	struct soap *soap,
	char *arg0)
{
	ns1__deleteBucket *_p = soap_new_ns1__deleteBucket(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteBucket::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__deleteBucket(struct soap *soap, ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucket", p->soap_type() == SOAP_TYPE_ns1__deleteBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteBucket(struct soap *soap, const char *URL, ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucket", p->soap_type() == SOAP_TYPE_ns1__deleteBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteBucket(struct soap *soap, const char *URL, ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteBucket", p->soap_type() == SOAP_TYPE_ns1__deleteBucket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteBucket * SOAP_FMAC4 soap_get_ns1__deleteBucket(struct soap*, ns1__deleteBucket *, const char*, const char*);

inline int soap_read_ns1__deleteBucket(struct soap *soap, ns1__deleteBucket *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteBucket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteBucket(struct soap *soap, const char *URL, ns1__deleteBucket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteBucket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteBucket(struct soap *soap, ns1__deleteBucket *p)
{
	if (soap_read_ns1__deleteBucket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFileMessageResponse_DEFINED
#define SOAP_TYPE_ns1__getFileMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileMessageResponse(struct soap*, const char*, int, const ns1__getFileMessageResponse *, const char*);
SOAP_FMAC3 ns1__getFileMessageResponse * SOAP_FMAC4 soap_in_ns1__getFileMessageResponse(struct soap*, const char*, ns1__getFileMessageResponse *, const char*);
SOAP_FMAC1 ns1__getFileMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__getFileMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getFileMessageResponse * soap_new_ns1__getFileMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFileMessageResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getFileMessageResponse * soap_new_req_ns1__getFileMessageResponse(
	struct soap *soap)
{
	ns1__getFileMessageResponse *_p = soap_new_ns1__getFileMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getFileMessageResponse * soap_new_set_ns1__getFileMessageResponse(
	struct soap *soap,
	char *return_)
{
	ns1__getFileMessageResponse *_p = soap_new_ns1__getFileMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getFileMessageResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getFileMessageResponse(struct soap *soap, ns1__getFileMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessageResponse", p->soap_type() == SOAP_TYPE_ns1__getFileMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFileMessageResponse(struct soap *soap, const char *URL, ns1__getFileMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessageResponse", p->soap_type() == SOAP_TYPE_ns1__getFileMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFileMessageResponse(struct soap *soap, const char *URL, ns1__getFileMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessageResponse", p->soap_type() == SOAP_TYPE_ns1__getFileMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getFileMessageResponse * SOAP_FMAC4 soap_get_ns1__getFileMessageResponse(struct soap*, ns1__getFileMessageResponse *, const char*, const char*);

inline int soap_read_ns1__getFileMessageResponse(struct soap *soap, ns1__getFileMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getFileMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFileMessageResponse(struct soap *soap, const char *URL, ns1__getFileMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFileMessageResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFileMessageResponse(struct soap *soap, ns1__getFileMessageResponse *p)
{
	if (soap_read_ns1__getFileMessageResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFileMessage_DEFINED
#define SOAP_TYPE_ns1__getFileMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileMessage(struct soap*, const char*, int, const ns1__getFileMessage *, const char*);
SOAP_FMAC3 ns1__getFileMessage * SOAP_FMAC4 soap_in_ns1__getFileMessage(struct soap*, const char*, ns1__getFileMessage *, const char*);
SOAP_FMAC1 ns1__getFileMessage * SOAP_FMAC2 soap_instantiate_ns1__getFileMessage(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getFileMessage * soap_new_ns1__getFileMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFileMessage(soap, n, NULL, NULL, NULL);
}

inline ns1__getFileMessage * soap_new_req_ns1__getFileMessage(
	struct soap *soap)
{
	ns1__getFileMessage *_p = soap_new_ns1__getFileMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getFileMessage * soap_new_set_ns1__getFileMessage(
	struct soap *soap,
	char *arg0,
	char *arg1)
{
	ns1__getFileMessage *_p = soap_new_ns1__getFileMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getFileMessage::arg0 = arg0;
		_p->ns1__getFileMessage::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__getFileMessage(struct soap *soap, ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessage", p->soap_type() == SOAP_TYPE_ns1__getFileMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFileMessage(struct soap *soap, const char *URL, ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessage", p->soap_type() == SOAP_TYPE_ns1__getFileMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFileMessage(struct soap *soap, const char *URL, ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileMessage", p->soap_type() == SOAP_TYPE_ns1__getFileMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getFileMessage * SOAP_FMAC4 soap_get_ns1__getFileMessage(struct soap*, ns1__getFileMessage *, const char*, const char*);

inline int soap_read_ns1__getFileMessage(struct soap *soap, ns1__getFileMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getFileMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFileMessage(struct soap *soap, const char *URL, ns1__getFileMessage *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFileMessage(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFileMessage(struct soap *soap, ns1__getFileMessage *p)
{
	if (soap_read_ns1__getFileMessage(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteFileByNameResponse_DEFINED
#define SOAP_TYPE_ns1__deleteFileByNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFileByNameResponse(struct soap*, const char*, int, const ns1__deleteFileByNameResponse *, const char*);
SOAP_FMAC3 ns1__deleteFileByNameResponse * SOAP_FMAC4 soap_in_ns1__deleteFileByNameResponse(struct soap*, const char*, ns1__deleteFileByNameResponse *, const char*);
SOAP_FMAC1 ns1__deleteFileByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFileByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteFileByNameResponse * soap_new_ns1__deleteFileByNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteFileByNameResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteFileByNameResponse * soap_new_req_ns1__deleteFileByNameResponse(
	struct soap *soap)
{
	ns1__deleteFileByNameResponse *_p = soap_new_ns1__deleteFileByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteFileByNameResponse * soap_new_set_ns1__deleteFileByNameResponse(
	struct soap *soap)
{
	ns1__deleteFileByNameResponse *_p = soap_new_ns1__deleteFileByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__deleteFileByNameResponse(struct soap *soap, ns1__deleteFileByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByNameResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFileByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteFileByNameResponse(struct soap *soap, const char *URL, ns1__deleteFileByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByNameResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFileByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteFileByNameResponse(struct soap *soap, const char *URL, ns1__deleteFileByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByNameResponse", p->soap_type() == SOAP_TYPE_ns1__deleteFileByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteFileByNameResponse * SOAP_FMAC4 soap_get_ns1__deleteFileByNameResponse(struct soap*, ns1__deleteFileByNameResponse *, const char*, const char*);

inline int soap_read_ns1__deleteFileByNameResponse(struct soap *soap, ns1__deleteFileByNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteFileByNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteFileByNameResponse(struct soap *soap, const char *URL, ns1__deleteFileByNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteFileByNameResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteFileByNameResponse(struct soap *soap, ns1__deleteFileByNameResponse *p)
{
	if (soap_read_ns1__deleteFileByNameResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__deleteFileByName_DEFINED
#define SOAP_TYPE_ns1__deleteFileByName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFileByName(struct soap*, const char*, int, const ns1__deleteFileByName *, const char*);
SOAP_FMAC3 ns1__deleteFileByName * SOAP_FMAC4 soap_in_ns1__deleteFileByName(struct soap*, const char*, ns1__deleteFileByName *, const char*);
SOAP_FMAC1 ns1__deleteFileByName * SOAP_FMAC2 soap_instantiate_ns1__deleteFileByName(struct soap*, int, const char*, const char*, size_t*);

inline ns1__deleteFileByName * soap_new_ns1__deleteFileByName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__deleteFileByName(soap, n, NULL, NULL, NULL);
}

inline ns1__deleteFileByName * soap_new_req_ns1__deleteFileByName(
	struct soap *soap)
{
	ns1__deleteFileByName *_p = soap_new_ns1__deleteFileByName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__deleteFileByName * soap_new_set_ns1__deleteFileByName(
	struct soap *soap,
	char *arg0)
{
	ns1__deleteFileByName *_p = soap_new_ns1__deleteFileByName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__deleteFileByName::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__deleteFileByName(struct soap *soap, ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByName", p->soap_type() == SOAP_TYPE_ns1__deleteFileByName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__deleteFileByName(struct soap *soap, const char *URL, ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByName", p->soap_type() == SOAP_TYPE_ns1__deleteFileByName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__deleteFileByName(struct soap *soap, const char *URL, ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:deleteFileByName", p->soap_type() == SOAP_TYPE_ns1__deleteFileByName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__deleteFileByName * SOAP_FMAC4 soap_get_ns1__deleteFileByName(struct soap*, ns1__deleteFileByName *, const char*, const char*);

inline int soap_read_ns1__deleteFileByName(struct soap *soap, ns1__deleteFileByName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__deleteFileByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__deleteFileByName(struct soap *soap, const char *URL, ns1__deleteFileByName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__deleteFileByName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__deleteFileByName(struct soap *soap, ns1__deleteFileByName *p)
{
	if (soap_read_ns1__deleteFileByName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Exception_DEFINED
#define SOAP_TYPE_ns1__Exception_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Exception(struct soap*, const char*, int, const ns1__Exception *, const char*);
SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_in_ns1__Exception(struct soap*, const char*, ns1__Exception *, const char*);
SOAP_FMAC1 ns1__Exception * SOAP_FMAC2 soap_instantiate_ns1__Exception(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Exception * soap_new_ns1__Exception(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Exception(soap, n, NULL, NULL, NULL);
}

inline ns1__Exception * soap_new_req_ns1__Exception(
	struct soap *soap)
{
	ns1__Exception *_p = soap_new_ns1__Exception(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Exception * soap_new_set_ns1__Exception(
	struct soap *soap,
	char *message)
{
	ns1__Exception *_p = soap_new_ns1__Exception(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Exception::message = message;
	}
	return _p;
}

inline int soap_write_ns1__Exception(struct soap *soap, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_get_ns1__Exception(struct soap*, ns1__Exception *, const char*, const char*);

inline int soap_read_ns1__Exception(struct soap *soap, ns1__Exception *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Exception(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Exception(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Exception(struct soap *soap, ns1__Exception *p)
{
	if (soap_read_ns1__Exception(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFileDetailResponse_DEFINED
#define SOAP_TYPE_ns1__getFileDetailResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileDetailResponse(struct soap*, const char*, int, const ns1__getFileDetailResponse *, const char*);
SOAP_FMAC3 ns1__getFileDetailResponse * SOAP_FMAC4 soap_in_ns1__getFileDetailResponse(struct soap*, const char*, ns1__getFileDetailResponse *, const char*);
SOAP_FMAC1 ns1__getFileDetailResponse * SOAP_FMAC2 soap_instantiate_ns1__getFileDetailResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getFileDetailResponse * soap_new_ns1__getFileDetailResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFileDetailResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getFileDetailResponse * soap_new_req_ns1__getFileDetailResponse(
	struct soap *soap)
{
	ns1__getFileDetailResponse *_p = soap_new_ns1__getFileDetailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getFileDetailResponse * soap_new_set_ns1__getFileDetailResponse(
	struct soap *soap,
	char *return_)
{
	ns1__getFileDetailResponse *_p = soap_new_ns1__getFileDetailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getFileDetailResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getFileDetailResponse(struct soap *soap, ns1__getFileDetailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetailResponse", p->soap_type() == SOAP_TYPE_ns1__getFileDetailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFileDetailResponse(struct soap *soap, const char *URL, ns1__getFileDetailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetailResponse", p->soap_type() == SOAP_TYPE_ns1__getFileDetailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFileDetailResponse(struct soap *soap, const char *URL, ns1__getFileDetailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetailResponse", p->soap_type() == SOAP_TYPE_ns1__getFileDetailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getFileDetailResponse * SOAP_FMAC4 soap_get_ns1__getFileDetailResponse(struct soap*, ns1__getFileDetailResponse *, const char*, const char*);

inline int soap_read_ns1__getFileDetailResponse(struct soap *soap, ns1__getFileDetailResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getFileDetailResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFileDetailResponse(struct soap *soap, const char *URL, ns1__getFileDetailResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFileDetailResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFileDetailResponse(struct soap *soap, ns1__getFileDetailResponse *p)
{
	if (soap_read_ns1__getFileDetailResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFileDetail_DEFINED
#define SOAP_TYPE_ns1__getFileDetail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFileDetail(struct soap*, const char*, int, const ns1__getFileDetail *, const char*);
SOAP_FMAC3 ns1__getFileDetail * SOAP_FMAC4 soap_in_ns1__getFileDetail(struct soap*, const char*, ns1__getFileDetail *, const char*);
SOAP_FMAC1 ns1__getFileDetail * SOAP_FMAC2 soap_instantiate_ns1__getFileDetail(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getFileDetail * soap_new_ns1__getFileDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFileDetail(soap, n, NULL, NULL, NULL);
}

inline ns1__getFileDetail * soap_new_req_ns1__getFileDetail(
	struct soap *soap)
{
	ns1__getFileDetail *_p = soap_new_ns1__getFileDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getFileDetail * soap_new_set_ns1__getFileDetail(
	struct soap *soap,
	char *arg0)
{
	ns1__getFileDetail *_p = soap_new_ns1__getFileDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getFileDetail::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__getFileDetail(struct soap *soap, ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetail", p->soap_type() == SOAP_TYPE_ns1__getFileDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFileDetail(struct soap *soap, const char *URL, ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetail", p->soap_type() == SOAP_TYPE_ns1__getFileDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFileDetail(struct soap *soap, const char *URL, ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getFileDetail", p->soap_type() == SOAP_TYPE_ns1__getFileDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getFileDetail * SOAP_FMAC4 soap_get_ns1__getFileDetail(struct soap*, ns1__getFileDetail *, const char*, const char*);

inline int soap_read_ns1__getFileDetail(struct soap *soap, ns1__getFileDetail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getFileDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFileDetail(struct soap *soap, const char *URL, ns1__getFileDetail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFileDetail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFileDetail(struct soap *soap, ns1__getFileDetail *p)
{
	if (soap_read_ns1__getFileDetail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__downLoadFile_DEFINED
#define SOAP_TYPE___ns1__downLoadFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__downLoadFile(struct soap*, struct __ns1__downLoadFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__downLoadFile(struct soap*, const struct __ns1__downLoadFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__downLoadFile(struct soap*, const char*, int, const struct __ns1__downLoadFile *, const char*);
SOAP_FMAC3 struct __ns1__downLoadFile * SOAP_FMAC4 soap_in___ns1__downLoadFile(struct soap*, const char*, struct __ns1__downLoadFile *, const char*);
SOAP_FMAC1 struct __ns1__downLoadFile * SOAP_FMAC2 soap_instantiate___ns1__downLoadFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__downLoadFile * soap_new___ns1__downLoadFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__downLoadFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__downLoadFile * soap_new_req___ns1__downLoadFile(
	struct soap *soap)
{
	struct __ns1__downLoadFile *_p = soap_new___ns1__downLoadFile(soap);
	if (_p)
	{	soap_default___ns1__downLoadFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__downLoadFile * soap_new_set___ns1__downLoadFile(
	struct soap *soap,
	ns1__downLoadFile *ns1__downLoadFile_)
{
	struct __ns1__downLoadFile *_p = soap_new___ns1__downLoadFile(soap);
	if (_p)
	{	soap_default___ns1__downLoadFile(soap, _p);
		_p->ns1__downLoadFile_ = ns1__downLoadFile_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__downLoadFile(struct soap*, const struct __ns1__downLoadFile *, const char*, const char*);

inline int soap_write___ns1__downLoadFile(struct soap *soap, struct __ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__downLoadFile(soap, p), 0) || soap_put___ns1__downLoadFile(soap, p, "-ns1:downLoadFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__downLoadFile(struct soap *soap, const char *URL, struct __ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__downLoadFile(soap, p), 0) || soap_put___ns1__downLoadFile(soap, p, "-ns1:downLoadFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__downLoadFile(struct soap *soap, const char *URL, struct __ns1__downLoadFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__downLoadFile(soap, p), 0) || soap_put___ns1__downLoadFile(soap, p, "-ns1:downLoadFile", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__downLoadFile * SOAP_FMAC4 soap_get___ns1__downLoadFile(struct soap*, struct __ns1__downLoadFile *, const char*, const char*);

inline int soap_read___ns1__downLoadFile(struct soap *soap, struct __ns1__downLoadFile *p)
{
	if (p)
	{	soap_default___ns1__downLoadFile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__downLoadFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__downLoadFile(struct soap *soap, const char *URL, struct __ns1__downLoadFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__downLoadFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__downLoadFile(struct soap *soap, struct __ns1__downLoadFile *p)
{
	if (soap_read___ns1__downLoadFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__uploadFile_DEFINED
#define SOAP_TYPE___ns1__uploadFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadFile(struct soap*, struct __ns1__uploadFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadFile(struct soap*, const struct __ns1__uploadFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadFile(struct soap*, const char*, int, const struct __ns1__uploadFile *, const char*);
SOAP_FMAC3 struct __ns1__uploadFile * SOAP_FMAC4 soap_in___ns1__uploadFile(struct soap*, const char*, struct __ns1__uploadFile *, const char*);
SOAP_FMAC1 struct __ns1__uploadFile * SOAP_FMAC2 soap_instantiate___ns1__uploadFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__uploadFile * soap_new___ns1__uploadFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__uploadFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__uploadFile * soap_new_req___ns1__uploadFile(
	struct soap *soap)
{
	struct __ns1__uploadFile *_p = soap_new___ns1__uploadFile(soap);
	if (_p)
	{	soap_default___ns1__uploadFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__uploadFile * soap_new_set___ns1__uploadFile(
	struct soap *soap,
	ns1__uploadFile *ns1__uploadFile_)
{
	struct __ns1__uploadFile *_p = soap_new___ns1__uploadFile(soap);
	if (_p)
	{	soap_default___ns1__uploadFile(soap, _p);
		_p->ns1__uploadFile_ = ns1__uploadFile_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadFile(struct soap*, const struct __ns1__uploadFile *, const char*, const char*);

inline int soap_write___ns1__uploadFile(struct soap *soap, struct __ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__uploadFile(soap, p), 0) || soap_put___ns1__uploadFile(soap, p, "-ns1:uploadFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__uploadFile(struct soap *soap, const char *URL, struct __ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__uploadFile(soap, p), 0) || soap_put___ns1__uploadFile(soap, p, "-ns1:uploadFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__uploadFile(struct soap *soap, const char *URL, struct __ns1__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__uploadFile(soap, p), 0) || soap_put___ns1__uploadFile(soap, p, "-ns1:uploadFile", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__uploadFile * SOAP_FMAC4 soap_get___ns1__uploadFile(struct soap*, struct __ns1__uploadFile *, const char*, const char*);

inline int soap_read___ns1__uploadFile(struct soap *soap, struct __ns1__uploadFile *p)
{
	if (p)
	{	soap_default___ns1__uploadFile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__uploadFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__uploadFile(struct soap *soap, const char *URL, struct __ns1__uploadFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__uploadFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__uploadFile(struct soap *soap, struct __ns1__uploadFile *p)
{
	if (soap_read___ns1__uploadFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteFileByName_DEFINED
#define SOAP_TYPE___ns1__deleteFileByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteFileByName(struct soap*, struct __ns1__deleteFileByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteFileByName(struct soap*, const struct __ns1__deleteFileByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteFileByName(struct soap*, const char*, int, const struct __ns1__deleteFileByName *, const char*);
SOAP_FMAC3 struct __ns1__deleteFileByName * SOAP_FMAC4 soap_in___ns1__deleteFileByName(struct soap*, const char*, struct __ns1__deleteFileByName *, const char*);
SOAP_FMAC1 struct __ns1__deleteFileByName * SOAP_FMAC2 soap_instantiate___ns1__deleteFileByName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteFileByName * soap_new___ns1__deleteFileByName(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteFileByName(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteFileByName * soap_new_req___ns1__deleteFileByName(
	struct soap *soap)
{
	struct __ns1__deleteFileByName *_p = soap_new___ns1__deleteFileByName(soap);
	if (_p)
	{	soap_default___ns1__deleteFileByName(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteFileByName * soap_new_set___ns1__deleteFileByName(
	struct soap *soap,
	ns1__deleteFileByName *ns1__deleteFileByName_)
{
	struct __ns1__deleteFileByName *_p = soap_new___ns1__deleteFileByName(soap);
	if (_p)
	{	soap_default___ns1__deleteFileByName(soap, _p);
		_p->ns1__deleteFileByName_ = ns1__deleteFileByName_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteFileByName(struct soap*, const struct __ns1__deleteFileByName *, const char*, const char*);

inline int soap_write___ns1__deleteFileByName(struct soap *soap, struct __ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteFileByName(soap, p), 0) || soap_put___ns1__deleteFileByName(soap, p, "-ns1:deleteFileByName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteFileByName(struct soap *soap, const char *URL, struct __ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteFileByName(soap, p), 0) || soap_put___ns1__deleteFileByName(soap, p, "-ns1:deleteFileByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteFileByName(struct soap *soap, const char *URL, struct __ns1__deleteFileByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteFileByName(soap, p), 0) || soap_put___ns1__deleteFileByName(soap, p, "-ns1:deleteFileByName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteFileByName * SOAP_FMAC4 soap_get___ns1__deleteFileByName(struct soap*, struct __ns1__deleteFileByName *, const char*, const char*);

inline int soap_read___ns1__deleteFileByName(struct soap *soap, struct __ns1__deleteFileByName *p)
{
	if (p)
	{	soap_default___ns1__deleteFileByName(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteFileByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteFileByName(struct soap *soap, const char *URL, struct __ns1__deleteFileByName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__deleteFileByName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__deleteFileByName(struct soap *soap, struct __ns1__deleteFileByName *p)
{
	if (soap_read___ns1__deleteFileByName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteBatchFile_DEFINED
#define SOAP_TYPE___ns1__deleteBatchFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteBatchFile(struct soap*, struct __ns1__deleteBatchFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteBatchFile(struct soap*, const struct __ns1__deleteBatchFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteBatchFile(struct soap*, const char*, int, const struct __ns1__deleteBatchFile *, const char*);
SOAP_FMAC3 struct __ns1__deleteBatchFile * SOAP_FMAC4 soap_in___ns1__deleteBatchFile(struct soap*, const char*, struct __ns1__deleteBatchFile *, const char*);
SOAP_FMAC1 struct __ns1__deleteBatchFile * SOAP_FMAC2 soap_instantiate___ns1__deleteBatchFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteBatchFile * soap_new___ns1__deleteBatchFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteBatchFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteBatchFile * soap_new_req___ns1__deleteBatchFile(
	struct soap *soap)
{
	struct __ns1__deleteBatchFile *_p = soap_new___ns1__deleteBatchFile(soap);
	if (_p)
	{	soap_default___ns1__deleteBatchFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteBatchFile * soap_new_set___ns1__deleteBatchFile(
	struct soap *soap,
	ns1__deleteBatchFile *ns1__deleteBatchFile_)
{
	struct __ns1__deleteBatchFile *_p = soap_new___ns1__deleteBatchFile(soap);
	if (_p)
	{	soap_default___ns1__deleteBatchFile(soap, _p);
		_p->ns1__deleteBatchFile_ = ns1__deleteBatchFile_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteBatchFile(struct soap*, const struct __ns1__deleteBatchFile *, const char*, const char*);

inline int soap_write___ns1__deleteBatchFile(struct soap *soap, struct __ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteBatchFile(soap, p), 0) || soap_put___ns1__deleteBatchFile(soap, p, "-ns1:deleteBatchFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteBatchFile(struct soap *soap, const char *URL, struct __ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteBatchFile(soap, p), 0) || soap_put___ns1__deleteBatchFile(soap, p, "-ns1:deleteBatchFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteBatchFile(struct soap *soap, const char *URL, struct __ns1__deleteBatchFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteBatchFile(soap, p), 0) || soap_put___ns1__deleteBatchFile(soap, p, "-ns1:deleteBatchFile", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteBatchFile * SOAP_FMAC4 soap_get___ns1__deleteBatchFile(struct soap*, struct __ns1__deleteBatchFile *, const char*, const char*);

inline int soap_read___ns1__deleteBatchFile(struct soap *soap, struct __ns1__deleteBatchFile *p)
{
	if (p)
	{	soap_default___ns1__deleteBatchFile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteBatchFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteBatchFile(struct soap *soap, const char *URL, struct __ns1__deleteBatchFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__deleteBatchFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__deleteBatchFile(struct soap *soap, struct __ns1__deleteBatchFile *p)
{
	if (soap_read___ns1__deleteBatchFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteOneFile_DEFINED
#define SOAP_TYPE___ns1__deleteOneFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteOneFile(struct soap*, struct __ns1__deleteOneFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteOneFile(struct soap*, const struct __ns1__deleteOneFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteOneFile(struct soap*, const char*, int, const struct __ns1__deleteOneFile *, const char*);
SOAP_FMAC3 struct __ns1__deleteOneFile * SOAP_FMAC4 soap_in___ns1__deleteOneFile(struct soap*, const char*, struct __ns1__deleteOneFile *, const char*);
SOAP_FMAC1 struct __ns1__deleteOneFile * SOAP_FMAC2 soap_instantiate___ns1__deleteOneFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteOneFile * soap_new___ns1__deleteOneFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteOneFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteOneFile * soap_new_req___ns1__deleteOneFile(
	struct soap *soap)
{
	struct __ns1__deleteOneFile *_p = soap_new___ns1__deleteOneFile(soap);
	if (_p)
	{	soap_default___ns1__deleteOneFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteOneFile * soap_new_set___ns1__deleteOneFile(
	struct soap *soap,
	ns1__deleteOneFile *ns1__deleteOneFile_)
{
	struct __ns1__deleteOneFile *_p = soap_new___ns1__deleteOneFile(soap);
	if (_p)
	{	soap_default___ns1__deleteOneFile(soap, _p);
		_p->ns1__deleteOneFile_ = ns1__deleteOneFile_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteOneFile(struct soap*, const struct __ns1__deleteOneFile *, const char*, const char*);

inline int soap_write___ns1__deleteOneFile(struct soap *soap, struct __ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteOneFile(soap, p), 0) || soap_put___ns1__deleteOneFile(soap, p, "-ns1:deleteOneFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteOneFile(struct soap *soap, const char *URL, struct __ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteOneFile(soap, p), 0) || soap_put___ns1__deleteOneFile(soap, p, "-ns1:deleteOneFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteOneFile(struct soap *soap, const char *URL, struct __ns1__deleteOneFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteOneFile(soap, p), 0) || soap_put___ns1__deleteOneFile(soap, p, "-ns1:deleteOneFile", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteOneFile * SOAP_FMAC4 soap_get___ns1__deleteOneFile(struct soap*, struct __ns1__deleteOneFile *, const char*, const char*);

inline int soap_read___ns1__deleteOneFile(struct soap *soap, struct __ns1__deleteOneFile *p)
{
	if (p)
	{	soap_default___ns1__deleteOneFile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteOneFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteOneFile(struct soap *soap, const char *URL, struct __ns1__deleteOneFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__deleteOneFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__deleteOneFile(struct soap *soap, struct __ns1__deleteOneFile *p)
{
	if (soap_read___ns1__deleteOneFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getFileDetail_DEFINED
#define SOAP_TYPE___ns1__getFileDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getFileDetail(struct soap*, struct __ns1__getFileDetail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getFileDetail(struct soap*, const struct __ns1__getFileDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getFileDetail(struct soap*, const char*, int, const struct __ns1__getFileDetail *, const char*);
SOAP_FMAC3 struct __ns1__getFileDetail * SOAP_FMAC4 soap_in___ns1__getFileDetail(struct soap*, const char*, struct __ns1__getFileDetail *, const char*);
SOAP_FMAC1 struct __ns1__getFileDetail * SOAP_FMAC2 soap_instantiate___ns1__getFileDetail(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getFileDetail * soap_new___ns1__getFileDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getFileDetail(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getFileDetail * soap_new_req___ns1__getFileDetail(
	struct soap *soap)
{
	struct __ns1__getFileDetail *_p = soap_new___ns1__getFileDetail(soap);
	if (_p)
	{	soap_default___ns1__getFileDetail(soap, _p);
	}
	return _p;
}

inline struct __ns1__getFileDetail * soap_new_set___ns1__getFileDetail(
	struct soap *soap,
	ns1__getFileDetail *ns1__getFileDetail_)
{
	struct __ns1__getFileDetail *_p = soap_new___ns1__getFileDetail(soap);
	if (_p)
	{	soap_default___ns1__getFileDetail(soap, _p);
		_p->ns1__getFileDetail_ = ns1__getFileDetail_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getFileDetail(struct soap*, const struct __ns1__getFileDetail *, const char*, const char*);

inline int soap_write___ns1__getFileDetail(struct soap *soap, struct __ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getFileDetail(soap, p), 0) || soap_put___ns1__getFileDetail(soap, p, "-ns1:getFileDetail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getFileDetail(struct soap *soap, const char *URL, struct __ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getFileDetail(soap, p), 0) || soap_put___ns1__getFileDetail(soap, p, "-ns1:getFileDetail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getFileDetail(struct soap *soap, const char *URL, struct __ns1__getFileDetail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getFileDetail(soap, p), 0) || soap_put___ns1__getFileDetail(soap, p, "-ns1:getFileDetail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getFileDetail * SOAP_FMAC4 soap_get___ns1__getFileDetail(struct soap*, struct __ns1__getFileDetail *, const char*, const char*);

inline int soap_read___ns1__getFileDetail(struct soap *soap, struct __ns1__getFileDetail *p)
{
	if (p)
	{	soap_default___ns1__getFileDetail(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getFileDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getFileDetail(struct soap *soap, const char *URL, struct __ns1__getFileDetail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getFileDetail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getFileDetail(struct soap *soap, struct __ns1__getFileDetail *p)
{
	if (soap_read___ns1__getFileDetail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getFileMessage_DEFINED
#define SOAP_TYPE___ns1__getFileMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getFileMessage(struct soap*, struct __ns1__getFileMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getFileMessage(struct soap*, const struct __ns1__getFileMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getFileMessage(struct soap*, const char*, int, const struct __ns1__getFileMessage *, const char*);
SOAP_FMAC3 struct __ns1__getFileMessage * SOAP_FMAC4 soap_in___ns1__getFileMessage(struct soap*, const char*, struct __ns1__getFileMessage *, const char*);
SOAP_FMAC1 struct __ns1__getFileMessage * SOAP_FMAC2 soap_instantiate___ns1__getFileMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getFileMessage * soap_new___ns1__getFileMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getFileMessage(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getFileMessage * soap_new_req___ns1__getFileMessage(
	struct soap *soap)
{
	struct __ns1__getFileMessage *_p = soap_new___ns1__getFileMessage(soap);
	if (_p)
	{	soap_default___ns1__getFileMessage(soap, _p);
	}
	return _p;
}

inline struct __ns1__getFileMessage * soap_new_set___ns1__getFileMessage(
	struct soap *soap,
	ns1__getFileMessage *ns1__getFileMessage_)
{
	struct __ns1__getFileMessage *_p = soap_new___ns1__getFileMessage(soap);
	if (_p)
	{	soap_default___ns1__getFileMessage(soap, _p);
		_p->ns1__getFileMessage_ = ns1__getFileMessage_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getFileMessage(struct soap*, const struct __ns1__getFileMessage *, const char*, const char*);

inline int soap_write___ns1__getFileMessage(struct soap *soap, struct __ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getFileMessage(soap, p), 0) || soap_put___ns1__getFileMessage(soap, p, "-ns1:getFileMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getFileMessage(struct soap *soap, const char *URL, struct __ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getFileMessage(soap, p), 0) || soap_put___ns1__getFileMessage(soap, p, "-ns1:getFileMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getFileMessage(struct soap *soap, const char *URL, struct __ns1__getFileMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getFileMessage(soap, p), 0) || soap_put___ns1__getFileMessage(soap, p, "-ns1:getFileMessage", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getFileMessage * SOAP_FMAC4 soap_get___ns1__getFileMessage(struct soap*, struct __ns1__getFileMessage *, const char*, const char*);

inline int soap_read___ns1__getFileMessage(struct soap *soap, struct __ns1__getFileMessage *p)
{
	if (p)
	{	soap_default___ns1__getFileMessage(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getFileMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getFileMessage(struct soap *soap, const char *URL, struct __ns1__getFileMessage *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getFileMessage(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getFileMessage(struct soap *soap, struct __ns1__getFileMessage *p)
{
	if (soap_read___ns1__getFileMessage(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doesFileExists_DEFINED
#define SOAP_TYPE___ns1__doesFileExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doesFileExists(struct soap*, struct __ns1__doesFileExists *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doesFileExists(struct soap*, const struct __ns1__doesFileExists *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doesFileExists(struct soap*, const char*, int, const struct __ns1__doesFileExists *, const char*);
SOAP_FMAC3 struct __ns1__doesFileExists * SOAP_FMAC4 soap_in___ns1__doesFileExists(struct soap*, const char*, struct __ns1__doesFileExists *, const char*);
SOAP_FMAC1 struct __ns1__doesFileExists * SOAP_FMAC2 soap_instantiate___ns1__doesFileExists(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doesFileExists * soap_new___ns1__doesFileExists(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doesFileExists(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doesFileExists * soap_new_req___ns1__doesFileExists(
	struct soap *soap)
{
	struct __ns1__doesFileExists *_p = soap_new___ns1__doesFileExists(soap);
	if (_p)
	{	soap_default___ns1__doesFileExists(soap, _p);
	}
	return _p;
}

inline struct __ns1__doesFileExists * soap_new_set___ns1__doesFileExists(
	struct soap *soap,
	ns1__doesFileExists *ns1__doesFileExists_)
{
	struct __ns1__doesFileExists *_p = soap_new___ns1__doesFileExists(soap);
	if (_p)
	{	soap_default___ns1__doesFileExists(soap, _p);
		_p->ns1__doesFileExists_ = ns1__doesFileExists_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doesFileExists(struct soap*, const struct __ns1__doesFileExists *, const char*, const char*);

inline int soap_write___ns1__doesFileExists(struct soap *soap, struct __ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doesFileExists(soap, p), 0) || soap_put___ns1__doesFileExists(soap, p, "-ns1:doesFileExists", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doesFileExists(struct soap *soap, const char *URL, struct __ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doesFileExists(soap, p), 0) || soap_put___ns1__doesFileExists(soap, p, "-ns1:doesFileExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doesFileExists(struct soap *soap, const char *URL, struct __ns1__doesFileExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doesFileExists(soap, p), 0) || soap_put___ns1__doesFileExists(soap, p, "-ns1:doesFileExists", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doesFileExists * SOAP_FMAC4 soap_get___ns1__doesFileExists(struct soap*, struct __ns1__doesFileExists *, const char*, const char*);

inline int soap_read___ns1__doesFileExists(struct soap *soap, struct __ns1__doesFileExists *p)
{
	if (p)
	{	soap_default___ns1__doesFileExists(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doesFileExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doesFileExists(struct soap *soap, const char *URL, struct __ns1__doesFileExists *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doesFileExists(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doesFileExists(struct soap *soap, struct __ns1__doesFileExists *p)
{
	if (soap_read___ns1__doesFileExists(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getBucketFileNames_DEFINED
#define SOAP_TYPE___ns1__getBucketFileNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getBucketFileNames(struct soap*, struct __ns1__getBucketFileNames *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getBucketFileNames(struct soap*, const struct __ns1__getBucketFileNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getBucketFileNames(struct soap*, const char*, int, const struct __ns1__getBucketFileNames *, const char*);
SOAP_FMAC3 struct __ns1__getBucketFileNames * SOAP_FMAC4 soap_in___ns1__getBucketFileNames(struct soap*, const char*, struct __ns1__getBucketFileNames *, const char*);
SOAP_FMAC1 struct __ns1__getBucketFileNames * SOAP_FMAC2 soap_instantiate___ns1__getBucketFileNames(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getBucketFileNames * soap_new___ns1__getBucketFileNames(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getBucketFileNames(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getBucketFileNames * soap_new_req___ns1__getBucketFileNames(
	struct soap *soap)
{
	struct __ns1__getBucketFileNames *_p = soap_new___ns1__getBucketFileNames(soap);
	if (_p)
	{	soap_default___ns1__getBucketFileNames(soap, _p);
	}
	return _p;
}

inline struct __ns1__getBucketFileNames * soap_new_set___ns1__getBucketFileNames(
	struct soap *soap,
	ns1__getBucketFileNames *ns1__getBucketFileNames_)
{
	struct __ns1__getBucketFileNames *_p = soap_new___ns1__getBucketFileNames(soap);
	if (_p)
	{	soap_default___ns1__getBucketFileNames(soap, _p);
		_p->ns1__getBucketFileNames_ = ns1__getBucketFileNames_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getBucketFileNames(struct soap*, const struct __ns1__getBucketFileNames *, const char*, const char*);

inline int soap_write___ns1__getBucketFileNames(struct soap *soap, struct __ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getBucketFileNames(soap, p), 0) || soap_put___ns1__getBucketFileNames(soap, p, "-ns1:getBucketFileNames", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getBucketFileNames(struct soap *soap, const char *URL, struct __ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getBucketFileNames(soap, p), 0) || soap_put___ns1__getBucketFileNames(soap, p, "-ns1:getBucketFileNames", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getBucketFileNames(struct soap *soap, const char *URL, struct __ns1__getBucketFileNames const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getBucketFileNames(soap, p), 0) || soap_put___ns1__getBucketFileNames(soap, p, "-ns1:getBucketFileNames", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getBucketFileNames * SOAP_FMAC4 soap_get___ns1__getBucketFileNames(struct soap*, struct __ns1__getBucketFileNames *, const char*, const char*);

inline int soap_read___ns1__getBucketFileNames(struct soap *soap, struct __ns1__getBucketFileNames *p)
{
	if (p)
	{	soap_default___ns1__getBucketFileNames(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getBucketFileNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getBucketFileNames(struct soap *soap, const char *URL, struct __ns1__getBucketFileNames *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getBucketFileNames(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getBucketFileNames(struct soap *soap, struct __ns1__getBucketFileNames *p)
{
	if (soap_read___ns1__getBucketFileNames(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getBucketNames_DEFINED
#define SOAP_TYPE___ns1__getBucketNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getBucketNames(struct soap*, struct __ns1__getBucketNames *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getBucketNames(struct soap*, const struct __ns1__getBucketNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getBucketNames(struct soap*, const char*, int, const struct __ns1__getBucketNames *, const char*);
SOAP_FMAC3 struct __ns1__getBucketNames * SOAP_FMAC4 soap_in___ns1__getBucketNames(struct soap*, const char*, struct __ns1__getBucketNames *, const char*);
SOAP_FMAC1 struct __ns1__getBucketNames * SOAP_FMAC2 soap_instantiate___ns1__getBucketNames(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getBucketNames * soap_new___ns1__getBucketNames(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getBucketNames(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getBucketNames * soap_new_req___ns1__getBucketNames(
	struct soap *soap)
{
	struct __ns1__getBucketNames *_p = soap_new___ns1__getBucketNames(soap);
	if (_p)
	{	soap_default___ns1__getBucketNames(soap, _p);
	}
	return _p;
}

inline struct __ns1__getBucketNames * soap_new_set___ns1__getBucketNames(
	struct soap *soap,
	ns1__getBucketNames *ns1__getBucketNames_)
{
	struct __ns1__getBucketNames *_p = soap_new___ns1__getBucketNames(soap);
	if (_p)
	{	soap_default___ns1__getBucketNames(soap, _p);
		_p->ns1__getBucketNames_ = ns1__getBucketNames_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getBucketNames(struct soap*, const struct __ns1__getBucketNames *, const char*, const char*);

inline int soap_write___ns1__getBucketNames(struct soap *soap, struct __ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getBucketNames(soap, p), 0) || soap_put___ns1__getBucketNames(soap, p, "-ns1:getBucketNames", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getBucketNames(struct soap *soap, const char *URL, struct __ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getBucketNames(soap, p), 0) || soap_put___ns1__getBucketNames(soap, p, "-ns1:getBucketNames", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getBucketNames(struct soap *soap, const char *URL, struct __ns1__getBucketNames const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getBucketNames(soap, p), 0) || soap_put___ns1__getBucketNames(soap, p, "-ns1:getBucketNames", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getBucketNames * SOAP_FMAC4 soap_get___ns1__getBucketNames(struct soap*, struct __ns1__getBucketNames *, const char*, const char*);

inline int soap_read___ns1__getBucketNames(struct soap *soap, struct __ns1__getBucketNames *p)
{
	if (p)
	{	soap_default___ns1__getBucketNames(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getBucketNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getBucketNames(struct soap *soap, const char *URL, struct __ns1__getBucketNames *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getBucketNames(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getBucketNames(struct soap *soap, struct __ns1__getBucketNames *p)
{
	if (soap_read___ns1__getBucketNames(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doesBucketExists_DEFINED
#define SOAP_TYPE___ns1__doesBucketExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doesBucketExists(struct soap*, struct __ns1__doesBucketExists *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doesBucketExists(struct soap*, const struct __ns1__doesBucketExists *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doesBucketExists(struct soap*, const char*, int, const struct __ns1__doesBucketExists *, const char*);
SOAP_FMAC3 struct __ns1__doesBucketExists * SOAP_FMAC4 soap_in___ns1__doesBucketExists(struct soap*, const char*, struct __ns1__doesBucketExists *, const char*);
SOAP_FMAC1 struct __ns1__doesBucketExists * SOAP_FMAC2 soap_instantiate___ns1__doesBucketExists(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doesBucketExists * soap_new___ns1__doesBucketExists(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doesBucketExists(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doesBucketExists * soap_new_req___ns1__doesBucketExists(
	struct soap *soap)
{
	struct __ns1__doesBucketExists *_p = soap_new___ns1__doesBucketExists(soap);
	if (_p)
	{	soap_default___ns1__doesBucketExists(soap, _p);
	}
	return _p;
}

inline struct __ns1__doesBucketExists * soap_new_set___ns1__doesBucketExists(
	struct soap *soap,
	ns1__doesBucketExists *ns1__doesBucketExists_)
{
	struct __ns1__doesBucketExists *_p = soap_new___ns1__doesBucketExists(soap);
	if (_p)
	{	soap_default___ns1__doesBucketExists(soap, _p);
		_p->ns1__doesBucketExists_ = ns1__doesBucketExists_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doesBucketExists(struct soap*, const struct __ns1__doesBucketExists *, const char*, const char*);

inline int soap_write___ns1__doesBucketExists(struct soap *soap, struct __ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doesBucketExists(soap, p), 0) || soap_put___ns1__doesBucketExists(soap, p, "-ns1:doesBucketExists", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doesBucketExists(struct soap *soap, const char *URL, struct __ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doesBucketExists(soap, p), 0) || soap_put___ns1__doesBucketExists(soap, p, "-ns1:doesBucketExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doesBucketExists(struct soap *soap, const char *URL, struct __ns1__doesBucketExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doesBucketExists(soap, p), 0) || soap_put___ns1__doesBucketExists(soap, p, "-ns1:doesBucketExists", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doesBucketExists * SOAP_FMAC4 soap_get___ns1__doesBucketExists(struct soap*, struct __ns1__doesBucketExists *, const char*, const char*);

inline int soap_read___ns1__doesBucketExists(struct soap *soap, struct __ns1__doesBucketExists *p)
{
	if (p)
	{	soap_default___ns1__doesBucketExists(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doesBucketExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doesBucketExists(struct soap *soap, const char *URL, struct __ns1__doesBucketExists *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doesBucketExists(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doesBucketExists(struct soap *soap, struct __ns1__doesBucketExists *p)
{
	if (soap_read___ns1__doesBucketExists(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteBucket_DEFINED
#define SOAP_TYPE___ns1__deleteBucket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteBucket(struct soap*, struct __ns1__deleteBucket *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteBucket(struct soap*, const struct __ns1__deleteBucket *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteBucket(struct soap*, const char*, int, const struct __ns1__deleteBucket *, const char*);
SOAP_FMAC3 struct __ns1__deleteBucket * SOAP_FMAC4 soap_in___ns1__deleteBucket(struct soap*, const char*, struct __ns1__deleteBucket *, const char*);
SOAP_FMAC1 struct __ns1__deleteBucket * SOAP_FMAC2 soap_instantiate___ns1__deleteBucket(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteBucket * soap_new___ns1__deleteBucket(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteBucket(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteBucket * soap_new_req___ns1__deleteBucket(
	struct soap *soap)
{
	struct __ns1__deleteBucket *_p = soap_new___ns1__deleteBucket(soap);
	if (_p)
	{	soap_default___ns1__deleteBucket(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteBucket * soap_new_set___ns1__deleteBucket(
	struct soap *soap,
	ns1__deleteBucket *ns1__deleteBucket_)
{
	struct __ns1__deleteBucket *_p = soap_new___ns1__deleteBucket(soap);
	if (_p)
	{	soap_default___ns1__deleteBucket(soap, _p);
		_p->ns1__deleteBucket_ = ns1__deleteBucket_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteBucket(struct soap*, const struct __ns1__deleteBucket *, const char*, const char*);

inline int soap_write___ns1__deleteBucket(struct soap *soap, struct __ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteBucket(soap, p), 0) || soap_put___ns1__deleteBucket(soap, p, "-ns1:deleteBucket", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteBucket(struct soap *soap, const char *URL, struct __ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteBucket(soap, p), 0) || soap_put___ns1__deleteBucket(soap, p, "-ns1:deleteBucket", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteBucket(struct soap *soap, const char *URL, struct __ns1__deleteBucket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteBucket(soap, p), 0) || soap_put___ns1__deleteBucket(soap, p, "-ns1:deleteBucket", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteBucket * SOAP_FMAC4 soap_get___ns1__deleteBucket(struct soap*, struct __ns1__deleteBucket *, const char*, const char*);

inline int soap_read___ns1__deleteBucket(struct soap *soap, struct __ns1__deleteBucket *p)
{
	if (p)
	{	soap_default___ns1__deleteBucket(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteBucket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteBucket(struct soap *soap, const char *URL, struct __ns1__deleteBucket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__deleteBucket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__deleteBucket(struct soap *soap, struct __ns1__deleteBucket *p)
{
	if (soap_read___ns1__deleteBucket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createBucket_DEFINED
#define SOAP_TYPE___ns1__createBucket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createBucket(struct soap*, struct __ns1__createBucket *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createBucket(struct soap*, const struct __ns1__createBucket *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createBucket(struct soap*, const char*, int, const struct __ns1__createBucket *, const char*);
SOAP_FMAC3 struct __ns1__createBucket * SOAP_FMAC4 soap_in___ns1__createBucket(struct soap*, const char*, struct __ns1__createBucket *, const char*);
SOAP_FMAC1 struct __ns1__createBucket * SOAP_FMAC2 soap_instantiate___ns1__createBucket(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createBucket * soap_new___ns1__createBucket(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__createBucket(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createBucket * soap_new_req___ns1__createBucket(
	struct soap *soap)
{
	struct __ns1__createBucket *_p = soap_new___ns1__createBucket(soap);
	if (_p)
	{	soap_default___ns1__createBucket(soap, _p);
	}
	return _p;
}

inline struct __ns1__createBucket * soap_new_set___ns1__createBucket(
	struct soap *soap,
	ns1__createBucket *ns1__createBucket_)
{
	struct __ns1__createBucket *_p = soap_new___ns1__createBucket(soap);
	if (_p)
	{	soap_default___ns1__createBucket(soap, _p);
		_p->ns1__createBucket_ = ns1__createBucket_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createBucket(struct soap*, const struct __ns1__createBucket *, const char*, const char*);

inline int soap_write___ns1__createBucket(struct soap *soap, struct __ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__createBucket(soap, p), 0) || soap_put___ns1__createBucket(soap, p, "-ns1:createBucket", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__createBucket(struct soap *soap, const char *URL, struct __ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__createBucket(soap, p), 0) || soap_put___ns1__createBucket(soap, p, "-ns1:createBucket", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__createBucket(struct soap *soap, const char *URL, struct __ns1__createBucket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__createBucket(soap, p), 0) || soap_put___ns1__createBucket(soap, p, "-ns1:createBucket", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createBucket * SOAP_FMAC4 soap_get___ns1__createBucket(struct soap*, struct __ns1__createBucket *, const char*, const char*);

inline int soap_read___ns1__createBucket(struct soap *soap, struct __ns1__createBucket *p)
{
	if (p)
	{	soap_default___ns1__createBucket(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createBucket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__createBucket(struct soap *soap, const char *URL, struct __ns1__createBucket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__createBucket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__createBucket(struct soap *soap, struct __ns1__createBucket *p)
{
	if (soap_read___ns1__createBucket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteFiles_DEFINED
#define SOAP_TYPE___ns1__deleteFiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteFiles(struct soap*, struct __ns1__deleteFiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteFiles(struct soap*, const struct __ns1__deleteFiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteFiles(struct soap*, const char*, int, const struct __ns1__deleteFiles *, const char*);
SOAP_FMAC3 struct __ns1__deleteFiles * SOAP_FMAC4 soap_in___ns1__deleteFiles(struct soap*, const char*, struct __ns1__deleteFiles *, const char*);
SOAP_FMAC1 struct __ns1__deleteFiles * SOAP_FMAC2 soap_instantiate___ns1__deleteFiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteFiles * soap_new___ns1__deleteFiles(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteFiles(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteFiles * soap_new_req___ns1__deleteFiles(
	struct soap *soap)
{
	struct __ns1__deleteFiles *_p = soap_new___ns1__deleteFiles(soap);
	if (_p)
	{	soap_default___ns1__deleteFiles(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteFiles * soap_new_set___ns1__deleteFiles(
	struct soap *soap,
	ns1__deleteFiles *ns1__deleteFiles_)
{
	struct __ns1__deleteFiles *_p = soap_new___ns1__deleteFiles(soap);
	if (_p)
	{	soap_default___ns1__deleteFiles(soap, _p);
		_p->ns1__deleteFiles_ = ns1__deleteFiles_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteFiles(struct soap*, const struct __ns1__deleteFiles *, const char*, const char*);

inline int soap_write___ns1__deleteFiles(struct soap *soap, struct __ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteFiles(soap, p), 0) || soap_put___ns1__deleteFiles(soap, p, "-ns1:deleteFiles", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteFiles(struct soap *soap, const char *URL, struct __ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteFiles(soap, p), 0) || soap_put___ns1__deleteFiles(soap, p, "-ns1:deleteFiles", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteFiles(struct soap *soap, const char *URL, struct __ns1__deleteFiles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__deleteFiles(soap, p), 0) || soap_put___ns1__deleteFiles(soap, p, "-ns1:deleteFiles", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteFiles * SOAP_FMAC4 soap_get___ns1__deleteFiles(struct soap*, struct __ns1__deleteFiles *, const char*, const char*);

inline int soap_read___ns1__deleteFiles(struct soap *soap, struct __ns1__deleteFiles *p)
{
	if (p)
	{	soap_default___ns1__deleteFiles(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteFiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteFiles(struct soap *soap, const char *URL, struct __ns1__deleteFiles *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__deleteFiles(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__deleteFiles(struct soap *soap, struct __ns1__deleteFiles *p)
{
	if (soap_read___ns1__deleteFiles(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns1__Exception *ns1__Exception_,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__Exception_ = ns1__Exception_;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__downLoadFile_DEFINED
#define SOAP_TYPE_PointerTons1__downLoadFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__downLoadFile(struct soap*, ns1__downLoadFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__downLoadFile(struct soap*, const char *, int, ns1__downLoadFile *const*, const char *);
SOAP_FMAC3 ns1__downLoadFile ** SOAP_FMAC4 soap_in_PointerTons1__downLoadFile(struct soap*, const char*, ns1__downLoadFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__downLoadFile(struct soap*, ns1__downLoadFile *const*, const char*, const char*);
SOAP_FMAC3 ns1__downLoadFile ** SOAP_FMAC4 soap_get_PointerTons1__downLoadFile(struct soap*, ns1__downLoadFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__uploadFile_DEFINED
#define SOAP_TYPE_PointerTons1__uploadFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__uploadFile(struct soap*, ns1__uploadFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__uploadFile(struct soap*, const char *, int, ns1__uploadFile *const*, const char *);
SOAP_FMAC3 ns1__uploadFile ** SOAP_FMAC4 soap_in_PointerTons1__uploadFile(struct soap*, const char*, ns1__uploadFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__uploadFile(struct soap*, ns1__uploadFile *const*, const char*, const char*);
SOAP_FMAC3 ns1__uploadFile ** SOAP_FMAC4 soap_get_PointerTons1__uploadFile(struct soap*, ns1__uploadFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__deleteFileByName_DEFINED
#define SOAP_TYPE_PointerTons1__deleteFileByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteFileByName(struct soap*, ns1__deleteFileByName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteFileByName(struct soap*, const char *, int, ns1__deleteFileByName *const*, const char *);
SOAP_FMAC3 ns1__deleteFileByName ** SOAP_FMAC4 soap_in_PointerTons1__deleteFileByName(struct soap*, const char*, ns1__deleteFileByName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteFileByName(struct soap*, ns1__deleteFileByName *const*, const char*, const char*);
SOAP_FMAC3 ns1__deleteFileByName ** SOAP_FMAC4 soap_get_PointerTons1__deleteFileByName(struct soap*, ns1__deleteFileByName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__deleteBatchFile_DEFINED
#define SOAP_TYPE_PointerTons1__deleteBatchFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteBatchFile(struct soap*, ns1__deleteBatchFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteBatchFile(struct soap*, const char *, int, ns1__deleteBatchFile *const*, const char *);
SOAP_FMAC3 ns1__deleteBatchFile ** SOAP_FMAC4 soap_in_PointerTons1__deleteBatchFile(struct soap*, const char*, ns1__deleteBatchFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteBatchFile(struct soap*, ns1__deleteBatchFile *const*, const char*, const char*);
SOAP_FMAC3 ns1__deleteBatchFile ** SOAP_FMAC4 soap_get_PointerTons1__deleteBatchFile(struct soap*, ns1__deleteBatchFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__deleteOneFile_DEFINED
#define SOAP_TYPE_PointerTons1__deleteOneFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteOneFile(struct soap*, ns1__deleteOneFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteOneFile(struct soap*, const char *, int, ns1__deleteOneFile *const*, const char *);
SOAP_FMAC3 ns1__deleteOneFile ** SOAP_FMAC4 soap_in_PointerTons1__deleteOneFile(struct soap*, const char*, ns1__deleteOneFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteOneFile(struct soap*, ns1__deleteOneFile *const*, const char*, const char*);
SOAP_FMAC3 ns1__deleteOneFile ** SOAP_FMAC4 soap_get_PointerTons1__deleteOneFile(struct soap*, ns1__deleteOneFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getFileDetail_DEFINED
#define SOAP_TYPE_PointerTons1__getFileDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getFileDetail(struct soap*, ns1__getFileDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getFileDetail(struct soap*, const char *, int, ns1__getFileDetail *const*, const char *);
SOAP_FMAC3 ns1__getFileDetail ** SOAP_FMAC4 soap_in_PointerTons1__getFileDetail(struct soap*, const char*, ns1__getFileDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getFileDetail(struct soap*, ns1__getFileDetail *const*, const char*, const char*);
SOAP_FMAC3 ns1__getFileDetail ** SOAP_FMAC4 soap_get_PointerTons1__getFileDetail(struct soap*, ns1__getFileDetail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getFileMessage_DEFINED
#define SOAP_TYPE_PointerTons1__getFileMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getFileMessage(struct soap*, ns1__getFileMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getFileMessage(struct soap*, const char *, int, ns1__getFileMessage *const*, const char *);
SOAP_FMAC3 ns1__getFileMessage ** SOAP_FMAC4 soap_in_PointerTons1__getFileMessage(struct soap*, const char*, ns1__getFileMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getFileMessage(struct soap*, ns1__getFileMessage *const*, const char*, const char*);
SOAP_FMAC3 ns1__getFileMessage ** SOAP_FMAC4 soap_get_PointerTons1__getFileMessage(struct soap*, ns1__getFileMessage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__doesFileExists_DEFINED
#define SOAP_TYPE_PointerTons1__doesFileExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__doesFileExists(struct soap*, ns1__doesFileExists *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__doesFileExists(struct soap*, const char *, int, ns1__doesFileExists *const*, const char *);
SOAP_FMAC3 ns1__doesFileExists ** SOAP_FMAC4 soap_in_PointerTons1__doesFileExists(struct soap*, const char*, ns1__doesFileExists **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__doesFileExists(struct soap*, ns1__doesFileExists *const*, const char*, const char*);
SOAP_FMAC3 ns1__doesFileExists ** SOAP_FMAC4 soap_get_PointerTons1__doesFileExists(struct soap*, ns1__doesFileExists **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getBucketFileNames_DEFINED
#define SOAP_TYPE_PointerTons1__getBucketFileNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getBucketFileNames(struct soap*, ns1__getBucketFileNames *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getBucketFileNames(struct soap*, const char *, int, ns1__getBucketFileNames *const*, const char *);
SOAP_FMAC3 ns1__getBucketFileNames ** SOAP_FMAC4 soap_in_PointerTons1__getBucketFileNames(struct soap*, const char*, ns1__getBucketFileNames **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getBucketFileNames(struct soap*, ns1__getBucketFileNames *const*, const char*, const char*);
SOAP_FMAC3 ns1__getBucketFileNames ** SOAP_FMAC4 soap_get_PointerTons1__getBucketFileNames(struct soap*, ns1__getBucketFileNames **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getBucketNames_DEFINED
#define SOAP_TYPE_PointerTons1__getBucketNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getBucketNames(struct soap*, ns1__getBucketNames *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getBucketNames(struct soap*, const char *, int, ns1__getBucketNames *const*, const char *);
SOAP_FMAC3 ns1__getBucketNames ** SOAP_FMAC4 soap_in_PointerTons1__getBucketNames(struct soap*, const char*, ns1__getBucketNames **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getBucketNames(struct soap*, ns1__getBucketNames *const*, const char*, const char*);
SOAP_FMAC3 ns1__getBucketNames ** SOAP_FMAC4 soap_get_PointerTons1__getBucketNames(struct soap*, ns1__getBucketNames **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__doesBucketExists_DEFINED
#define SOAP_TYPE_PointerTons1__doesBucketExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__doesBucketExists(struct soap*, ns1__doesBucketExists *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__doesBucketExists(struct soap*, const char *, int, ns1__doesBucketExists *const*, const char *);
SOAP_FMAC3 ns1__doesBucketExists ** SOAP_FMAC4 soap_in_PointerTons1__doesBucketExists(struct soap*, const char*, ns1__doesBucketExists **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__doesBucketExists(struct soap*, ns1__doesBucketExists *const*, const char*, const char*);
SOAP_FMAC3 ns1__doesBucketExists ** SOAP_FMAC4 soap_get_PointerTons1__doesBucketExists(struct soap*, ns1__doesBucketExists **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__deleteBucket_DEFINED
#define SOAP_TYPE_PointerTons1__deleteBucket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteBucket(struct soap*, ns1__deleteBucket *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteBucket(struct soap*, const char *, int, ns1__deleteBucket *const*, const char *);
SOAP_FMAC3 ns1__deleteBucket ** SOAP_FMAC4 soap_in_PointerTons1__deleteBucket(struct soap*, const char*, ns1__deleteBucket **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteBucket(struct soap*, ns1__deleteBucket *const*, const char*, const char*);
SOAP_FMAC3 ns1__deleteBucket ** SOAP_FMAC4 soap_get_PointerTons1__deleteBucket(struct soap*, ns1__deleteBucket **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__createBucket_DEFINED
#define SOAP_TYPE_PointerTons1__createBucket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__createBucket(struct soap*, ns1__createBucket *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__createBucket(struct soap*, const char *, int, ns1__createBucket *const*, const char *);
SOAP_FMAC3 ns1__createBucket ** SOAP_FMAC4 soap_in_PointerTons1__createBucket(struct soap*, const char*, ns1__createBucket **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__createBucket(struct soap*, ns1__createBucket *const*, const char*, const char*);
SOAP_FMAC3 ns1__createBucket ** SOAP_FMAC4 soap_get_PointerTons1__createBucket(struct soap*, ns1__createBucket **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__deleteFiles_DEFINED
#define SOAP_TYPE_PointerTons1__deleteFiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteFiles(struct soap*, ns1__deleteFiles *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteFiles(struct soap*, const char *, int, ns1__deleteFiles *const*, const char *);
SOAP_FMAC3 ns1__deleteFiles ** SOAP_FMAC4 soap_in_PointerTons1__deleteFiles(struct soap*, const char*, ns1__deleteFiles **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteFiles(struct soap*, ns1__deleteFiles *const*, const char*, const char*);
SOAP_FMAC3 ns1__deleteFiles ** SOAP_FMAC4 soap_get_PointerTons1__deleteFiles(struct soap*, ns1__deleteFiles **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Exception_DEFINED
#define SOAP_TYPE_PointerTons1__Exception_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Exception(struct soap*, ns1__Exception *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Exception(struct soap*, const char *, int, ns1__Exception *const*, const char *);
SOAP_FMAC3 ns1__Exception ** SOAP_FMAC4 soap_in_PointerTons1__Exception(struct soap*, const char*, ns1__Exception **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Exception(struct soap*, ns1__Exception *const*, const char*, const char*);
SOAP_FMAC3 ns1__Exception ** SOAP_FMAC4 soap_get_PointerTons1__Exception(struct soap*, ns1__Exception **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
